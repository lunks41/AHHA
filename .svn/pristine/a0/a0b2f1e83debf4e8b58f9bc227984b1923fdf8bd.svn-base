using AHHA.Application.IServices;
using AHHA.Application.IServices.Setting;
using AHHA.Core.Common;
using AHHA.Core.Entities.Setting;
using AHHA.Core.Models.Setting;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Setting
{
    [Route("api/Setting")]
    [ApiController]
    public class DecimalSettingController : BaseController
    {
        private readonly IDecimalSettingService _DecimalSettingService;
        private readonly ILogger<DecimalSettingController> _logger;

        public DecimalSettingController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<DecimalSettingController> logger, IDecimalSettingService DecimalSettingService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _DecimalSettingService = DecimalSettingService;
        }

        //decimal screen

        //get --companyid
        //upsert  --company/model

        [HttpGet, Route("GetDecSetting")]
        [Authorize]
        public async Task<ActionResult<DecimalSettingViewModel>> GetDecSetting([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Setting, (Int32)E_Setting.DecSetting, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var DecSettingViewModel = await _DecimalSettingService.GetDecSettingAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId);

                        if (DecSettingViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, DecSettingViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("UpsertDecSetting")]
        [Authorize]
        public async Task<ActionResult<DecimalSettingViewModel>> UpsertDecSetting(DecimalSettingViewModel decSettingViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Setting, (Int32)E_Setting.DecSetting, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsCreate)
                        {
                            if (decSettingViewModel == null)
                                return NotFound(GenrateMessage.datanotfound);

                            var FinEntity = new S_DecSettings
                            {
                                CompanyId = headerViewModel.CompanyId,
                                AmtDec = decSettingViewModel.AmtDec,
                                LocAmtDec = decSettingViewModel.LocAmtDec,
                                CtyAmtDec = decSettingViewModel.CtyAmtDec,
                                PriceDec = decSettingViewModel.PriceDec,
                                QtyDec = decSettingViewModel.QtyDec,
                                ExhRateDec = decSettingViewModel.ExhRateDec,
                                DateFormat = decSettingViewModel.DateFormat,
                                CreateById = headerViewModel.UserId,
                                EditById = headerViewModel.UserId,
                                EditDate = DateTime.Now,
                            };

                            var createdFin = await _DecimalSettingService.UpsertDecSettingAsync(headerViewModel.RegId, headerViewModel.CompanyId, FinEntity, headerViewModel.UserId);
                            return StatusCode(StatusCodes.Status202Accepted, createdFin);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new Fin record");
            }
        }
    }
}