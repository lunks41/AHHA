using AHHA.Application.IServices;
using AHHA.Application.IServices.Masters;
using AHHA.Core.Common;
using AHHA.Core.Entities.Masters;
using AHHA.Core.Models.Masters;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Admin
{
    [Route("api/Master")]
    [ApiController]
    public class AccountGroupController : BaseController

    {
        private readonly IAccountGroupService _AccountGroupService;
        private readonly ILogger<AccountGroupController> _logger;

        public AccountGroupController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<AccountGroupController> logger, IAccountGroupService AccountGroupService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _AccountGroupService = AccountGroupService;
        }

        [HttpGet, Route("GetAccountGroup")]
        [Authorize]
        public async Task<ActionResult> GetAccountGroup([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (headerViewModel == null || !ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (short)E_Modules.Master, (short)E_Master.AccountGroup, headerViewModel.UserId);

                if (userGroupRight == null)
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }

                var cacheData = await _AccountGroupService.GetAccountGroupListAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.pageSize, headerViewModel.pageNumber, headerViewModel.searchString, headerViewModel.UserId);

                if (cacheData == null)
                {
                    return NotFound(GenrateMessage.datanotfound);
                }

                return StatusCode(StatusCodes.Status202Accepted, cacheData);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError, "Error retrieving data from the database");
            }
        }

        [HttpGet, Route("GetAccountGroupById/{accGroupId}")]
        [Authorize]
        public async Task<ActionResult<AccountGroupViewModel>> GetAccountGroupById(short accGroupId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (headerViewModel == null || !ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    return NoContent();
                }

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (short)E_Modules.Master, (short)E_Master.AccountGroup, headerViewModel.UserId);

                if (userGroupRight == null)
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }

                var accountGroupViewModel = _mapper.Map<AccountGroupViewModel>(await _AccountGroupService.GetAccountGroupByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, accGroupId, headerViewModel.UserId));

                if (accountGroupViewModel == null)
                {
                    return NotFound(GenrateMessage.datanotfound);
                }

                return StatusCode(StatusCodes.Status202Accepted, accountGroupViewModel);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError, "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("SaveAccountGroup")]
        [Authorize]
        public async Task<ActionResult<AccountGroupViewModel>> SaveAccountGroup(AccountGroupViewModel accountGroup, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (headerViewModel == null || !ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    return NoContent();
                }

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (short)E_Modules.Master, (short)E_Master.AccountGroup, headerViewModel.UserId);

                if (userGroupRight == null || !userGroupRight.IsCreate)
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }

                if (accountGroup == null)
                {
                    return NotFound(GenrateMessage.datanotfound);
                }

                var accountGroupEntity = new M_AccountGroup
                {
                    CompanyId = headerViewModel.CompanyId,
                    AccGroupCode = accountGroup.AccGroupCode?.Trim() ?? string.Empty,
                    AccGroupName = accountGroup.AccGroupName?.Trim() ?? string.Empty,
                    SeqNo = accountGroup.SeqNo,
                    IsActive = accountGroup.IsActive,
                    Remarks = accountGroup.Remarks?.Trim() ?? string.Empty,
                    CreateById = headerViewModel.UserId,
                    EditById = headerViewModel.UserId,
                    EditDate = DateTime.Now
                };

                var sqlResponse = await _AccountGroupService.SaveAccountGroupAsync(headerViewModel.RegId, headerViewModel.CompanyId, accountGroupEntity, headerViewModel.UserId);

                return Ok(new SqlResponse { Result = 1, Message = sqlResponse.Message, Data = null, TotalRecords = 0 });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError, "Error creating new AccountGroup record");
            }
        }

        [HttpDelete, Route("DeleteAccountGroup/{accGroupId}")]
        [Authorize]
        public async Task<ActionResult<AccountGroupViewModel>> DeleteAccountGroup(short accGroupId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (headerViewModel == null || !ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    return NoContent();
                }

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (short)E_Modules.Master, (short)E_Master.AccountGroup, headerViewModel.UserId);

                if (userGroupRight == null || !userGroupRight.IsDelete)
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }

                var accountGroupToDelete = await _AccountGroupService.GetAccountGroupByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, accGroupId, headerViewModel.UserId);

                if (accountGroupToDelete == null)
                {
                    return NotFound(GenrateMessage.datanotfound);
                }

                var sqlResponse = await _AccountGroupService.DeleteAccountGroupAsync(headerViewModel.RegId, headerViewModel.CompanyId, accountGroupToDelete, headerViewModel.UserId);

                return StatusCode(StatusCodes.Status202Accepted, sqlResponse);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError, "Error deleting data");
            }
        }
    }
}