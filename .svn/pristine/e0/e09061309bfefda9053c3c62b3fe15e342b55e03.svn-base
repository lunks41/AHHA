using AHHA.Application.CommonServices;
using AHHA.Application.IServices.Masters;
using AHHA.Core.Common;
using AHHA.Core.Entities.Admin;
using AHHA.Core.Entities.Masters;
using AHHA.Core.Models.Masters;
using AHHA.Infra.Data;
using Microsoft.EntityFrameworkCore;
using System.Data;

namespace AHHA.Infra.Services.Masters
{
    public sealed class DocumentTypeService : IDocumentTypeService
    {
        private readonly IRepository<M_DocumentType> _repository;
        private ApplicationDbContext _context;

        public DocumentTypeService(IRepository<M_DocumentType> repository, ApplicationDbContext context)
        {
            _repository = repository;
            _context = context;
        }

        public async Task<DocumentTypeViewModelCount> GetDocumentTypeListAsync(string RegId, Int16 CompanyId, Int16 pageSize, Int16 pageNumber, string searchString, Int16 UserId)
        {
            DocumentTypeViewModelCount countViewModel = new DocumentTypeViewModelCount();
            try
            {
                var totalcount = await _repository.GetQuerySingleOrDefaultAsync<SqlResponceIds>(RegId, $"SELECT COUNT(*) AS CountId FROM M_DocumentType M_Doc WHERE (M_Doc.DocTypeName LIKE '%{searchString}%' OR M_Doc.DocTypeCode LIKE '%{searchString}%' OR M_Doc.Remarks LIKE '%{searchString}%' ) AND M_Doc.DocTypeId<>0 AND M_Doc.CompanyId IN (SELECT distinct CompanyId FROM Fn_Adm_GetShareCompany({CompanyId},{(short)E_Modules.Master},{(short)E_Master.DocumentType}))");

                var result = await _repository.GetQueryAsync<DocumentTypeViewModel>(RegId, $"SELECT M_Doc.DocTypeId,M_Doc.DocTypeCode,M_Doc.DocTypeName,M_Doc.CompanyId,M_Doc.Remarks,M_Doc.IsActive,M_Doc.CreateById,M_Doc.CreateDate,M_Doc.EditById,M_Doc.EditDate,Usr.UserName AS CreateBy,Usr1.UserName AS EditBy FROM dbo.M_DocumentType M_Doc  LEFT JOIN dbo.AdmUser Usr ON Usr.UserId = M_Doc.CreateById LEFT JOIN dbo.AdmUser Usr1 ON Usr1.UserId = M_Doc.EditById WHERE (M_Doc.DocTypeName LIKE '%{searchString}%' OR M_Doc.DocTypeCode LIKE '%{searchString}%' OR M_Doc.Remarks LIKE '%{searchString}%') AND M_Doc.DocTypeId<>0 AND M_Doc.CompanyId IN (SELECT distinct CompanyId FROM Fn_Adm_GetShareCompany({CompanyId},{(short)E_Modules.Master},{(short)E_Master.DocumentType})) ORDER BY M_Doc.DocTypeName OFFSET {pageSize}*({pageNumber - 1}) ROWS FETCH NEXT {pageSize} ROWS ONLY");

                countViewModel.responseCode = 200;
                countViewModel.responseMessage = "success";
                countViewModel.totalRecords = totalcount == null ? 0 : totalcount.CountId;
                countViewModel.data = result == null ? null : result.ToList();

                return countViewModel;
            }
            catch (Exception ex)
            {
                var errorLog = new AdmErrorLog
                {
                    CompanyId = CompanyId,
                    ModuleId = (short)E_Modules.Master,
                    TransactionId = (short)E_Master.DocumentType,
                    DocumentId = 0,
                    DocumentNo = "",
                    TblName = "M_DocumentType",
                    ModeId = (short)E_Mode.View,
                    Remarks = ex.Message + ex.InnerException,
                    CreateById = UserId
                };

                _context.Add(errorLog);
                _context.SaveChanges();

                throw new Exception(ex.ToString());
            }
        }

        public async Task<DocumentTypeViewModel> GetDocumentTypeByIdAsync(string RegId, Int16 CompanyId, Int16 DocTypeId, Int16 UserId)
        {
            try
            {
                var result = await _repository.GetQuerySingleOrDefaultAsync<DocumentTypeViewModel>(RegId, $"SELECT DocTypeId,DocTypeCode,DocTypeName,CompanyId,Remarks,IsActive,CreateById,CreateDate,EditById,EditDate FROM dbo.M_DocumentType WHERE DocTypeId={DocTypeId} AND CompanyId IN (SELECT distinct CompanyId FROM Fn_Adm_GetShareCompany({CompanyId},{(short)E_Modules.Master},{(short)E_Master.DocumentType}))");

                return result;
            }
            catch (Exception ex)
            {
                var errorLog = new AdmErrorLog
                {
                    CompanyId = CompanyId,
                    ModuleId = (short)E_Modules.Master,
                    TransactionId = (short)E_Master.DocumentType,
                    DocumentId = 0,
                    DocumentNo = "",
                    TblName = "M_DocumentType",
                    ModeId = (short)E_Mode.View,
                    Remarks = ex.Message + ex.InnerException,
                    CreateById = UserId,
                };

                _context.Add(errorLog);
                _context.SaveChanges();

                throw new Exception(ex.ToString());
            }
        }

        public async Task<SqlResponce> SaveDocumentTypeAsync(string RegId, Int16 CompanyId, M_DocumentType DocumentType, Int16 UserId)
        {
            using (var transaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var DataExist = await _repository.GetQueryAsync<SqlResponceIds>(RegId, $"SELECT 1 AS IsExist FROM dbo.M_DocumentType WHERE CompanyId IN (SELECT DISTINCT CompanyId FROM dbo.Fn_Adm_GetShareCompany ({CompanyId},{(short)E_Modules.Master},{(short)E_Master.DocumentType})) AND DocTypeCode='{DocumentType.DocTypeCode}' UNION ALL SELECT 2 AS IsExist FROM dbo.M_DocumentType WHERE CompanyId IN (SELECT DISTINCT CompanyId FROM dbo.Fn_Adm_GetShareCompany ({CompanyId},{(short)E_Modules.Master},{(short)E_Master.DocumentType})) AND DocTypeName='{DocumentType.DocTypeName}'");

                    if (DataExist.Count() > 0)
                    {
                        if (DataExist.ToList()[0].IsExist == 1)
                        {
                            return new SqlResponce { Result = -1, Message = "DocumentType Code Exist" };
                        }
                        else if (DataExist.ToList()[0].IsExist == 2)
                        {
                            return new SqlResponce { Result = -2, Message = "DocumentType Name Exist" };
                        }
                    }

                    //Take the Next Id From SQL
                    var sqlMissingResponce = await _repository.GetQuerySingleOrDefaultAsync<SqlResponceIds>(RegId, "SELECT ISNULL((SELECT TOP 1 (DocTypeId + 1) FROM dbo.M_DocumentType WHERE (DocTypeId + 1) NOT IN (SELECT DocTypeId FROM dbo.M_DocumentType)),1) AS NextId");

                    if (sqlMissingResponce != null)
                    {
                        #region Saving DocumentType

                        DocumentType.DocTypeId = Convert.ToInt16(sqlMissingResponce.NextId);

                        var entity = _context.Add(DocumentType);
                        entity.Property(b => b.EditDate).IsModified = false;

                        var DocumentTypeToSave = _context.SaveChanges();

                        #endregion Saving DocumentType

                        #region Save AuditLog

                        if (DocumentTypeToSave > 0)
                        {
                            //Saving Audit log
                            var auditLog = new AdmAuditLog
                            {
                                CompanyId = CompanyId,
                                ModuleId = (short)E_Modules.Master,
                                TransactionId = (short)E_Master.DocumentType,
                                DocumentId = DocumentType.DocTypeId,
                                DocumentNo = DocumentType.DocTypeCode,
                                TblName = "M_DocumentType",
                                ModeId = (short)E_Mode.Create,
                                Remarks = "DocumentType Save Successfully",
                                CreateById = UserId,
                                CreateDate = DateTime.Now
                            };

                            _context.Add(auditLog);
                            var auditLogSave = _context.SaveChanges();

                            if (auditLogSave > 0)
                            {
                                transaction.Commit();
                                return new SqlResponce { Result = 1, Message = "Save Successfully" };
                            }
                        }
                        else
                        {
                            return new SqlResponce { Result = 1, Message = "Save Failed" };
                        }

                        #endregion Save AuditLog
                    }
                    else
                    {
                        return new SqlResponce { Result = -1, Message = "DocTypeId Should not be zero" };
                    }
                    return new SqlResponce();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    _context.ChangeTracker.Clear();

                    var errorLog = new AdmErrorLog
                    {
                        CompanyId = CompanyId,
                        ModuleId = (short)E_Modules.Master,
                        TransactionId = (short)E_Master.DocumentType,
                        DocumentId = 0,
                        DocumentNo = DocumentType.DocTypeCode,
                        TblName = "M_DocumentType",
                        ModeId = (short)E_Mode.Create,
                        Remarks = ex.Message + ex.InnerException,
                        CreateById = UserId
                    };
                    _context.Add(errorLog);
                    _context.SaveChanges();

                    throw new Exception(ex.ToString());
                }
            }
        }

        public async Task<SqlResponce> DeleteDocumentTypeAsync(string RegId, Int16 CompanyId, DocumentTypeViewModel documentTypeViewModel, Int16 UserId)
        {
            using (var transaction = _context.Database.BeginTransaction())
            {
                try
                {
                    if (documentTypeViewModel.DocTypeId > 0)
                    {
                        var DocumentTypeToRemove = _context.M_DocumentType.Where(x => x.DocTypeId == documentTypeViewModel.DocTypeId).ExecuteDelete();

                        if (DocumentTypeToRemove > 0)
                        {
                            var auditLog = new AdmAuditLog
                            {
                                CompanyId = CompanyId,
                                ModuleId = (short)E_Modules.Master,
                                TransactionId = (short)E_Master.DocumentType,
                                DocumentId = documentTypeViewModel.DocTypeId,
                                DocumentNo = documentTypeViewModel.DocTypeCode,
                                TblName = "M_DocumentType",
                                ModeId = (short)E_Mode.Delete,
                                Remarks = "DocumentType Delete Successfully",
                                CreateById = UserId
                            };
                            _context.Add(auditLog);
                            var auditLogSave = await _context.SaveChangesAsync();

                            if (auditLogSave > 0)
                            {
                                transaction.Commit();
                                return new SqlResponce { Result = 1, Message = "Delete Successfully" };
                            }
                        }
                        else
                        {
                            return new SqlResponce { Result = -1, Message = "Delete Failed" };
                        }
                    }
                    else
                    {
                        return new SqlResponce { Result = -1, Message = "DocTypeId Should be zero" };
                    }
                    return new SqlResponce();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    _context.ChangeTracker.Clear();

                    var errorLog = new AdmErrorLog
                    {
                        CompanyId = CompanyId,
                        ModuleId = (short)E_Modules.Master,
                        TransactionId = (short)E_Master.DocumentType,
                        DocumentId = 0,
                        DocumentNo = "",
                        TblName = "M_DocumentType",
                        ModeId = (short)E_Mode.Delete,
                        Remarks = ex.Message + ex.InnerException,
                        CreateById = UserId,
                    };

                    _context.Add(errorLog);
                    _context.SaveChanges();

                    throw new Exception(ex.ToString());
                }
            }
        }
    }
}