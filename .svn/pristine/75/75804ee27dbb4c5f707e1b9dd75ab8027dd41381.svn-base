using AHHA.Application.IServices;
using AHHA.Application.IServices.Accounts.AR;
using AHHA.Core.Common;
using AHHA.Core.Entities.Accounts.AR;
using AHHA.Core.Helper;
using AHHA.Core.Models.Account;
using AHHA.Core.Models.Account.AR;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Accounts.AR
{
    [Route("api/Account")]
    [ApiController]
    public class ARReceiptController : BaseController
    {
        private readonly IARReceiptService _ARReceiptService;
        private readonly ILogger<ARReceiptController> _logger;

        public ARReceiptController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<ARReceiptController> logger, IARReceiptService ARReceiptService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _ARReceiptService = ARReceiptService;
        }

        //All ARReceipt LIST
        [HttpGet, Route("GetARReceipt")]
        [Authorize]
        public async Task<ActionResult> GetARReceipt([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AR, (Int32)E_AR.Receipt, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var cacheData = await _ARReceiptService.GetARReceiptListAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.pageSize, headerViewModel.pageNumber, headerViewModel.searchString.Trim(), headerViewModel.UserId);

                        if (cacheData == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, cacheData);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                 "Error retrieving data from the database");
            }
        }

        //GET ONE ARReceipt BY INVOICEID
        [HttpGet, Route("GetARReceiptbyId/{ReceiptId}")]
        [Authorize]
        public async Task<ActionResult<ARReceiptViewModel>> GetARReceiptById(string ReceiptId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AR, (Int32)E_AR.Receipt, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var ARReceiptViewModel = await _ARReceiptService.GetARReceiptByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(string.IsNullOrEmpty(ReceiptId) ? 0 : ReceiptId.Trim()), string.Empty, headerViewModel.UserId);

                        if (ARReceiptViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, ARReceiptViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        //GET ONE ARReceipt BY INVOICEID
        [HttpGet, Route("GetARReceiptbyNo/{ReceiptNo}")]
        [Authorize]
        public async Task<ActionResult<ARReceiptViewModel>> GetARReceiptByNo(string ReceiptNo, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AR, (Int32)E_AR.Receipt, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var ARReceiptViewModel = await _ARReceiptService.GetARReceiptByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, 0, ReceiptNo, headerViewModel.UserId);

                        if (ARReceiptViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, ARReceiptViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        //SAVE ONE ARReceipt BY INVOICEID
        [HttpPost, Route("SaveARReceipt")]
        [Authorize]
        public async Task<ActionResult<ARReceiptViewModel>> SaveARReceipt(ARReceiptViewModel aRReceiptViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AR, (Int32)E_AR.Receipt, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsCreate || userGroupRight.IsEdit)
                        {
                            if (aRReceiptViewModel == null)
                                return NotFound(GenrateMessage.datanotfound);

                            //Header Data Mapping
                            var ARReceiptEntity = new ArReceiptHd
                            {
                                CompanyId = headerViewModel.CompanyId,
                                ReceiptId = Convert.ToInt64(string.IsNullOrEmpty(aRReceiptViewModel.ReceiptId) ? 0 : aRReceiptViewModel.ReceiptId.Trim()),
                                ReceiptNo = aRReceiptViewModel.ReceiptNo,
                                ReferenceNo = aRReceiptViewModel.ReferenceNo == null ? string.Empty : aRReceiptViewModel.ReferenceNo,
                                TrnDate = DateHelperStatic.ParseClientDate(aRReceiptViewModel.TrnDate),
                                AccountDate = DateHelperStatic.ParseClientDate(aRReceiptViewModel.AccountDate),
                                BankId = Convert.ToInt16(aRReceiptViewModel.BankId == null ? 0 : aRReceiptViewModel.BankId),
                                PaymentTypeId = Convert.ToInt16(aRReceiptViewModel.PaymentTypeId == null ? 0 : aRReceiptViewModel.PaymentTypeId),
                                ChequeNo = aRReceiptViewModel.ChequeNo,
                                ChequeDate = DateHelperStatic.ParseClientDate(aRReceiptViewModel.ChequeDate),
                                CustomerId = aRReceiptViewModel.CustomerId,
                                CurrencyId = aRReceiptViewModel.CurrencyId,
                                ExhRate = aRReceiptViewModel.ExhRate == null ? 0 : aRReceiptViewModel.ExhRate,
                                TotAmt = aRReceiptViewModel.TotAmt == null ? 0 : aRReceiptViewModel.TotAmt,
                                TotLocalAmt = aRReceiptViewModel.TotLocalAmt == null ? 0 : aRReceiptViewModel.TotLocalAmt,
                                RecCurrencyId = aRReceiptViewModel.RecCurrencyId,
                                RecExhRate = aRReceiptViewModel.RecExhRate == null ? 0 : aRReceiptViewModel.RecExhRate,
                                RecTotAmt = aRReceiptViewModel.RecTotAmt == null ? 0 : aRReceiptViewModel.RecTotAmt,
                                RecTotLocalAmt = aRReceiptViewModel.RecTotLocalAmt == null ? 0 : aRReceiptViewModel.RecTotLocalAmt,
                                ExhGainLoss = aRReceiptViewModel.ExhGainLoss == null ? 0 : aRReceiptViewModel.ExhGainLoss,
                                Remarks = aRReceiptViewModel.Remarks == null ? string.Empty : aRReceiptViewModel.Remarks,
                                ModuleFrom = aRReceiptViewModel.ModuleFrom == null ? string.Empty : aRReceiptViewModel.ModuleFrom,
                                CreateById = headerViewModel.UserId,
                                EditById = headerViewModel.UserId,
                                EditDate = DateTime.Now,
                            };

                            //Details Table data mapping
                            var ARReceiptDtEntities = new List<ArReceiptDt>();

                            if (aRReceiptViewModel.data_details != null)
                            {
                                foreach (var item in aRReceiptViewModel.data_details)
                                {
                                    var ARReceiptDtEntity = new ArReceiptDt
                                    {
                                        ReceiptId = Convert.ToInt64(string.IsNullOrEmpty(item.ReceiptId) ? 0 : item.ReceiptId.Trim()),
                                        ReceiptNo = item.ReceiptNo,
                                        ItemNo = item.ItemNo,
                                        TransactionId = item.TransactionId,
                                        DocumentId = Convert.ToInt64(string.IsNullOrEmpty(item.DocumentId) ? 0 : item.DocumentId.Trim()),
                                        DocumentNo = item.DocumentNo,
                                        DocCurrencyId = item.DocCurrencyId,
                                        DocAccountDate = DateHelperStatic.ParseClientDate(item.DocAccountDate),
                                        DocDueDate = DateHelperStatic.ParseClientDate(item.DocDueDate),
                                        DocTotAmt = item.DocTotAmt,
                                        DocTotLocalAmt = item.DocTotLocalAmt,
                                        DocBalAmt = item.DocBalAmt,
                                        DocBalLocalAmt = item.DocBalLocalAmt,
                                        AllocAmt = item.AllocAmt,
                                        AllocLocalAmt = item.AllocLocalAmt,
                                        DocAllocAmt = item.DocAllocAmt,
                                        DocAllocLocalAmt = item.DocAllocLocalAmt,
                                        CentDiff = item.CentDiff,
                                        ExhGainLoss = item.ExhGainLoss,
                                        EditVersion = item.EditVersion,
                                    };

                                    ARReceiptDtEntities.Add(ARReceiptDtEntity);
                                }
                            }

                            var sqlResponce = await _ARReceiptService.SaveARReceiptAsync(headerViewModel.RegId, headerViewModel.CompanyId, ARReceiptEntity, ARReceiptDtEntities, headerViewModel.UserId);

                            if (sqlResponce.Result > 0)
                            {
                                var customerModel = await _ARReceiptService.GetARReceiptByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, sqlResponce.Result, string.Empty, headerViewModel.UserId);

                                return StatusCode(StatusCodes.Status202Accepted, customerModel);
                            }

                            return StatusCode(StatusCodes.Status202Accepted, sqlResponce);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new ARReceipt record");
            }
        }

        [HttpPost, Route("DeleteARReceipt")]
        [Authorize]
        public async Task<ActionResult<ARReceiptViewModel>> DeleteARReceipt(DeleteViewModel deleteViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AR, (Int32)E_AR.Receipt, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsDelete)
                        {
                            if (!string.IsNullOrEmpty(deleteViewModel.DocumentId))
                            {
                                var sqlResponce = await _ARReceiptService.DeleteARReceiptAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(deleteViewModel.DocumentId), deleteViewModel.CancelRemarks, headerViewModel.UserId);

                                if (sqlResponce.Result > 0)
                                {
                                    var customerModel = await _ARReceiptService.GetARReceiptByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(deleteViewModel.DocumentId), string.Empty, headerViewModel.UserId);

                                    return StatusCode(StatusCodes.Status202Accepted, customerModel);
                                }

                                return StatusCode(StatusCodes.Status204NoContent, sqlResponce);
                            }
                            else
                            {
                                return NotFound(GenrateMessage.datanotfound);
                            }
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}