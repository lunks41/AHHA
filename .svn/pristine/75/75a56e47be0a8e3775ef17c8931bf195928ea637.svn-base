using AHHA.Application.CommonServices;
using AHHA.Application.IServices.Masters;
using AHHA.Core.Common;
using AHHA.Core.Entities.Admin;
using AHHA.Core.Entities.Masters;
using AHHA.Core.Models.Masters;
using AHHA.Infra.Data;
using Microsoft.EntityFrameworkCore;
using System.Data;

namespace AHHA.Infra.Services.Masters
{
    public sealed class TaxService : ITaxService
    {
        private readonly IRepository<M_Tax> _repository;
        private ApplicationDbContext _context;

        public TaxService(IRepository<M_Tax> repository, ApplicationDbContext context)
        {
            _repository = repository;
            _context = context;
        }

        #region HEaders

        public async Task<TaxViewModelCount> GetTaxListAsync(string RegId, Int16 CompanyId, Int16 pageSize, Int16 pageNumber, string searchString, Int16 UserId)
        {
            TaxViewModelCount countViewModel = new TaxViewModelCount();
            try
            {
                var totalcount = await _repository.GetQuerySingleOrDefaultAsync<SqlResponceIds>(RegId, $"SELECT COUNT(*) AS CountId FROM M_Tax M_Tx INNER JOIN dbo.M_TaxCategory M_Txc ON M_Txc.TaxCategoryId = M_Tx.TaxCategoryId  WHERE (M_Tx.TaxName LIKE '%{searchString}%' OR M_Tx.TaxName LIKE '%{searchString}%' OR M_Tx.Remarks LIKE '%{searchString}%' OR M_Txc.TaxCategoryCode LIKE '%{searchString}%' OR M_Txc.TaxCategoryName LIKE '%{searchString}%' ) AND M_Tx.TaxId<>0 AND M_Tx.CompanyId IN (SELECT distinct CompanyId FROM Fn_Adm_GetShareCompany({CompanyId},{(short)E_Modules.Master},{(short)E_Master.Tax}))");

                var result = await _repository.GetQueryAsync<TaxViewModel>(RegId, $"SELECT M_Tx.TaxId,M_Tx.TaxName,M_Tx.TaxCode,M_Tx.CompanyId,M_Tx.Remarks,M_Tx.IsActive,M_Txc.TaxCategoryCode,M_Txc.TaxCategoryName,M_Tx.CreateById,M_Tx.CreateDate,M_Tx.EditById,M_Tx.EditDate,Usr.UserName AS CreateBy,Usr1.UserName AS EditBy FROM M_Tax M_Tx INNER JOIN dbo.M_TaxCategory M_Txc ON M_Txc.TaxCategoryId = M_Tx.TaxCategoryId LEFT JOIN dbo.AdmUser Usr ON Usr.UserId = M_Tx.CreateById LEFT JOIN dbo.AdmUser Usr1 ON Usr1.UserId = M_Tx.EditById WHERE (M_Tx.TaxName LIKE '%{searchString}%' OR M_Tx.TaxName LIKE '%{searchString}%' OR M_Tx.Remarks LIKE '%{searchString}%' OR M_Txc.TaxCategoryCode LIKE '%{searchString}%' OR M_Txc.TaxCategoryName LIKE '%{searchString}%' ) AND M_Tx.TaxId<>0 AND M_Tx.CompanyId IN (SELECT distinct CompanyId FROM Fn_Adm_GetShareCompany({CompanyId},{(short)E_Modules.Master},{(short)E_Master.Tax})) ORDER BY M_Tx.TaxName OFFSET {pageSize}*({pageNumber - 1}) ROWS FETCH NEXT {pageSize} ROWS ONLY");

                countViewModel.responseCode = 200;
                countViewModel.responseMessage = "success";
                countViewModel.totalRecords = totalcount == null ? 0 : totalcount.CountId;
                countViewModel.data = result == null ? null : result.ToList();

                return countViewModel;
            }
            catch (Exception ex)
            {
                var errorLog = new AdmErrorLog
                {
                    CompanyId = CompanyId,
                    ModuleId = (short)E_Modules.Master,
                    TransactionId = (short)E_Master.Tax,
                    DocumentId = 0,
                    DocumentNo = "",
                    TblName = "M_Tax",
                    ModeId = (short)E_Mode.View,
                    Remarks = ex.Message + ex.InnerException,
                    CreateById = UserId
                };

                _context.Add(errorLog);
                _context.SaveChanges();

                throw new Exception(ex.ToString());
            }
        }

        public async Task<M_Tax> GetTaxByIdAsync(string RegId, Int16 CompanyId, Int16 TaxId, Int16 UserId)
        {
            try
            {
                var result = await _repository.GetQuerySingleOrDefaultAsync<M_Tax>(RegId, $"SELECT TaxId,TaxCode,TaxName,CompanyId,Remarks,IsActive,CreateById,CreateDate,EditById,EditDate FROM dbo.M_Tax WHERE TaxId={TaxId}");

                return result;
            }
            catch (Exception ex)
            {
                var errorLog = new AdmErrorLog
                {
                    CompanyId = CompanyId,
                    ModuleId = (short)E_Modules.Master,
                    TransactionId = (short)E_Master.Tax,
                    DocumentId = 0,
                    DocumentNo = "",
                    TblName = "M_Tax",
                    ModeId = (short)E_Mode.View,
                    Remarks = ex.Message + ex.InnerException,
                    CreateById = UserId,
                };

                _context.Add(errorLog);
                _context.SaveChanges();

                throw new Exception(ex.ToString());
            }
        }

        public async Task<SqlResponce> SaveTaxAsync(string RegId, Int16 CompanyId, M_Tax Tax, Int16 UserId)
        {
            using (var transaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var DataExist = await _repository.GetQueryAsync<SqlResponceIds>(RegId, $"SELECT 1 AS IsExist FROM dbo.M_Tax WHERE CompanyId IN (SELECT DISTINCT CompanyId FROM dbo.Fn_Adm_GetShareCompany ({CompanyId},{(short)E_Modules.Master},{(short)E_Master.Tax})) AND TaxCode='{Tax.TaxCode}' UNION ALL SELECT 2 AS IsExist FROM dbo.M_Tax WHERE CompanyId IN (SELECT DISTINCT CompanyId FROM dbo.Fn_Adm_GetShareCompany ({CompanyId},{(short)E_Modules.Master},{(short)E_Master.Tax})) AND TaxName='{Tax.TaxName}'");

                    if (DataExist.Count() > 0)
                    {
                        if (DataExist.ToList()[0].IsExist == 1)
                        {
                            return new SqlResponce { Result = -1, Message = "Tax Code Exist" };
                        }
                        else if (DataExist.ToList()[0].IsExist == 2)
                        {
                            return new SqlResponce { Result = -2, Message = "Tax Name Exist" };
                        }
                    }

                    //Take the Next Id From SQL
                    var sqlMissingResponce = await _repository.GetQuerySingleOrDefaultAsync<SqlResponceIds>(RegId, "SELECT ISNULL((SELECT TOP 1 (TaxId + 1) FROM dbo.M_Tax WHERE (TaxId + 1) NOT IN (SELECT TaxId FROM dbo.M_Tax)),1) AS NextId");
                    if (sqlMissingResponce != null && sqlMissingResponce.NextId > 0)
                    {
                        #region Saving Tax

                        Tax.TaxId = Convert.ToInt16(sqlMissingResponce.NextId);

                        var entity = _context.Add(Tax);
                        entity.Property(b => b.EditDate).IsModified = false;

                        var TaxToSave = _context.SaveChanges();

                        #endregion Saving Tax

                        #region Save AuditLog

                        if (TaxToSave > 0)
                        {
                            //Saving Audit log
                            var auditLog = new AdmAuditLog
                            {
                                CompanyId = CompanyId,
                                ModuleId = (short)E_Modules.Master,
                                TransactionId = (short)E_Master.Tax,
                                DocumentId = Tax.TaxId,
                                DocumentNo = Tax.TaxCode,
                                TblName = "M_Tax",
                                ModeId = (short)E_Mode.Create,
                                Remarks = "Tax Save Successfully",
                                CreateById = UserId,
                                CreateDate = DateTime.Now
                            };

                            _context.Add(auditLog);
                            var auditLogSave = _context.SaveChanges();

                            if (auditLogSave > 0)
                            {
                                transaction.Commit();
                                return new SqlResponce { Result = 1, Message = "Save Successfully" };
                            }
                        }
                        else
                        {
                            return new SqlResponce { Result = 1, Message = "Save Failed" };
                        }

                        #endregion Save AuditLog
                    }
                    else
                    {
                        return new SqlResponce { Result = -1, Message = "TaxId Should not be zero" };
                    }
                    return new SqlResponce();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    _context.ChangeTracker.Clear();

                    var errorLog = new AdmErrorLog
                    {
                        CompanyId = CompanyId,
                        ModuleId = (short)E_Modules.Master,
                        TransactionId = (short)E_Master.Tax,
                        DocumentId = 0,
                        DocumentNo = Tax.TaxCode,
                        TblName = "M_Tax",
                        ModeId = (short)E_Mode.Create,
                        Remarks = ex.Message + ex.InnerException,
                        CreateById = UserId
                    };
                    _context.Add(errorLog);
                    _context.SaveChanges();

                    throw new Exception(ex.ToString());
                }
            }
        }

        public async Task<SqlResponce> DeleteTaxAsync(string RegId, Int16 CompanyId, M_Tax Tax, Int16 UserId)
        {
            using (var transaction = _context.Database.BeginTransaction())
            {
                try
                {
                    if (Tax.TaxId > 0)
                    {
                        var TaxToRemove = _context.M_Tax.Where(x => x.TaxId == Tax.TaxId).ExecuteDelete();

                        if (TaxToRemove > 0)
                        {
                            var auditLog = new AdmAuditLog
                            {
                                CompanyId = CompanyId,
                                ModuleId = (short)E_Modules.Master,
                                TransactionId = (short)E_Master.Tax,
                                DocumentId = Tax.TaxId,
                                DocumentNo = Tax.TaxCode,
                                TblName = "M_Tax",
                                ModeId = (short)E_Mode.Delete,
                                Remarks = "Tax Delete Successfully",
                                CreateById = UserId
                            };
                            _context.Add(auditLog);
                            var auditLogSave = await _context.SaveChangesAsync();

                            if (auditLogSave > 0)
                            {
                                transaction.Commit();
                                return new SqlResponce { Result = 1, Message = "Delete Successfully" };
                            }
                        }
                        else
                        {
                            return new SqlResponce { Result = -1, Message = "Delete Failed" };
                        }
                    }
                    else
                    {
                        return new SqlResponce { Result = -1, Message = "TaxId Should be zero" };
                    }
                    return new SqlResponce();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    _context.ChangeTracker.Clear();

                    var errorLog = new AdmErrorLog
                    {
                        CompanyId = CompanyId,
                        ModuleId = (short)E_Master.TaxCategory,
                        TransactionId = (short)E_Master.Tax,
                        DocumentId = 0,
                        DocumentNo = "",
                        TblName = "M_TaxCategory",
                        ModeId = (short)E_Mode.Delete,
                        Remarks = ex.Message + ex.InnerException,
                        CreateById = UserId,
                    };

                    _context.Add(errorLog);
                    _context.SaveChanges();

                    throw new Exception(ex.ToString());
                }
            }
        }

        #endregion HEaders

        #region Details

        public async Task<TaxDtViewModelCount> GetTaxDtListAsync(string RegId, Int16 CompanyId, Int16 pageSize, Int16 pageNumber, string searchString, Int16 UserId)
        {
            TaxDtViewModelCount countViewModel = new TaxDtViewModelCount();
            try
            {
                var totalcount = await _repository.GetQuerySingleOrDefaultAsync<SqlResponceIds>(RegId, $"SELECT COUNT(*) AS CountId FROM dbo.M_TaxDt M_TxDt INNER JOIN dbo.M_Tax M_Tx ON M_Tx.TaxId = M_TxDt.TaxId LEFT JOIN dbo.AdmUser Usr ON Usr.UserId = M_TxDt.CreateById LEFT JOIN dbo.AdmUser Usr1 ON Usr1.UserId = M_TxDt.EditById WHERE (M_Tx.TaxName LIKE '%{searchString}%' OR M_Tx.TaxCode LIKE '%{searchString}%') AND M_TxDt.TaxId<>0 AND M_TxDt.CompanyId IN (SELECT distinct CompanyId FROM Fn_Adm_GetShareCompany({CompanyId},{(short)E_Modules.Master},{(short)E_Master.TaxDt}))");

                var result = await _repository.GetQueryAsync<TaxDtViewModel>(RegId, $"SELECT M_TxDt.TaxId,M_Tx.TaxCode,M_Tx.TaxName,M_TxDt.CompanyId,M_TxDt.TaxPercentage,M_TxDt.ValidFrom,M_TxDt.CreateById,M_TxDt.CreateDate,M_TxDt.EditById,M_TxDt.EditDate,Usr.UserName AS CreateBy,Usr1.UserName AS EditBy FROM dbo.M_TaxDt M_TxDt INNER JOIN dbo.M_Tax M_Tx ON M_Tx.TaxId = M_TxDt.TaxId LEFT JOIN dbo.AdmUser Usr ON Usr.UserId = M_TxDt.CreateById LEFT JOIN dbo.AdmUser Usr1 ON Usr1.UserId = M_TxDt.EditById WHERE (M_Tx.TaxName LIKE '%{searchString}%' OR M_Tx.TaxCode LIKE '%{searchString}%') AND M_TxDt.TaxId<>0 AND M_TxDt.CompanyId IN (SELECT distinct CompanyId FROM Fn_Adm_GetShareCompany({CompanyId},{(short)E_Modules.Master},{(short)E_Master.TaxDt})) ORDER BY M_Tx.TaxName OFFSET {pageSize}*({pageNumber - 1}) ROWS FETCH NEXT {pageSize} ROWS ONLY");

                countViewModel.responseCode = 200;
                countViewModel.responseMessage = "success";
                countViewModel.totalRecords = totalcount == null ? 0 : totalcount.CountId;
                countViewModel.data = result == null ? null : result.ToList();

                return countViewModel;
            }
            catch (Exception ex)
            {
                var errorLog = new AdmErrorLog
                {
                    CompanyId = CompanyId,
                    ModuleId = (short)E_Modules.Master,
                    TransactionId = (short)E_Master.TaxDt,
                    DocumentId = 0,
                    DocumentNo = "",
                    TblName = "M_TaxDt",
                    ModeId = (short)E_Mode.View,
                    Remarks = ex.Message + ex.InnerException,
                    CreateById = UserId
                };

                _context.Add(errorLog);
                _context.SaveChanges();

                throw new Exception(ex.ToString());
            }
        }

        public async Task<TaxDtViewModel> GetTaxDtByIdAsync(string RegId, Int16 CompanyId, Int16 TaxId, DateTime ValidFrom, Int16 UserId)
        {
            string validFrom = ValidFrom.ToString("yyyy-MM-dd");
            try
            {
                var result = await _repository.GetQuerySingleOrDefaultAsync<TaxDtViewModel>(RegId, $"SELECT M_TxDt.TaxId,M_Tx.TaxCode,M_Tx.TaxName,M_TxDt.CompanyId,M_TxDt.TaxPercentage,M_TxDt.ValidFrom,M_TxDt.CreateById,M_TxDt.CreateDate,M_TxDt.EditById,M_TxDt.EditDate,Usr.UserName AS CreateBy,Usr1.UserName AS EditBy FROM dbo.M_TaxDt M_TxDt INNER JOIN dbo.M_Tax M_Tx ON M_Tx.TaxId = M_TxDt.TaxId LEFT JOIN dbo.AdmUser Usr ON Usr.UserId = M_TxDt.CreateById LEFT JOIN dbo.AdmUser Usr1 ON Usr1.UserId = M_TxDt.EditById WHERE M_TxDt.TaxId={TaxId} AND M_TxDt.ValidFrom='{validFrom}'");

                return result;
            }
            catch (Exception ex)
            {
                var errorLog = new AdmErrorLog
                {
                    CompanyId = CompanyId,
                    ModuleId = (short)E_Modules.Master,
                    TransactionId = (short)E_Master.TaxDt,
                    DocumentId = 0,
                    DocumentNo = "",
                    TblName = "M_TaxDt",
                    ModeId = (short)E_Mode.View,
                    Remarks = ex.Message + ex.InnerException,
                    CreateById = UserId,
                };

                _context.Add(errorLog);
                _context.SaveChanges();

                throw new Exception(ex.ToString());
            }
        }

        public async Task<SqlResponce> SaveTaxDtAsync(string RegId, Int16 CompanyId, M_TaxDt m_TaxDt, Int16 UserId)
        {
            string validFrom = m_TaxDt.ValidFrom.ToString("yyyy-MM-dd");
            using (var transaction = _context.Database.BeginTransaction())
            {
                bool IsEdit = false;
                try
                {
                    if (m_TaxDt.TaxId != 0)
                    {
                        IsEdit = true;
                    }
                    if (IsEdit)
                    {
                        var DataExist = await _repository.GetQueryAsync<SqlResponceIds>(RegId, $"SELECT 1 AS IsExist FROM dbo.M_TaxDt WHERE CompanyId={CompanyId} AND TaxId={m_TaxDt.TaxId} AND ValidFrom='{validFrom}'");

                        if (DataExist.Count() > 0 && DataExist.ToList()[0].IsExist == 1)
                        {
                            var entityHead = _context.Update(m_TaxDt);
                            entityHead.Property(b => b.CreateById).IsModified = false;
                            entityHead.Property(b => b.CompanyId).IsModified = false;
                        }
                        else
                        {
                            var entityHead = _context.Add(m_TaxDt);
                            entityHead.Property(b => b.EditDate).IsModified = false;
                            entityHead.Property(b => b.EditById).IsModified = false;
                        }
                    }
                    var CurrencyDtToSave = _context.SaveChanges();

                    #region Save AuditLog

                    if (CurrencyDtToSave > 0)
                    {
                        //Saving Audit log
                        var auditLog = new AdmAuditLog
                        {
                            CompanyId = CompanyId,
                            ModuleId = (short)E_Modules.Master,
                            TransactionId = (short)E_Master.TaxDt,
                            DocumentId = m_TaxDt.TaxId,
                            DocumentNo = "",
                            TblName = "M_CurrencyDt",
                            ModeId = IsEdit ? (short)E_Mode.Update : (short)E_Mode.Create,
                            Remarks = "CurrencyDt Save Successfully",
                            CreateById = UserId,
                            CreateDate = DateTime.Now
                        };

                        _context.Add(auditLog);
                        var auditLogSave = _context.SaveChanges();

                        if (auditLogSave > 0)
                        {
                            transaction.Commit();
                            return new SqlResponce { Result = 1, Message = "Save Successfully" };
                        }
                    }
                    else
                    {
                        return new SqlResponce { Result = 1, Message = "Save Failed" };
                    }

                    #endregion Save AuditLog

                    return new SqlResponce();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    _context.ChangeTracker.Clear();

                    var errorLog = new AdmErrorLog
                    {
                        CompanyId = CompanyId,
                        ModuleId = (short)E_Modules.Master,
                        TransactionId = (short)E_Master.TaxDt,
                        DocumentId = 0,
                        DocumentNo = "",
                        TblName = "M_CurrencyDt",
                        ModeId = IsEdit ? (short)E_Mode.Update : (short)E_Mode.Create,
                        Remarks = ex.Message + ex.InnerException,
                        CreateById = UserId
                    };
                    _context.Add(errorLog);
                    _context.SaveChanges();

                    throw new Exception(ex.ToString());
                }
            }
        }

        public async Task<SqlResponce> DeleteTaxDtAsync(string RegId, Int16 CompanyId, TaxDtViewModel m_TaxDt, Int16 UserId)
        {
            using (var transaction = _context.Database.BeginTransaction())
            {
                try
                {
                    if (m_TaxDt.TaxId > 0)
                    {
                        var TaxDtToRemove = await _context.M_TaxDt.Where(x => x.TaxId == m_TaxDt.TaxId && x.ValidFrom == m_TaxDt.ValidFrom && x.CompanyId == CompanyId).ExecuteDeleteAsync();

                        if (TaxDtToRemove > 0)
                        {
                            var auditLog = new AdmAuditLog
                            {
                                CompanyId = CompanyId,
                                ModuleId = (short)E_Modules.Master,
                                TransactionId = (short)E_Master.TaxDt,
                                DocumentId = m_TaxDt.TaxId,
                                DocumentNo = "",
                                TblName = "M_TaxDt",
                                ModeId = (short)E_Mode.Delete,
                                Remarks = "TaxDt Delete Successfully",
                                CreateById = UserId
                            };
                            _context.Add(auditLog);
                            var auditLogSave = await _context.SaveChangesAsync();

                            if (auditLogSave > 0)
                            {
                                transaction.Commit();
                                return new SqlResponce { Result = 1, Message = "Delete Successfully" };
                            }
                        }
                        else
                        {
                            return new SqlResponce { Result = -1, Message = "Delete Failed" };
                        }
                    }
                    else
                    {
                        return new SqlResponce { Result = -1, Message = "TaxId Should be zero" };
                    }
                    return new SqlResponce();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    _context.ChangeTracker.Clear();

                    var errorLog = new AdmErrorLog
                    {
                        CompanyId = CompanyId,
                        ModuleId = (short)E_Master.Tax,
                        TransactionId = (short)E_Master.TaxDt,
                        DocumentId = 0,
                        DocumentNo = "",
                        TblName = "M_TaxDtCategory",
                        ModeId = (short)E_Mode.Delete,
                        Remarks = ex.Message + ex.InnerException,
                        CreateById = UserId,
                    };

                    _context.Add(errorLog);
                    _context.SaveChanges();

                    throw new Exception(ex.ToString());
                }
            }
        }

        #endregion Details
    }
}