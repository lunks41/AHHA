using AHHA.Application.IServices;
using AHHA.Application.IServices.Accounts.AP;
using AHHA.Core.Common;
using AHHA.Core.Entities.Accounts.AP;
using AHHA.Core.Helper;
using AHHA.Core.Models.Account;
using AHHA.Core.Models.Account.AP;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Accounts.AP
{
    [Route("api/Account")]
    [ApiController]
    public class APAdjustmentController : BaseController
    {
        private readonly IAPAdjustmentService _APAdjustmentService;
        private readonly ILogger<APAdjustmentController> _logger;

        public APAdjustmentController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<APAdjustmentController> logger, IAPAdjustmentService APAdjustmentService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _APAdjustmentService = APAdjustmentService;
        }

        [HttpGet, Route("GetAPAdjustment")]
        [Authorize]
        public async Task<ActionResult> GetAPAdjustment([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var cacheData = await _APAdjustmentService.GetAPAdjustmentListAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.pageSize, headerViewModel.pageNumber, headerViewModel.searchString.Trim(), headerViewModel.UserId);

                        if (cacheData == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, cacheData);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                 new SqlResponse { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        [HttpGet, Route("GetAPAdjustmentbyId/{AdjustmentId}")]
        [Authorize]
        public async Task<ActionResult<APAdjustmentViewModel>> GetAPAdjustmentById(string AdjustmentId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var APAdjustmentViewModel = await _APAdjustmentService.GetAPAdjustmentByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(string.IsNullOrEmpty(AdjustmentId) ? 0 : AdjustmentId.Trim()), string.Empty, headerViewModel.UserId);

                        if (APAdjustmentViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, APAdjustmentViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new SqlResponse { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        [HttpGet, Route("GetAPAdjustmentbyNo/{AdjustmentNo}")]
        [Authorize]
        public async Task<ActionResult<APAdjustmentViewModel>> GetAPAdjustmentByNo(string AdjustmentNo, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var APAdjustmentViewModel = await _APAdjustmentService.GetAPAdjustmentByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, 0, AdjustmentNo, headerViewModel.UserId);

                        if (APAdjustmentViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, APAdjustmentViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new SqlResponse { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        [HttpPost, Route("SaveAPAdjustment")]
        [Authorize]
        public async Task<ActionResult<APAdjustmentViewModel>> SaveAPAdjustment(APAdjustmentViewModel apAdjustmentViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsCreate || userGroupRight.IsEdit)
                        {
                            if (apAdjustmentViewModel == null)
                                return NotFound(GenrateMessage.datanotfound);

                            var APAdjustmentEntity = new ApAdjustmentHd
                            {
                                CompanyId = headerViewModel.CompanyId,
                                AdjustmentId = Convert.ToInt64(string.IsNullOrEmpty(apAdjustmentViewModel.AdjustmentId) ? 0 : apAdjustmentViewModel.AdjustmentId.Trim()),
                                AdjustmentNo = apAdjustmentViewModel.AdjustmentNo,
                                ReferenceNo = apAdjustmentViewModel.ReferenceNo == null ? string.Empty : apAdjustmentViewModel.ReferenceNo,
                                TrnDate = DateHelperStatic.ParseClientDate(apAdjustmentViewModel.TrnDate),
                                AccountDate = DateHelperStatic.ParseClientDate(apAdjustmentViewModel.AccountDate),
                                DeliveryDate = DateHelperStatic.ParseClientDate(apAdjustmentViewModel.DeliveryDate),
                                DueDate = DateHelperStatic.ParseClientDate(apAdjustmentViewModel.DueDate),
                                SupplierId = apAdjustmentViewModel.SupplierId,
                                CurrencyId = apAdjustmentViewModel.CurrencyId,
                                ExhRate = apAdjustmentViewModel.ExhRate == null ? 0 : apAdjustmentViewModel.ExhRate,
                                CtyExhRate = apAdjustmentViewModel.CtyExhRate == null ? 0 : apAdjustmentViewModel.CtyExhRate,
                                CreditTermId = apAdjustmentViewModel.CreditTermId,
                                BankId = Convert.ToInt16(apAdjustmentViewModel.BankId == null ? 0 : apAdjustmentViewModel.BankId),
                                TotAmt = apAdjustmentViewModel.TotAmt == null ? 0 : apAdjustmentViewModel.TotAmt,
                                TotLocalAmt = apAdjustmentViewModel.TotLocalAmt == null ? 0 : apAdjustmentViewModel.TotLocalAmt,
                                TotCtyAmt = apAdjustmentViewModel.TotCtyAmt == null ? 0 : apAdjustmentViewModel.TotCtyAmt,
                                GstAmt = apAdjustmentViewModel.GstAmt == null ? 0 : apAdjustmentViewModel.GstAmt,
                                GstLocalAmt = apAdjustmentViewModel.GstLocalAmt == null ? 0 : apAdjustmentViewModel.GstLocalAmt,
                                GstCtyAmt = apAdjustmentViewModel.GstCtyAmt == null ? 0 : apAdjustmentViewModel.GstCtyAmt,
                                TotAmtAftGst = apAdjustmentViewModel.TotAmtAftGst == null ? 0 : apAdjustmentViewModel.TotAmtAftGst,
                                TotLocalAmtAftGst = apAdjustmentViewModel.TotLocalAmtAftGst == null ? 0 : apAdjustmentViewModel.TotLocalAmtAftGst,
                                TotCtyAmtAftGst = apAdjustmentViewModel.TotCtyAmtAftGst == null ? 0 : apAdjustmentViewModel.TotCtyAmtAftGst,
                                BalAmt = apAdjustmentViewModel.BalAmt == null ? 0 : apAdjustmentViewModel.BalAmt,
                                BalLocalAmt = apAdjustmentViewModel.BalLocalAmt == null ? 0 : apAdjustmentViewModel.BalLocalAmt,
                                PayAmt = apAdjustmentViewModel.PayAmt == null ? 0 : apAdjustmentViewModel.PayAmt,
                                PayLocalAmt = apAdjustmentViewModel.PayLocalAmt == null ? 0 : apAdjustmentViewModel.PayLocalAmt,
                                ExGainLoss = apAdjustmentViewModel.ExGainLoss == null ? 0 : apAdjustmentViewModel.ExGainLoss,
                                OperationId = Convert.ToInt64(string.IsNullOrEmpty(apAdjustmentViewModel.OperationId) == null ? 0 : apAdjustmentViewModel.OperationId.Trim()),
                                OperationNo = apAdjustmentViewModel.OperationNo == null ? string.Empty : apAdjustmentViewModel.OperationNo,
                                Remarks = apAdjustmentViewModel.Remarks == null ? string.Empty : apAdjustmentViewModel.Remarks,
                                Address1 = apAdjustmentViewModel.Address1 == null ? string.Empty : apAdjustmentViewModel.Address1,
                                Address2 = apAdjustmentViewModel.Address2 == null ? string.Empty : apAdjustmentViewModel.Address2,
                                Address3 = apAdjustmentViewModel.Address3 == null ? string.Empty : apAdjustmentViewModel.Address3,
                                Address4 = apAdjustmentViewModel.Address4 == null ? string.Empty : apAdjustmentViewModel.Address4,
                                PinCode = apAdjustmentViewModel.PinCode == null ? string.Empty : apAdjustmentViewModel.PinCode,
                                CountryId = apAdjustmentViewModel.CountryId,
                                PhoneNo = apAdjustmentViewModel.PhoneNo == null ? string.Empty : apAdjustmentViewModel.PhoneNo,
                                FaxNo = apAdjustmentViewModel.FaxNo == null ? string.Empty : apAdjustmentViewModel.FaxNo,
                                ContactName = apAdjustmentViewModel.ContactName == null ? string.Empty : apAdjustmentViewModel.ContactName,
                                MobileNo = apAdjustmentViewModel.MobileNo == null ? string.Empty : apAdjustmentViewModel.MobileNo,
                                EmailAdd = apAdjustmentViewModel.EmailAdd == null ? string.Empty : apAdjustmentViewModel.EmailAdd,
                                ModuleFrom = apAdjustmentViewModel.ModuleFrom == null ? string.Empty : apAdjustmentViewModel.ModuleFrom,
                                CustomerName = apAdjustmentViewModel.CustomerName == null ? string.Empty : apAdjustmentViewModel.CustomerName,
                                CreateById = headerViewModel.UserId,
                                EditById = headerViewModel.UserId,
                                EditDate = DateTime.Now,
                            };

                            //Details Table data mapping
                            var APAdjustmentDtEntities = new List<ApAdjustmentDt>();

                            if (apAdjustmentViewModel.data_details != null)
                            {
                                foreach (var item in apAdjustmentViewModel.data_details)
                                {
                                    var APAdjustmentDtEntity = new ApAdjustmentDt
                                    {
                                        AdjustmentId = Convert.ToInt64(string.IsNullOrEmpty(item.AdjustmentId) ? 0 : item.AdjustmentId.Trim()),
                                        AdjustmentNo = item.AdjustmentNo,
                                        ItemNo = item.ItemNo,
                                        SeqNo = item.SeqNo,
                                        DocItemNo = item.DocItemNo,
                                        ProductId = item.ProductId,
                                        GLId = item.GLId,
                                        QTY = item.QTY,
                                        BillQTY = item.BillQTY,
                                        UomId = item.UomId,
                                        UnitPrice = item.UnitPrice,
                                        TotAmt = item.TotAmt,
                                        TotLocalAmt = item.TotLocalAmt,
                                        TotCtyAmt = item.TotCtyAmt,
                                        Remarks = item.Remarks,
                                        GstId = item.GstId,
                                        GstPercentage = item.GstPercentage,
                                        GstAmt = item.GstAmt,
                                        GstLocalAmt = item.GstLocalAmt,
                                        GstCtyAmt = item.GstCtyAmt,
                                        DeliveryDate = DateHelperStatic.ParseClientDate(item.DeliveryDate),
                                        DepartmentId = item.DepartmentId,
                                        EmployeeId = item.EmployeeId,
                                        PortId = item.PortId,
                                        VesselId = item.VesselId,
                                        BargeId = item.BargeId,
                                        VoyageId = item.VoyageId,
                                        OperationId = Convert.ToInt64(string.IsNullOrEmpty(item.OperationId.Trim())),
                                        OperationNo = item.OperationNo,
                                        OPRefNo = item.OPRefNo,
                                        SupplyDate = DateHelperStatic.ParseClientDate(item.SupplyDate),
                                    };

                                    APAdjustmentDtEntities.Add(APAdjustmentDtEntity);
                                }
                            }

                            var sqlResponse = await _APAdjustmentService.SaveAPAdjustmentAsync(headerViewModel.RegId, headerViewModel.CompanyId, APAdjustmentEntity, APAdjustmentDtEntities, headerViewModel.UserId);

                            if (sqlResponse.Result > 0)
                            {
                                var customerModel = await _APAdjustmentService.GetAPAdjustmentByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, sqlResponse.Result, string.Empty, headerViewModel.UserId);

                                return StatusCode(StatusCodes.Status202Accepted, customerModel);
                            }

                            return StatusCode(StatusCodes.Status202Accepted, sqlResponse);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new APAdjustment record");
            }
        }

        [HttpPost, Route("DeleteAPAdjustment")]
        [Authorize]
        public async Task<ActionResult<APAdjustmentViewModel>> DeleteAPAdjustment(DeleteViewModel deleteViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsDelete)
                        {
                            if (!string.IsNullOrEmpty(deleteViewModel.DocumentId))
                            {
                                var sqlResponse = await _APAdjustmentService.DeleteAPAdjustmentAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(deleteViewModel.DocumentId), deleteViewModel.DocumentNo, deleteViewModel.CancelRemarks, headerViewModel.UserId);

                                if (sqlResponse.Result > 0)
                                {
                                    var customerModel = await _APAdjustmentService.GetAPAdjustmentByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(deleteViewModel.DocumentId), string.Empty, headerViewModel.UserId);

                                    return StatusCode(StatusCodes.Status202Accepted, customerModel);
                                }

                                return StatusCode(StatusCodes.Status204NoContent, sqlResponse);
                            }
                            else
                            {
                                return NotFound(GenrateMessage.datanotfound);
                            }
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}