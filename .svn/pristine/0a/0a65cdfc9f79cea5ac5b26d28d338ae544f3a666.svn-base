using AHHA.Application.IServices;
using AHHA.Application.IServices.Masters;
using AHHA.Core.Common;
using AHHA.Core.Entities.Masters;
using AHHA.Core.Models.Masters;
using AHHA.Infra.Services.Masters;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Masters
{
    [Route("api/Master")]
    [ApiController]
    public class CustomerAddressController : BaseController
    {
        private readonly ICustomerAddressService _CustomerAddressService;
        private readonly ILogger<CustomerAddressController> _logger;

        public CustomerAddressController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<CustomerAddressController> logger, ICustomerAddressService CustomerAddressService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _CustomerAddressService = CustomerAddressService;
        }

        //Get the Customer Address List
        [HttpGet, Route("GetCustomerAddressbyCustomerId/{CustomerId}")]
        [Authorize]
        public async Task<ActionResult> GetCustomerAddressByCustomerId(Int16 CustomerId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return NoContent();

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.Customer, headerViewModel.UserId);

                if (userGroupRight == null)
                    return NotFound(GenrateMessage.authenticationfailed);

                var cacheData = await _CustomerAddressService.GetCustomerAddressByCustomerIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, CustomerId, headerViewModel.UserId);

                if (cacheData == null)
                    return Ok(new SqlResponse { Result = -1, Message = "failed", Data = null, TotalRecords = 0 });

                return Ok(new SqlResponse { Result = 1, Message = "success", Data = cacheData, TotalRecords = 0 });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        //Customer Address one record by using addressId
        [HttpGet, Route("GetCustomerAddressbyid/{CustomerId}/{AddressId}")]
        [Authorize]
        public async Task<ActionResult<CustomerAddressViewModel>> GetCustomerAddressById(Int32 CustomerId, Int16 AddressId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return NoContent();

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.Customer, headerViewModel.UserId);

                if (userGroupRight == null)
                    return NotFound(GenrateMessage.authenticationfailed);

                var cacheData = await _CustomerAddressService.GetCustomerAddressByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, CustomerId, AddressId, headerViewModel.UserId);

                if (cacheData == null)
                    return Ok(new SqlResponse { Result = -1, Message = "failed", Data = null, TotalRecords = 0 });

                return Ok(new SqlResponse { Result = 1, Message = "success", Data = cacheData, TotalRecords = 0 });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("SaveCustomerAddress")]
        [Authorize]
        public async Task<ActionResult<CustomerAddressViewModel>> SaveCustomerAddress(CustomerAddressViewModel customerAddressViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (customerAddressViewModel == null || customerAddressViewModel.CustomerId == 0)
                    return NotFound();

                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return NoContent();

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.Customer, headerViewModel.UserId);

                if (userGroupRight == null || !userGroupRight.IsCreate)
                    return NotFound(GenrateMessage.authenticationfailed);

                var CustomerAddressEntity = new M_CustomerAddress
                {
                    CustomerId = customerAddressViewModel.CustomerId,
                    AddressId = customerAddressViewModel.AddressId,
                    Address1 = customerAddressViewModel.Address1?.Trim() ?? string.Empty,
                    Address2 = customerAddressViewModel.Address2?.Trim() ?? string.Empty,
                    Address3 = customerAddressViewModel.Address3?.Trim() ?? string.Empty,
                    Address4 = customerAddressViewModel.Address4?.Trim() ?? string.Empty,
                    PinCode = customerAddressViewModel.PinCode?.Trim() ?? string.Empty,
                    CountryId = customerAddressViewModel.CountryId,
                    PhoneNo = customerAddressViewModel.PhoneNo?.Trim() ?? string.Empty,
                    FaxNo = customerAddressViewModel.FaxNo?.Trim() ?? string.Empty,
                    EmailAdd = customerAddressViewModel.EmailAdd?.Trim() ?? string.Empty,
                    WebUrl = customerAddressViewModel.WebUrl?.Trim() ?? string.Empty,
                    IsDefaultAdd = customerAddressViewModel.IsDefaultAdd,
                    IsDeliveryAdd = customerAddressViewModel.IsDeliveryAdd,
                    IsFinAdd = customerAddressViewModel.IsFinAdd,
                    IsSalesAdd = customerAddressViewModel.IsSalesAdd,
                    IsActive = customerAddressViewModel.IsActive,
                    CreateById = headerViewModel.UserId,
                    EditById = headerViewModel.UserId,
                    EditDate = DateTime.Now,
                };

                var sqlResponse = await _CustomerAddressService.SaveCustomerAddressAsync(headerViewModel.RegId, headerViewModel.CompanyId, CustomerAddressEntity, headerViewModel.UserId);

                return Ok(new SqlResponse { Result = sqlResponse.Result, Message = sqlResponse.Message, Data = null, TotalRecords = 0 });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError, "Error creating new CustomerAddress record");
            }
        }

        [HttpDelete, Route("DeleteCustomerAddress/{CustomerId}/{AddressId}")]
        [Authorize]
        public async Task<ActionResult<M_CustomerAddress>> DeleteCustomerAddress(Int32 CustomerId, Int16 AddressId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return NoContent();

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.Customer, headerViewModel.UserId);

                if (userGroupRight == null)
                    return NotFound(GenrateMessage.authenticationfailed);
                if (!userGroupRight.IsDelete)
                    return Unauthorized(GenrateMessage.authenticationfailed);

                var sqlResponse = await _CustomerAddressService.DeleteCustomerAddressAsync(headerViewModel.RegId, headerViewModel.CompanyId, CustomerId, AddressId, headerViewModel.UserId);

                return Ok(new SqlResponse { Result = sqlResponse.Result, Message = sqlResponse.Message, Data = null, TotalRecords = 0 });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}