using AHHA.Application.IServices;
using AHHA.Application.IServices.Accounts.AP;
using AHHA.Core.Common;
using AHHA.Core.Entities.Accounts.AP;
using AHHA.Core.Helper;
using AHHA.Core.Models.Account;
using AHHA.Core.Models.Account.AP;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Accounts.AP
{
    [Route("api/Account")]
    [ApiController]
    public class APAdjustmentController : BaseController
    {
        private readonly IAPAdjustmentService _APAdjustmentService;
        private readonly ILogger<APAdjustmentController> _logger;

        public APAdjustmentController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<APAdjustmentController> logger, IAPAdjustmentService APAdjustmentService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _APAdjustmentService = APAdjustmentService;
        }

        [HttpGet, Route("GetAPAdjustment")]
        [Authorize]
        public async Task<ActionResult> GetAPAdjustment([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return BadRequest("Invalid headers");

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Adjustment, headerViewModel.UserId);

                if (userGroupRight == null)
                    return Unauthorized("Authentication failed");

                var cacheData = await _APAdjustmentService.GetAPAdjustmentListAsync(
                    headerViewModel.RegId, headerViewModel.CompanyId,
                    headerViewModel.pageSize, headerViewModel.pageNumber,
                    headerViewModel.searchString?.Trim(), headerViewModel.fromDate, headerViewModel.toDate, headerViewModel.UserId
                );

                if (cacheData == null)
                    return NotFound("Data not found");

                var sqlResponse = new SqlResponse
                {
                    Result = 1,
                    Message = "Success",
                    Data = cacheData.data,
                    TotalRecords = cacheData.totalRecords
                };

                return Ok(sqlResponse);
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error in GetAPAdjustment: {ex.Message}");
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new SqlResponse { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        [HttpGet, Route("GetAPAdjustmentbyIdNo/{AdjustmentId}/{AdjustmentNo}")]
        [Authorize]
        public async Task<ActionResult<APAdjustmentViewModel>> GetAPAdjustmentByIdNo(string AdjustmentId, string AdjustmentNo, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (AdjustmentId == "0" && AdjustmentNo == "")
                    return NotFound("Invalid Id");

                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return BadRequest("Invalid headers");

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Adjustment, headerViewModel.UserId);

                if (userGroupRight == null)
                    return Unauthorized("Authentication failed");

                var arAdjustmentViewModel = await _APAdjustmentService.GetAPAdjustmentByIdAsync(
                    headerViewModel.RegId, headerViewModel.CompanyId,
                    Convert.ToInt64(string.IsNullOrEmpty(AdjustmentId) ? 0 : AdjustmentId?.Trim()),
                    AdjustmentNo, headerViewModel.UserId
                );

                if (arAdjustmentViewModel == null)
                    return StatusCode(StatusCodes.Status200OK, new SqlResponse { Result = 0, Message = "Data does not exist", Data = null });

                return Ok(new SqlResponse { Result = 1, Message = "Success", Data = arAdjustmentViewModel });
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error in GetAPAdjustmentById: {ex.Message}");
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new SqlResponse { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        [HttpPost, Route("SaveAPAdjustment")]
        [Authorize]
        public async Task<ActionResult<APAdjustmentViewModel>> SaveAPAdjustment(
            APAdjustmentViewModel aRAdjustmentViewModel,
            [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (aRAdjustmentViewModel == null)
                    return NotFound(GenerateMessage.DataNotFound);

                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return NoContent();

                var userGroupRight = ValidateScreen(
                    headerViewModel.RegId,
                    headerViewModel.CompanyId,
                    (short)E_Modules.AP,
                    (int)E_AP.Adjustment,
                    headerViewModel.UserId);

                if (userGroupRight == null || (!userGroupRight.IsCreate && !userGroupRight.IsEdit))
                    return NotFound(GenerateMessage.AuthenticationFailed);

                // Header Data Mapping
                var APAdjustmentEntity = new ApAdjustmentHd
                {
                    CompanyId = headerViewModel.CompanyId,
                    AdjustmentId = aRAdjustmentViewModel.AdjustmentId != null ? Convert.ToInt64(aRAdjustmentViewModel.AdjustmentId) : 0,
                    AdjustmentNo = aRAdjustmentViewModel.AdjustmentNo?.Trim() ?? string.Empty,
                    ReferenceNo = aRAdjustmentViewModel.ReferenceNo?.Trim() ?? string.Empty,
                    TrnDate = DateHelperStatic.ParseClientDate(aRAdjustmentViewModel.TrnDate),
                    AccountDate = DateHelperStatic.ParseClientDate(aRAdjustmentViewModel.AccountDate),
                    DeliveryDate = DateHelperStatic.ParseClientDate(aRAdjustmentViewModel.DeliveryDate),
                    DueDate = DateHelperStatic.ParseClientDate(aRAdjustmentViewModel.DueDate),
                    SupplierId = aRAdjustmentViewModel.SupplierId,
                    CurrencyId = aRAdjustmentViewModel.CurrencyId,
                    ExhRate = aRAdjustmentViewModel.ExhRate,
                    CtyExhRate = aRAdjustmentViewModel.CtyExhRate,
                    CreditTermId = aRAdjustmentViewModel.CreditTermId,
                    BankId = aRAdjustmentViewModel.BankId,
                    IsDebit = aRAdjustmentViewModel.IsDebit,
                    TotAmt = aRAdjustmentViewModel.TotAmt,
                    TotLocalAmt = aRAdjustmentViewModel.TotLocalAmt,
                    TotCtyAmt = aRAdjustmentViewModel.TotCtyAmt,
                    GstClaimDate = DateHelperStatic.ParseClientDate(aRAdjustmentViewModel.GstClaimDate),
                    GstAmt = aRAdjustmentViewModel.GstAmt,
                    GstLocalAmt = aRAdjustmentViewModel.GstLocalAmt,
                    GstCtyAmt = aRAdjustmentViewModel.GstCtyAmt,
                    TotAmtAftGst = aRAdjustmentViewModel.TotAmtAftGst,
                    TotLocalAmtAftGst = aRAdjustmentViewModel.TotLocalAmtAftGst,
                    TotCtyAmtAftGst = aRAdjustmentViewModel.TotCtyAmtAftGst,
                    BalAmt = aRAdjustmentViewModel.BalAmt,
                    BalLocalAmt = aRAdjustmentViewModel.BalLocalAmt,
                    PayAmt = aRAdjustmentViewModel.PayAmt,
                    PayLocalAmt = aRAdjustmentViewModel.PayLocalAmt,
                    ExGainLoss = aRAdjustmentViewModel.ExGainLoss,
                    Remarks = aRAdjustmentViewModel.Remarks?.Trim() ?? string.Empty,
                    Address1 = aRAdjustmentViewModel.Address1?.Trim() ?? string.Empty,
                    Address2 = aRAdjustmentViewModel.Address2?.Trim() ?? string.Empty,
                    Address3 = aRAdjustmentViewModel.Address3?.Trim() ?? string.Empty,
                    Address4 = aRAdjustmentViewModel.Address4?.Trim() ?? string.Empty,
                    PinCode = aRAdjustmentViewModel.PinCode?.Trim() ?? string.Empty,
                    CountryId = aRAdjustmentViewModel.CountryId,
                    PhoneNo = aRAdjustmentViewModel.PhoneNo?.Trim() ?? string.Empty,
                    FaxNo = aRAdjustmentViewModel.FaxNo?.Trim() ?? string.Empty,
                    ContactName = aRAdjustmentViewModel.ContactName?.Trim() ?? string.Empty,
                    MobileNo = aRAdjustmentViewModel.MobileNo?.Trim() ?? string.Empty,
                    EmailAdd = aRAdjustmentViewModel.EmailAdd?.Trim() ?? string.Empty,
                    ModuleFrom = aRAdjustmentViewModel.ModuleFrom?.Trim() ?? string.Empty,
                    CustomerName = aRAdjustmentViewModel.CustomerName?.Trim() ?? string.Empty,
                    SuppAdjustmentNo = aRAdjustmentViewModel.SuppAdjustmentNo?.Trim() ?? string.Empty,
                    ArAdjustmentId = !string.IsNullOrEmpty(aRAdjustmentViewModel.ArAdjustmentId?.Trim()) ? Convert.ToInt64(aRAdjustmentViewModel.ArAdjustmentId?.Trim()) : 0,
                    ArAdjustmentNo = aRAdjustmentViewModel.ArAdjustmentNo?.Trim() ?? string.Empty,
                    CreateById = headerViewModel.UserId,
                    EditById = headerViewModel.UserId,
                    EditDate = DateTime.Now,
                };

                // Details Mapping
                var arAdjustmentDtEntities = aRAdjustmentViewModel.data_details?.Select(item => new ApAdjustmentDt
                {
                    AdjustmentId = item.AdjustmentId != null ? Convert.ToInt64(item.AdjustmentId) : 0,
                    AdjustmentNo = item.AdjustmentNo?.Trim() ?? string.Empty,
                    ItemNo = item.ItemNo,
                    SeqNo = item.SeqNo,
                    DocItemNo = item.DocItemNo,
                    ProductId = item.ProductId,
                    GLId = item.GLId,
                    QTY = item.QTY,
                    BillQTY = item.BillQTY,
                    UomId = item.UomId,
                    UnitPrice = item.UnitPrice,
                    IsDebit = item.IsDebit,
                    TotAmt = item.TotAmt,
                    TotLocalAmt = item.TotLocalAmt,
                    TotCtyAmt = item.TotCtyAmt,
                    Remarks = item.Remarks?.Trim() ?? string.Empty,
                    GstId = item.GstId,
                    GstPercentage = item.GstPercentage,
                    GstAmt = item.GstAmt,
                    GstLocalAmt = item.GstLocalAmt,
                    GstCtyAmt = item.GstCtyAmt,
                    DeliveryDate = item.DeliveryDate == "" ? null : DateHelperStatic.ParseClientDate(item.DeliveryDate),
                    DepartmentId = item.DepartmentId,
                    EmployeeId = item.EmployeeId,
                    PortId = item.PortId,
                    VesselId = item.VesselId,
                    BargeId = item.BargeId,
                    VoyageId = item.VoyageId,
                    OperationId = Convert.ToInt64(item.OperationId),
                    OperationNo = item.OperationNo?.Trim() ?? string.Empty,
                    OPRefNo = item.OPRefNo?.Trim() ?? string.Empty,
                    PurchaseOrderId = Convert.ToInt64(item.PurchaseOrderId),
                    PurchaseOrderNo = item.PurchaseOrderNo?.Trim() ?? string.Empty,
                    SupplyDate = item.SupplyDate == "" ? null : DateHelperStatic.ParseClientDate(item.SupplyDate),
                    CustomerName = item.CustomerName?.Trim() ?? string.Empty,
                    CustAdjustmentNo = item.CustAdjustmentNo?.Trim() ?? string.Empty,
                    EditVersion = item.EditVersion,
                }).ToList();

                var sqlResponse = await _APAdjustmentService.SaveAPAdjustmentAsync(
                    headerViewModel.RegId,
                    headerViewModel.CompanyId,
                    APAdjustmentEntity,
                    arAdjustmentDtEntities,
                    headerViewModel.UserId);

                if (sqlResponse.Result > 0)
                {
                    var customerModel = await _APAdjustmentService.GetAPAdjustmentByIdAsync(
                        headerViewModel.RegId,
                        headerViewModel.CompanyId,
                        sqlResponse.Result,
                        string.Empty,
                        headerViewModel.UserId);

                    return Ok(new SqlResponse { Result = 1, Message = sqlResponse.Message, Data = customerModel, TotalRecords = 0 });
                }

                return StatusCode(StatusCodes.Status202Accepted, sqlResponse);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                     new SqlResponse { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        [HttpPost, Route("DeleteAPAdjustment")]
        [Authorize]
        public async Task<ActionResult<APAdjustmentViewModel>> DeleteAPAdjustment(DeleteViewModel deleteViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return BadRequest("Invalid headers");

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Adjustment, headerViewModel.UserId);

                if (userGroupRight == null)
                    return Unauthorized("Authentication failed");

                if (!userGroupRight.IsDelete)
                    return Forbid("You do not have permission to delete");

                if (string.IsNullOrEmpty(deleteViewModel.DocumentId))
                    return NotFound("Data not found");

                var sqlResponse = await _APAdjustmentService.DeleteAPAdjustmentAsync(
                    headerViewModel.RegId, headerViewModel.CompanyId,
                    Convert.ToInt64(deleteViewModel.DocumentId),
                    deleteViewModel.CancelRemarks, headerViewModel.UserId
                );

                if (sqlResponse.Result > 0)
                {
                    var customerModel = await _APAdjustmentService.GetAPAdjustmentByIdAsync(
                        headerViewModel.RegId, headerViewModel.CompanyId,
                        Convert.ToInt64(deleteViewModel.DocumentId), string.Empty, headerViewModel.UserId
                    );

                    return Ok(new SqlResponse { Result = sqlResponse.Result, Message = sqlResponse.Message, Data = customerModel });
                }
                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error in DeleteAPAdjustment: {ex.Message}");
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Internal Server Error");
            }
        }

        [HttpGet, Route("GetHistoryAPAdjustmentbyId/{AdjustmentId}")]
        [Authorize]
        public async Task<ActionResult<APAdjustmentViewModel>> GetHistoryAPAdjustmentbyId(string AdjustmentId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (AdjustmentId == null || AdjustmentId == "" || AdjustmentId == "0")
                    return NoContent();

                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return BadRequest("Invalid headers");

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Adjustment, headerViewModel.UserId);

                if (userGroupRight == null)
                    return Unauthorized("Authentication failed");

                var arAdjustmentViewModel = await _APAdjustmentService.GetHistoryAPAdjustmentByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(string.IsNullOrEmpty(AdjustmentId) ? 0 : AdjustmentId?.Trim()), string.Empty, headerViewModel.UserId);

                if (arAdjustmentViewModel == null)
                    return StatusCode(StatusCodes.Status200OK, new SqlResponse { Result = 0, Message = "Data does not exist", Data = null });

                return Ok(new SqlResponse { Result = 1, Message = "Success", Data = arAdjustmentViewModel });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new SqlResponse { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }
    }
}