using AHHA.Application.IServices;
using AHHA.Application.IServices.Accounts.AR;
using AHHA.Core.Common;
using AHHA.Core.Entities.Accounts.AR;
using AHHA.Core.Helper;
using AHHA.Core.Models.Account;
using AHHA.Core.Models.Account.AP;
using AHHA.Core.Models.Account.AR;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Accounts.AR
{
    [Route("api/Account")]
    [ApiController]
    public class ARDocumentSetOffController : BaseController
    {
        private readonly IARDocumentSetOffService _ARDocumentSetOffService;
        private readonly ILogger<ARDocumentSetOffController> _logger;

        public ARDocumentSetOffController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<ARDocumentSetOffController> logger, IARDocumentSetOffService ARDocumentSetOffService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _ARDocumentSetOffService = ARDocumentSetOffService;
        }

        [HttpGet, Route("GetARDocumentSetOff")]
        [Authorize]
        public async Task<ActionResult> GetARDocumentSetOff([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return BadRequest("Invalid headers");

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AR, (Int32)E_AR.DocSetoff, headerViewModel.UserId);

                if (userGroupRight == null)
                    return Unauthorized("Authentication failed");

                var cacheData = await _ARDocumentSetOffService.GetARDocumentSetOffListAsync(
                    headerViewModel.RegId, headerViewModel.CompanyId,
                    headerViewModel.pageSize, headerViewModel.pageNumber,
                    headerViewModel.fromDate, headerViewModel.toDate,
                    headerViewModel.searchString.Trim(), headerViewModel.UserId
                );

                if (cacheData == null)
                    return NotFound("Data not found");

                var sqlResponse = new SqlResponse
                {
                    Result = 1,
                    Message = "Success",
                    Data = cacheData.data,
                    TotalRecords = cacheData.totalRecords
                };

                return Ok(sqlResponse);
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error in GetARDocumentSetOff: {ex.Message}");
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new SqlResponse { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        [HttpGet, Route("GetARDocumentSetOffbyIdNo/{SetoffId}/{SetoffNo}")]
        [Authorize]
        public async Task<ActionResult<ARDocumentSetOffViewModel>> GetARDocumentSetOffByIdNo(string SetoffId, string SetoffNo, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (SetoffId == "0" && SetoffNo == "")
                    return NotFound("Invalid Id");

                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return BadRequest("Invalid headers");

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AR, (Int32)E_AR.DocSetoff, headerViewModel.UserId);

                if (userGroupRight == null)
                    return Unauthorized("Authentication failed");

                var arDocumentSetOffViewModel = await _ARDocumentSetOffService.GetARDocumentSetOffByIdAsync(
                    headerViewModel.RegId, headerViewModel.CompanyId,
                    Convert.ToInt64(string.IsNullOrEmpty(SetoffId) ? 0 : SetoffId.Trim()),
                    SetoffNo, headerViewModel.UserId
                );

                if (arDocumentSetOffViewModel == null)
                    return StatusCode(StatusCodes.Status200OK, new SqlResponse { Result = 0, Message = "Data does not exist", Data = null });

                return Ok(new SqlResponse { Result = 1, Message = "Success", Data = arDocumentSetOffViewModel });
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error in GetARDocumentSetOffById: {ex.Message}");
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new SqlResponse { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        //SAVE ONE ARDocumentSetOff BY INVOICEID
        [HttpPost, Route("SaveARDocumentSetOff")]
        [Authorize]
        public async Task<ActionResult<ARDocumentSetOffViewModel>> SaveARDocumentSetOff(ARDocumentSetOffViewModel aRDocumentSetOffViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return NoContent();

                var userGroupRight = ValidateScreen(
                    headerViewModel.RegId,
                    headerViewModel.CompanyId,
                    (short)E_Modules.AR,
                    (int)E_AR.DocSetoff,
                    headerViewModel.UserId);

                if (userGroupRight == null || (!userGroupRight.IsCreate && !userGroupRight.IsEdit))
                    return NotFound(GenrateMessage.authenticationfailed);

                if (aRDocumentSetOffViewModel == null)
                    return NotFound(GenrateMessage.datanotfound);

                //Header Data Mapping
                var ARDocumentSetOffEntity = new ArDocSetOffHd
                {
                    CompanyId = headerViewModel.CompanyId,
                    SetoffId = Convert.ToInt64(string.IsNullOrEmpty(aRDocumentSetOffViewModel.SetoffId) ? 0 : aRDocumentSetOffViewModel.SetoffId.Trim()),
                    SetoffNo = aRDocumentSetOffViewModel.SetoffNo,
                    ReferenceNo = aRDocumentSetOffViewModel.ReferenceNo == null ? string.Empty : aRDocumentSetOffViewModel.ReferenceNo,
                    TrnDate = DateHelperStatic.ParseClientDate(aRDocumentSetOffViewModel.TrnDate),
                    AccountDate = DateHelperStatic.ParseClientDate(aRDocumentSetOffViewModel.AccountDate),
                    CustomerId = aRDocumentSetOffViewModel.CustomerId,
                    CurrencyId = aRDocumentSetOffViewModel.CurrencyId,
                    ExhRate = aRDocumentSetOffViewModel.ExhRate,
                    Remarks = aRDocumentSetOffViewModel.Remarks == null ? string.Empty : aRDocumentSetOffViewModel.Remarks,
                    AllocAmt = aRDocumentSetOffViewModel.AllocAmt,
                    UnAllocAmt = aRDocumentSetOffViewModel.UnAllocAmt,
                    ExhGainLoss = aRDocumentSetOffViewModel.ExhGainLoss,
                    ModuleFrom = aRDocumentSetOffViewModel.ModuleFrom == null ? string.Empty : aRDocumentSetOffViewModel.ModuleFrom,
                    CreateById = headerViewModel.UserId,
                    EditById = headerViewModel.UserId,
                    EditDate = DateTime.Now,
                };

                //Details Table data mapping
                var ARDocumentSetOffDtEntities = new List<ArDocSetOffDt>();

                if (aRDocumentSetOffViewModel.data_details != null)
                {
                    foreach (var item in aRDocumentSetOffViewModel.data_details)
                    {
                        var ARDocumentSetOffDtEntity = new ArDocSetOffDt
                        {
                            CompanyId = headerViewModel.CompanyId,
                            SetoffId = Convert.ToInt64(string.IsNullOrEmpty(item.SetoffId) ? 0 : item.SetoffId.Trim()),
                            SetoffNo = item.SetoffNo,
                            ItemNo = item.ItemNo,
                            TransactionId = item.TransactionId,
                            DocumentId = Convert.ToInt64(string.IsNullOrEmpty(item.DocumentId) ? 0 : item.DocumentId.Trim()),
                            DocumentNo = item.DocumentNo,
                            ReferenceNo = item.ReferenceNo,
                            DocCurrencyId = item.DocCurrencyId,
                            DocExhRate = item.DocExhRate,
                            DocAccountDate = DateHelperStatic.ParseClientDate(item.DocAccountDate),
                            DocDueDate = DateHelperStatic.ParseClientDate(item.DocDueDate),
                            DocTotAmt = item.DocTotAmt,
                            DocTotLocalAmt = item.DocTotLocalAmt,
                            DocBalAmt = item.DocBalAmt,
                            DocBalLocalAmt = item.DocBalLocalAmt,
                            AllocAmt = item.AllocAmt,
                            AllocLocalAmt = item.AllocLocalAmt,
                            DocAllocAmt = item.DocAllocAmt,
                            DocAllocLocalAmt = item.DocAllocLocalAmt,
                            CentDiff = item.CentDiff,
                            ExhGainLoss = item.ExhGainLoss,
                        };

                        ARDocumentSetOffDtEntities.Add(ARDocumentSetOffDtEntity);
                    }
                }

                var sqlResponse = await _ARDocumentSetOffService.SaveARDocumentSetOffAsync(
                   headerViewModel.RegId,
                   headerViewModel.CompanyId,
                   ARDocumentSetOffEntity,
                   ARDocumentSetOffDtEntities,
                   headerViewModel.UserId);

                if (sqlResponse.Result > 0)
                {
                    var customerModel = await _ARDocumentSetOffService.GetARDocumentSetOffByIdAsync(
                        headerViewModel.RegId,
                        headerViewModel.CompanyId,
                        sqlResponse.Result,
                        string.Empty,
                        headerViewModel.UserId);

                    return Ok(new SqlResponse { Result = 1, Message = sqlResponse.Message, Data = customerModel, TotalRecords = 0 });
                }

                return StatusCode(StatusCodes.Status202Accepted, sqlResponse);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new ARDocumentSetOff record");
            }
        }

        [HttpPost, Route("DeleteARDocumentSetOff")]
        [Authorize]
        public async Task<ActionResult<ARDocumentSetOffViewModel>> DeleteARDocumentSetOff(DeleteViewModel deleteViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return BadRequest("Invalid headers");

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AR, (Int32)E_AR.DocSetoff, headerViewModel.UserId);

                if (userGroupRight == null)
                    return Unauthorized("Authentication failed");

                if (!userGroupRight.IsDelete)
                    return Forbid("You do not have permission to delete");

                if (string.IsNullOrEmpty(deleteViewModel.DocumentId))
                    return NotFound("Data not found");

                var sqlResponse = await _ARDocumentSetOffService.DeleteARDocumentSetOffAsync(
                    headerViewModel.RegId, headerViewModel.CompanyId,
                    Convert.ToInt64(deleteViewModel.DocumentId), deleteViewModel.DocumentNo,
                    deleteViewModel.CancelRemarks, headerViewModel.UserId
                );

                if (sqlResponse.Result > 0)
                {
                    var customerModel = await _ARDocumentSetOffService.GetARDocumentSetOffByIdAsync(
                        headerViewModel.RegId, headerViewModel.CompanyId,
                        Convert.ToInt64(deleteViewModel.DocumentId), string.Empty, headerViewModel.UserId
                    );

                    return Ok(new SqlResponse { Result = sqlResponse.Result, Message = sqlResponse.Message, Data = customerModel });
                }
                return NoContent();
            }
            catch (Exception ex)
            {
                _logger.LogError($"Error in DeleteARDocumentSetOff: {ex.Message}");
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Internal Server Error");
            }
        }

        [HttpGet, Route("GetHistoryARDocumentSetOffbyId/{SetoffId}")]
        [Authorize]
        public async Task<ActionResult<ARInvoiceViewModel>> GetHistoryARDocumentSetOffbyId(string SetoffId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (SetoffId == null || SetoffId == "" || SetoffId == "0")
                    return NoContent();

                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return BadRequest("Invalid headers");

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AR, (Int32)E_AR.DocSetoff, headerViewModel.UserId);

                if (userGroupRight == null)
                    return Unauthorized("Authentication failed");

                var arDocumentSetOffViewModel = await _ARDocumentSetOffService.GetHistoryARDocumentSetOffByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(string.IsNullOrEmpty(SetoffId) ? 0 : SetoffId.Trim()), string.Empty, headerViewModel.UserId);

                if (arDocumentSetOffViewModel == null)
                    return StatusCode(StatusCodes.Status200OK, new SqlResponse { Result = 0, Message = "Data does not exist", Data = null });

                return Ok(new SqlResponse { Result = 1, Message = "Success", Data = arDocumentSetOffViewModel });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new SqlResponse { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }
    }
}