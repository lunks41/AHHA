using AHHA.Application.IServices;
using AHHA.Application.IServices.Accounts.AR;
using AHHA.Core.Common;
using AHHA.Core.Entities.Accounts.AR;
using AHHA.Core.Models.Account.AR;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Accounts.AR
{
    [Route("api/[controller]")]
    [ApiController]
    public class ARInvoiceController : BaseController

    {
        private readonly IARInvoiceService _ARInvoiceService;
        private readonly ILogger<ARInvoiceController> _logger;

        public ARInvoiceController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<ARInvoiceController> logger, IARInvoiceService ARInvoiceService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _ARInvoiceService = ARInvoiceService;
        }

        //All ARINVOICE LIST
        [HttpGet, Route("GetARInvoice")]
        [Authorize]
        public async Task<ActionResult> GetARInvoice([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AR, (Int32)E_AR.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var cacheData = await _ARInvoiceService.GetARInvoiceListAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.pageSize, headerViewModel.pageNumber, headerViewModel.searchString.Trim(), headerViewModel.UserId);

                        if (cacheData == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, cacheData);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                 "Error retrieving data from the database");
            }
        }

        //GET ONE ARINVOICE BY INVOICEID
        [HttpGet, Route("GetARInvoicebyid/{InvoiceId}/{InvoiceNo}")]
        [Authorize]
        public async Task<ActionResult<ARInvoiceViewModel>> GetARInvoiceById(Int64 InvoiceId, string InvoiceNo, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AR, (Int32)E_AR.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var ARInvoiceViewModel = await _ARInvoiceService.GetARInvoiceByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, InvoiceId, InvoiceNo, headerViewModel.UserId);

                        if (ARInvoiceViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, ARInvoiceViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        //SAVE ONE ARINVOICE BY INVOICEID
        [HttpPost, Route("AddARInvoice")]
        [Authorize]
        public async Task<ActionResult<ARInvoiceViewModel>> CreateARInvoice(ARInvoiceViewModel aRInvoiceViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AR, (Int32)E_AR.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsCreate)
                        {
                            if (aRInvoiceViewModel == null)
                                return NotFound(GenrateMessage.datanotfound);

                            //Header Data Mapping
                            var ARInvoiceEntity = new ArInvoiceHd
                            {
                                CompanyId = headerViewModel.CompanyId,
                                InvoiceId = aRInvoiceViewModel.InvoiceId,
                                InvoiceNo = aRInvoiceViewModel.InvoiceNo,
                                ReferenceNo = aRInvoiceViewModel.ReferenceNo,
                                TrnDate = aRInvoiceViewModel.TrnDate,
                                AccountDate = aRInvoiceViewModel.AccountDate,
                                DeliveryDate = aRInvoiceViewModel.DeliveryDate,
                                DueDate = aRInvoiceViewModel.DueDate,
                                CustomerId = aRInvoiceViewModel.CustomerId,
                                CurrencyId = aRInvoiceViewModel.CurrencyId,
                                ExhRate = aRInvoiceViewModel.ExhRate,
                                CtyExhRate = aRInvoiceViewModel.CtyExhRate,
                                CreditTermId = aRInvoiceViewModel.CreditTermId,
                                BankId = aRInvoiceViewModel.BankId,
                                TotAmt = aRInvoiceViewModel.TotAmt,
                                TotLocalAmt = aRInvoiceViewModel.TotLocalAmt,
                                TotCtyAmt = aRInvoiceViewModel.TotCtyAmt,
                                GstClaimDate = aRInvoiceViewModel.GstClaimDate,
                                GstAmt = aRInvoiceViewModel.GstAmt,
                                GstLocalAmt = aRInvoiceViewModel.GstLocalAmt,
                                GstCtyAmt = aRInvoiceViewModel.GstCtyAmt,
                                TotAmtAftGst = aRInvoiceViewModel.TotAmtAftGst,
                                TotLocalAmtAftGst = aRInvoiceViewModel.TotLocalAmtAftGst,
                                TotCtyAmtAftGst = aRInvoiceViewModel.TotCtyAmtAftGst,
                                BalAmt = aRInvoiceViewModel.BalAmt,
                                BalLocalAmt = aRInvoiceViewModel.BalLocalAmt,
                                PayAmt = aRInvoiceViewModel.PayAmt,
                                PayLocalAmt = aRInvoiceViewModel.PayLocalAmt,
                                ExGainLoss = aRInvoiceViewModel.ExGainLoss,
                                SalesOrderId = aRInvoiceViewModel.SalesOrderId,
                                SalesOrderNo = aRInvoiceViewModel.SalesOrderNo,
                                OperationId = aRInvoiceViewModel.OperationId,
                                OperationNo = aRInvoiceViewModel.OperationNo,
                                Remarks = aRInvoiceViewModel.Remarks,
                                Address1 = aRInvoiceViewModel.Address1,
                                Address2 = aRInvoiceViewModel.Address2,
                                Address3 = aRInvoiceViewModel.Address3,
                                Address4 = aRInvoiceViewModel.Address4,
                                PinCode = aRInvoiceViewModel.PinCode,
                                CountryId = aRInvoiceViewModel.CountryId,
                                PhoneNo = aRInvoiceViewModel.PhoneNo,
                                FaxNo = aRInvoiceViewModel.FaxNo,
                                ContactName = aRInvoiceViewModel.ContactName,
                                MobileNo = aRInvoiceViewModel.MobileNo,
                                EmailAdd = aRInvoiceViewModel.EmailAdd,
                                ModuleFrom = aRInvoiceViewModel.ModuleFrom,
                                SupplierName = aRInvoiceViewModel.SupplierName,
                                SuppInvoiceNo = aRInvoiceViewModel.SuppInvoiceNo,
                                APInvoiceId = aRInvoiceViewModel.APInvoiceId,
                                APInvoiceNo = aRInvoiceViewModel.APInvoiceNo,
                                CreateById = headerViewModel.UserId
                            };

                            //Details Table data mapping
                            var arInvoiceDtEntities = new List<ArInvoiceDt>();

                            foreach (var item in aRInvoiceViewModel.data_details)
                            {
                                var arInvoiceDtEntity = new ArInvoiceDt
                                {
                                    InvoiceId = item.InvoiceId,
                                    InvoiceNo = item.InvoiceNo,
                                    ItemNo = item.ItemNo,
                                    SeqNo = item.SeqNo,
                                    DocItemNo = item.DocItemNo,
                                    ProductId = item.ProductId,
                                    GLId = item.GLId,
                                    QTY = item.QTY,
                                    BillQTY = item.BillQTY,
                                    UomId = item.UomId,
                                    UnitPrice = item.UnitPrice,
                                    TotAmt = item.TotAmt,
                                    TotLocalAmt = item.TotLocalAmt,
                                    TotCurAmt = item.TotCurAmt,
                                    Remarks = item.Remarks,
                                    GstId = item.GstId,
                                    GstPercentage = item.GstPercentage,
                                    GstAmt = item.GstAmt,
                                    GstLocalAmt = item.GstLocalAmt,
                                    GstCurAmt = item.GstCurAmt,
                                    DeliveryDate = item.DeliveryDate,
                                    DepartmentId = item.DepartmentId,
                                    EmployeeId = item.EmployeeId,
                                    PortId = item.PortId,
                                    VesselId = item.VesselId,
                                    BargeId = item.BargeId,
                                    VoyageId = item.VoyageId,
                                    OperationId = item.OperationId,
                                    OperationNo = item.OperationNo,
                                    OPRefNo = item.OPRefNo,
                                    SalesOrderId = item.SalesOrderId,
                                    SalesOrderNo = item.SalesOrderNo,
                                    SupplyDate = item.SupplyDate,
                                    SupplierName = item.SupplierName,
                                    SuppInvoiceNo = item.SuppInvoiceNo,
                                    APInvoiceId = item.APInvoiceId,
                                    APInvoiceNo = item.APInvoiceNo
                                };

                                arInvoiceDtEntities.Add(arInvoiceDtEntity);
                            }

                            var createdARInvoice = await _ARInvoiceService.AddARInvoiceAsync(headerViewModel.RegId, headerViewModel.CompanyId, ARInvoiceEntity, arInvoiceDtEntities, headerViewModel.UserId);
                            return StatusCode(StatusCodes.Status202Accepted, createdARInvoice);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new ARInvoice record");
            }
        }

        //UPDATE ONE ARINVOICE BY INVOICEID
        [HttpPut, Route("UpdateARInvoice/{InvoiceId}")]
        [Authorize]
        public async Task<ActionResult<ARInvoiceViewModel>> UpdateARInvoice(Int64 InvoiceId, [FromBody] ARInvoiceViewModel ARInvoice, [FromHeader] HeaderViewModel headerViewModel)
        {
            var ARInvoiceViewModel = new ARInvoiceViewModel();
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AR, (Int32)E_AR.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsEdit)
                        {
                            if (InvoiceId != ARInvoice.InvoiceId)
                                return StatusCode(StatusCodes.Status400BadRequest, "ARInvoice ID mismatch");

                            var ARInvoiceToUpdate = await _ARInvoiceService.GetARInvoiceByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, InvoiceId, "", headerViewModel.UserId);

                            if (ARInvoiceToUpdate == null)
                                return NotFound(GenrateMessage.datanotfound);

                            var ARInvoiceEntity = new ArInvoiceHd
                            {
                                InvoiceId = ARInvoice.InvoiceId,
                                CompanyId = headerViewModel.CompanyId,
                                EditById = headerViewModel.UserId,
                                EditDate = DateTime.Now,
                            };

                            var sqlResponce = await _ARInvoiceService.UpdateARInvoiceAsync(headerViewModel.RegId, headerViewModel.CompanyId, ARInvoiceEntity, headerViewModel.UserId);
                            return StatusCode(StatusCodes.Status202Accepted, sqlResponce);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error updating data");
            }
        }

        [HttpDelete, Route("DeleteARInvoice/{InvoiceId}")]
        [Authorize]
        public async Task<ActionResult<ArInvoiceHd>> DeleteARInvoice(Int64 InvoiceId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AR, (Int32)E_AR.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsDelete)
                        {
                            var ARInvoiceToDelete = await _ARInvoiceService.GetARInvoiceByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, InvoiceId, "", headerViewModel.UserId);

                            if (ARInvoiceToDelete == null)
                                return NotFound(GenrateMessage.datanotfound);

                            var sqlResponce = await _ARInvoiceService.DeleteARInvoiceAsync(headerViewModel.RegId, headerViewModel.CompanyId, ARInvoiceToDelete, headerViewModel.UserId);

                            return StatusCode(StatusCodes.Status202Accepted, sqlResponce);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}