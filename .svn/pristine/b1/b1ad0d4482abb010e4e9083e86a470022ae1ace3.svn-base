using AHHA.Application.IServices;
using AHHA.Application.IServices.Masters;
using AHHA.Core.Common;
using AHHA.Core.Entities.Masters;
using AHHA.Core.Models.Masters;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Masters
{
    [Route("api/Master")]
    [ApiController]
    public class GroupCreditLimitController : BaseController
    {
        private readonly IGroupCreditLimitService _GroupCreditLimitService;
        private readonly ILogger<GroupCreditLimitController> _logger;

        public GroupCreditLimitController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<GroupCreditLimitController> logger, IGroupCreditLimitService GroupCreditLimitService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _GroupCreditLimitService = GroupCreditLimitService;
        }

        [HttpGet, Route("GetGroupCreditLimit")]
        [Authorize]
        public async Task<ActionResult> GetGroupCreditLimit([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.GroupCreditLimit, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var cacheData = await _GroupCreditLimitService.GetGroupCreditLimitListAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.pageSize, headerViewModel.pageNumber, headerViewModel.searchString, headerViewModel.UserId);

                        if (cacheData == null)
                            return NotFound(GenrateMessage.authenticationfailed);

                        return StatusCode(StatusCodes.Status202Accepted, cacheData);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                 "Error retrieving data from the database");
            }
        }

        [HttpGet, Route("GetGroupCreditLimitbyid/{GroupCreditLimitId}")]
        [Authorize]
        public async Task<ActionResult<GroupCreditLimitViewModel>> GetGroupCreditLimitById(Int16 GroupCreditLimitId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.GroupCreditLimit, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var GroupCreditLimitViewModel = _mapper.Map<GroupCreditLimitViewModel>(await _GroupCreditLimitService.GetGroupCreditLimitByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, GroupCreditLimitId, headerViewModel.UserId));

                        if (GroupCreditLimitViewModel == null)
                            return NotFound(GenrateMessage.authenticationfailed);

                        return StatusCode(StatusCodes.Status202Accepted, GroupCreditLimitViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("AddGroupCreditLimit")]
        [Authorize]
        public async Task<ActionResult<GroupCreditLimitViewModel>> CreateGroupCreditLimit(GroupCreditLimitViewModel GroupCreditLimit, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.GroupCreditLimit, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsCreate)
                        {
                            if (GroupCreditLimit == null)
                                return StatusCode(StatusCodes.Status400BadRequest, "M_GroupCreditLimit ID mismatch");

                            var GroupCreditLimitEntity = new M_GroupCreditLimit
                            {
                                CompanyId = GroupCreditLimit.CompanyId,
                                GroupCreditLimitCode = GroupCreditLimit.GroupCreditLimitCode,
                                GroupCreditLimitId = GroupCreditLimit.GroupCreditLimitId,
                                GroupCreditLimitName = GroupCreditLimit.GroupCreditLimitName,
                                CreateById = headerViewModel.UserId,
                                IsActive = GroupCreditLimit.IsActive,
                                Remarks = GroupCreditLimit.Remarks
                            };

                            var createdGroupCreditLimit = await _GroupCreditLimitService.AddGroupCreditLimitAsync(headerViewModel.RegId, headerViewModel.CompanyId, GroupCreditLimitEntity, headerViewModel.UserId);
                            return StatusCode(StatusCodes.Status202Accepted, createdGroupCreditLimit);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new GroupCreditLimit record");
            }
        }

        [HttpPut, Route("UpdateGroupCreditLimit/{GroupCreditLimitId}")]
        [Authorize]
        public async Task<ActionResult<GroupCreditLimitViewModel>> UpdateGroupCreditLimit(Int16 GroupCreditLimitId, [FromBody] GroupCreditLimitViewModel GroupCreditLimit, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.GroupCreditLimit, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsEdit)
                        {
                            if (GroupCreditLimitId != GroupCreditLimit.GroupCreditLimitId)
                                return StatusCode(StatusCodes.Status400BadRequest, "M_GroupCreditLimit ID mismatch");

                            var GroupCreditLimitToUpdate = await _GroupCreditLimitService.GetGroupCreditLimitByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, GroupCreditLimitId, headerViewModel.UserId);

                            if (GroupCreditLimitToUpdate == null)
                                return NotFound($"M_GroupCreditLimit with Id = {GroupCreditLimitId} not found");

                            var GroupCreditLimitEntity = new M_GroupCreditLimit
                            {
                                GroupCreditLimitCode = GroupCreditLimit.GroupCreditLimitCode,
                                GroupCreditLimitId = GroupCreditLimit.GroupCreditLimitId,
                                GroupCreditLimitName = GroupCreditLimit.GroupCreditLimitName,
                                EditById = headerViewModel.UserId,
                                EditDate = DateTime.Now,
                                IsActive = GroupCreditLimit.IsActive,
                                Remarks = GroupCreditLimit.Remarks
                            };

                            var sqlResponce = await _GroupCreditLimitService.UpdateGroupCreditLimitAsync(headerViewModel.RegId, headerViewModel.CompanyId, GroupCreditLimitEntity, headerViewModel.UserId);
                            return StatusCode(StatusCodes.Status202Accepted, sqlResponce);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error updating data");
            }
        }

        [HttpDelete, Route("DeleteGroupCreditLimit/{GroupCreditLimitId}")]
        [Authorize]
        public async Task<ActionResult<M_GroupCreditLimit>> DeleteGroupCreditLimit(Int16 GroupCreditLimitId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.GroupCreditLimit, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsDelete)
                        {
                            var GroupCreditLimitToDelete = await _GroupCreditLimitService.GetGroupCreditLimitByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, GroupCreditLimitId, headerViewModel.UserId);

                            if (GroupCreditLimitToDelete == null)
                                return NotFound($"M_GroupCreditLimit with Id = {GroupCreditLimitId} not found");

                            var sqlResponce = await _GroupCreditLimitService.DeleteGroupCreditLimitAsync(headerViewModel.RegId, headerViewModel.CompanyId, GroupCreditLimitToDelete, headerViewModel.UserId);

                            return StatusCode(StatusCodes.Status202Accepted, sqlResponce);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}