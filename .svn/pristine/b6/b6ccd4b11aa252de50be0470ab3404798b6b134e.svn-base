using AHHA.Application.IServices;
using AHHA.Application.IServices.Masters;
using AHHA.Core.Common;
using AHHA.Core.Entities.Masters;
using AHHA.Core.Models.Masters;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Masters
{
    [Route("api/Master")]
    [ApiController]
    public class SupplierContactController : BaseController
    {
        private readonly ISupplierContactService _SupplierContactService;
        private readonly ILogger<SupplierContactController> _logger;

        public SupplierContactController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<SupplierContactController> logger, ISupplierContactService SupplierContactService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _SupplierContactService = SupplierContactService;
        }

        //Get the Supplier Contact List
        [HttpGet, Route("getSuppliercontactbySupplierid/{SupplierId}")]
        [Authorize]
        public async Task<ActionResult> GetSupplierContactBySupplierId(Int16 SupplierId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return NoContent();

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.Supplier, headerViewModel.UserId);

                if (userGroupRight == null)
                    return NotFound(GenerateMessage.AuthenticationFailed);

                var cacheData = await _SupplierContactService.GetSupplierContactBySupplierIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, SupplierId, headerViewModel.UserId);

                if (cacheData == null)
                    return Ok(new SqlResponse { Result = -1, Message = "failed", Data = null, TotalRecords = 0 });

                return Ok(new SqlResponse { Result = 1, Message = "success", Data = cacheData, TotalRecords = 0 });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        //Supplier Contact one record by using contactid
        [HttpGet, Route("getSuppliercontactbyid/{SupplierId}/{ContactId}")]
        [Authorize]
        public async Task<ActionResult<SupplierContactViewModel>> GetSupplierContactById(Int32 SupplierId, Int16 ContactId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return NoContent();

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.Supplier, headerViewModel.UserId);

                if (userGroupRight == null)
                    return NotFound(GenerateMessage.AuthenticationFailed);

                var cacheData = await _SupplierContactService.GetSupplierContactByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, SupplierId, ContactId, headerViewModel.UserId);

                if (cacheData == null)
                    return Ok(new SqlResponse { Result = -1, Message = "failed", Data = null, TotalRecords = 0 });

                return Ok(new SqlResponse { Result = 1, Message = "success", Data = cacheData, TotalRecords = 0 });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("SaveSupplierContact")]
        [Authorize]
        public async Task<ActionResult<SupplierContactViewModel>> SaveSupplierContact(SupplierContactViewModel supplierAddressViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (supplierAddressViewModel == null || supplierAddressViewModel.SupplierId == 0)
                    return NotFound();

                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return NoContent();

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.Customer, headerViewModel.UserId);

                if (userGroupRight == null || !userGroupRight.IsCreate)
                    return NotFound(GenerateMessage.AuthenticationFailed);

                var SupplierContactEntity = new M_SupplierContact
                {
                    SupplierId = supplierAddressViewModel.SupplierId,
                    ContactId = supplierAddressViewModel.ContactId,
                    ContactName = supplierAddressViewModel.ContactName?.Trim() ?? string.Empty,
                    OtherName = supplierAddressViewModel.OtherName?.Trim() ?? string.Empty,
                    OffNo = supplierAddressViewModel.OffNo?.Trim() ?? string.Empty,
                    FaxNo = supplierAddressViewModel.FaxNo?.Trim() ?? string.Empty,
                    EmailAdd = supplierAddressViewModel.EmailAdd?.Trim() ?? string.Empty,
                    MessId = supplierAddressViewModel.MessId?.Trim() ?? string.Empty,
                    ContactMessType = supplierAddressViewModel.ContactMessType?.Trim() ?? string.Empty,
                    IsDefault = supplierAddressViewModel.IsDefault,
                    IsFinance = supplierAddressViewModel.IsFinance,
                    IsSales = supplierAddressViewModel.IsSales,
                    IsActive = supplierAddressViewModel.IsActive,
                    MobileNo = supplierAddressViewModel.MobileNo,
                    CreateById = headerViewModel.UserId,
                    EditById = headerViewModel.UserId,
                    EditDate = DateTime.Now,
                };

                var sqlResponse = await _SupplierContactService.SaveSupplierContactAsync(headerViewModel.RegId, headerViewModel.CompanyId, SupplierContactEntity, headerViewModel.UserId);

                return Ok(new SqlResponse { Result = sqlResponse.Result, Message = sqlResponse.Message, Data = null, TotalRecords = 0 });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new SupplierContact record");
            }
        }

        [HttpDelete, Route("DeleteSupplierContact/{SupplierId}/{ContactId}")]
        [Authorize]
        public async Task<ActionResult<M_SupplierContact>> DeleteSupplierContact(Int32 SupplierId, Int16 ContactId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return NoContent();

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.Supplier, headerViewModel.UserId);

                if (userGroupRight == null)
                    return NotFound(GenerateMessage.AuthenticationFailed);

                if (!userGroupRight.IsDelete)
                    return Unauthorized(GenerateMessage.AuthenticationFailed);

                var sqlResponse = await _SupplierContactService.DeleteSupplierContactAsync(headerViewModel.RegId, headerViewModel.CompanyId, SupplierId, ContactId, headerViewModel.UserId);

                return Ok(new SqlResponse { Result = sqlResponse.Result, Message = sqlResponse.Message, Data = null, TotalRecords = 0 });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}