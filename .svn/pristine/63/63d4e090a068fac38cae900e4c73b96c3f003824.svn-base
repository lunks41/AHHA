using AHHA.Application.IServices;
using AHHA.Application.IServices.Setting;
using AHHA.Core.Common;
using AHHA.Core.Entities.Setting;
using AHHA.Core.Models.Admin;
using AHHA.Core.Models.Setting;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Setting
{
    [Route("api/Setting")]
    [ApiController]
    public class UserGridController : BaseController
    {
        private readonly IUserGridServices _userGridServices;
        private readonly ILogger<UserGridController> _logger;

        public UserGridController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<UserGridController> logger, IUserGridServices userGridServices)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _userGridServices = userGridServices;
        }

        //No Need to Create Screen
        //Getlist --moduleid/trsid/userid/compid
        //Getbyid --moduleid/trsid/userid/compid/gridname
        //Upsert  --moduleid/trsid/userid/compid/gridname

        //GET BY 5 KEY
        //ADD--update

        [HttpGet, Route("GetUserGrid")]
        [Authorize]
        public async Task<ActionResult<UserGridViewModelCount>> GetUserGrid([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var UserGridViewModel = await _userGridServices.GetUserGridAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.ModuleId, headerViewModel.TransactionId, headerViewModel.UserId);

                    if (UserGridViewModel == null)
                        return NotFound(GenerateMessage.DataNotFound);

                    return StatusCode(StatusCodes.Status202Accepted, UserGridViewModel);
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpGet, Route("GetUserGridById")]
        [Authorize]
        public async Task<ActionResult<UserGridViewModel>> GetUserGridById(UserGridViewModel userGridViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var UserGridViewModel = await _userGridServices.GetUserGridByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, userGridViewModel, headerViewModel.UserId);

                    if (UserGridViewModel == null)
                        return NotFound(GenerateMessage.DataNotFound);

                    return StatusCode(StatusCodes.Status202Accepted, UserGridViewModel);
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpGet, Route("GetUserGridByUserId/{SelectedUserId}")]
        [Authorize]
        public async Task<ActionResult<UserGridViewModel>> GetUserGridByUserId(Int16 SelectedUserId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (SelectedUserId != 0)
                {
                    if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    {
                        var UserGridViewModel = await _userGridServices.GetUserGridByUserIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, SelectedUserId, headerViewModel.UserId);

                        if (UserGridViewModel == null)
                            return NotFound(GenerateMessage.DataNotFound);

                        return StatusCode(StatusCodes.Status202Accepted, UserGridViewModel);
                    }
                    else
                    {
                        return NoContent();
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("SaveUserGrid")]
        [Authorize]
        public async Task<ActionResult<UserGridViewModel>> SaveUserGrid(UserGridViewModel UserGridViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    if (UserGridViewModel == null)
                        return NotFound(GenerateMessage.DataNotFound);

                    var FinEntity = new S_UserGrdFormat
                    {
                        CompanyId = headerViewModel.CompanyId,
                        UserId = headerViewModel.UserId,
                        ModuleId = UserGridViewModel.ModuleId,
                        TransactionId = UserGridViewModel.TransactionId,
                        GrdName = UserGridViewModel.GrdName,
                        GrdKey = UserGridViewModel.GrdKey,
                        GrdColVisible = UserGridViewModel.GrdColVisible,
                        GrdColOrder = UserGridViewModel.GrdColOrder,
                        GrdColSize = UserGridViewModel.GrdColSize,
                        GrdSort = UserGridViewModel.GrdSort,
                        GrdString = UserGridViewModel.GrdString,
                        CreateById = headerViewModel.UserId,
                        EditById = headerViewModel.UserId,
                        EditDate = DateTime.Now,
                    };

                    var createdFin = await _userGridServices.SaveUserGridAsync(headerViewModel.RegId, headerViewModel.CompanyId, FinEntity, headerViewModel.UserId);
                    return StatusCode(StatusCodes.Status202Accepted, createdFin);
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new Fin record");
            }
        }

        [HttpPost, Route("CloneUserGrid/{FromUserId}/{ToUserId}")]
        [Authorize]
        public async Task<ActionResult<UserViewModel>> CloneUserGrid(Int16 FromUserId, Int16 ToUserId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    if (FromUserId == 0 || ToUserId == 0)
                        return NotFound(GenerateMessage.DataNotFound);

                    var sqlResponse = await _userGridServices.CloneUserGridSettingAsync(headerViewModel.RegId, headerViewModel.CompanyId, FromUserId, ToUserId, headerViewModel.UserId);

                    return StatusCode(StatusCodes.Status202Accepted, sqlResponse);
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}