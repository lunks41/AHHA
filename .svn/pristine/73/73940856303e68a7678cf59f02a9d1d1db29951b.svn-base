using AHHA.Application.IServices;
using AHHA.Application.IServices.Masters;
using AHHA.Core.Common;
using AHHA.Core.Entities.Masters;
using AHHA.Core.Models.Masters;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Masters
{
    [Route("api/Master")]
    [ApiController]
    public class GstController : BaseController
    {
        private readonly IGstService _GstService;
        private readonly ILogger<GstController> _logger;

        public GstController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<GstController> logger, IGstService GstService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _GstService = GstService;
        }

        [HttpGet, Route("GetGst")]
        [Authorize]
        public async Task<ActionResult> GetGst([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.Gst, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        //_logger.LogWarning("Warning: Some simple condition is met."); // Log a warning

                        var cacheData = await _GstService.GetGstListAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.pageSize, headerViewModel.pageNumber, headerViewModel.searchString, headerViewModel.UserId);

                        if (cacheData == null)
                            return NotFound(GenrateMessage.authenticationfailed);

                        return Ok(cacheData);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                 "Error retrieving data from the database");
            }
        }

        [HttpGet, Route("GetGstbyid/{GstId}")]
        [Authorize]
        public async Task<ActionResult<GstViewModel>> GetGstById(Int16 GstId, [FromHeader] HeaderViewModel headerViewModel)
        {
            var GstViewModel = new GstViewModel();
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.Gst, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (_memoryCache.TryGetValue($"Gst_{GstId}", out GstViewModel? cachedProduct))
                        {
                            GstViewModel = cachedProduct;
                        }
                        else
                        {
                            GstViewModel = _mapper.Map<GstViewModel>(await _GstService.GetGstByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, GstId, headerViewModel.UserId));

                            if (GstViewModel == null)
                                return NotFound(GenrateMessage.authenticationfailed);
                            else
                                // Cache the Gst with an expiration time of 10 minutes
                                _memoryCache.Set($"Gst_{GstId}", GstViewModel, TimeSpan.FromMinutes(10));
                        }
                        return StatusCode(StatusCodes.Status202Accepted, GstViewModel);
                        //return Ok(GstViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("AddGst")]
        [Authorize]
        public async Task<ActionResult<GstViewModel>> CreateGst(GstViewModel Gst, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.Gst, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsCreate)
                        {
                            if (Gst == null)
                                return StatusCode(StatusCodes.Status400BadRequest, "M_Gst ID mismatch");

                            var GstEntity = new M_Gst
                            {
                                CompanyId = Gst.CompanyId,
                                GstCode = Gst.GstCode,
                                GstId = Gst.GstId,
                                GstName = Gst.GstName,
                                CreateById = headerViewModel.UserId,
                                IsActive = Gst.IsActive,
                                Remarks = Gst.Remarks
                            };

                            var createdGst = await _GstService.AddGstAsync(headerViewModel.RegId, headerViewModel.CompanyId, GstEntity, headerViewModel.UserId);
                            return StatusCode(StatusCodes.Status202Accepted, createdGst);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new Gst record");
            }
        }

        [HttpPut, Route("UpdateGst/{GstId}")]
        [Authorize]
        public async Task<ActionResult<GstViewModel>> UpdateGst(Int16 GstId, [FromBody] GstViewModel Gst, [FromHeader] HeaderViewModel headerViewModel)
        {
            var GstViewModel = new GstViewModel();
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.Gst, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsEdit)
                        {
                            if (GstId != Gst.GstId)
                                return StatusCode(StatusCodes.Status400BadRequest, "M_Gst ID mismatch");
                            //return BadRequest("M_Gst ID mismatch");

                            // Attempt to retrieve the Gst from the cache
                            if (_memoryCache.TryGetValue($"Gst_{GstId}", out GstViewModel? cachedProduct))
                            {
                                GstViewModel = cachedProduct;
                            }
                            else
                            {
                                var GstToUpdate = await _GstService.GetGstByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, GstId, headerViewModel.UserId);

                                if (GstToUpdate == null)
                                    return NotFound($"M_Gst with Id = {GstId} not found");
                            }

                            var GstEntity = new M_Gst
                            {
                                GstCode = Gst.GstCode,
                                GstId = Gst.GstId,
                                GstName = Gst.GstName,
                                EditById = headerViewModel.UserId,
                                EditDate = DateTime.Now,
                                IsActive = Gst.IsActive,
                                Remarks = Gst.Remarks
                            };

                            var sqlResponce = await _GstService.UpdateGstAsync(headerViewModel.RegId, headerViewModel.CompanyId, GstEntity, headerViewModel.UserId);
                            return StatusCode(StatusCodes.Status202Accepted, sqlResponce);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error updating data");
            }
        }

        [HttpDelete, Route("DeleteGst/{GstId}")]
        [Authorize]
        public async Task<ActionResult<M_Gst>> DeleteGst(Int16 GstId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.Gst, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsDelete)
                        {
                            var GstToDelete = await _GstService.GetGstByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, GstId, headerViewModel.UserId);

                            if (GstToDelete == null)
                                return NotFound($"M_Gst with Id = {GstId} not found");

                            var sqlResponce = await _GstService.DeleteGstAsync(headerViewModel.RegId, headerViewModel.CompanyId, GstToDelete, headerViewModel.UserId);
                            // Remove data from cache by key
                            _memoryCache.Remove($"Gst_{GstId}");
                            return StatusCode(StatusCodes.Status202Accepted, sqlResponce);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}