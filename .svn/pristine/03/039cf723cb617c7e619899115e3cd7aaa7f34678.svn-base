using AHHA.Application.IServices;
using AHHA.Application.IServices.Masters;
using AHHA.Core.Common;
using AHHA.Core.Entities.Masters;
using AHHA.Core.Models.Masters;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Masters
{
    [Route("api/Master")]
    [ApiController]
    public class CustomerGroupCreditLimitController : BaseController
    {
        private readonly ICustomerGroupCreditLimitService _CustomerGroupCreditLimitService;
        private readonly ILogger<CustomerGroupCreditLimitController> _logger;

        public CustomerGroupCreditLimitController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<CustomerGroupCreditLimitController> logger, ICustomerGroupCreditLimitService CustomerGroupCreditLimitService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _CustomerGroupCreditLimitService = CustomerGroupCreditLimitService;
        }

        [HttpGet, Route("GetCustomerGroupCreditLimit")]
        [Authorize]
        public async Task<ActionResult> GetCustomerGroupCreditLimit([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.CustomerGroupCreditLimit, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var cacheData = await _CustomerGroupCreditLimitService.GetCustomerGroupCreditLimitListAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.pageSize, headerViewModel.pageNumber, headerViewModel.searchString, headerViewModel.UserId);

                        if (cacheData == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, cacheData);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                 "Error retrieving data from the database");
            }
        }

        [HttpGet, Route("GetCustomerGroupCreditLimitbyid/{GroupCreditLimitId}")]
        [Authorize]
        public async Task<ActionResult<CustomerGroupCreditLimitViewModel>> GetCustomerGroupCreditLimitById(Int16 GroupCreditLimitId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.CustomerGroupCreditLimit, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var customerGroupCreditLimitViewModel = _mapper.Map<CustomerGroupCreditLimitViewModel>(await _CustomerGroupCreditLimitService.GetCustomerGroupCreditLimitByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, GroupCreditLimitId, headerViewModel.UserId));

                        if (customerGroupCreditLimitViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, customerGroupCreditLimitViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("SaveCustomerGroupCreditLimit")]
        [Authorize]
        public async Task<ActionResult<CustomerGroupCreditLimitViewModel>> SaveCustomerGroupCreditLimit(CustomerGroupCreditLimitViewModel CustomerGroupCreditLimit, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.CustomerGroupCreditLimit, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsCreate)
                        {
                            if (CustomerGroupCreditLimit == null)
                                return NotFound(GenrateMessage.datanotfound);

                            var CustomerGroupCreditLimitEntity = new M_CustomerGroupCreditLimit
                            {
                                CompanyId = CustomerGroupCreditLimit.CompanyId,
                                GroupCreditLimitCode = CustomerGroupCreditLimit.GroupCreditLimitCode?.Trim() ?? string.Empty,
                                GroupCreditLimitId = CustomerGroupCreditLimit.GroupCreditLimitId,
                                GroupCreditLimitName = CustomerGroupCreditLimit.GroupCreditLimitName?.Trim() ?? string.Empty,
                                CreateById = headerViewModel.UserId,
                                IsActive = CustomerGroupCreditLimit.IsActive,
                                Remarks = CustomerGroupCreditLimit.Remarks?.Trim() ?? string.Empty,
                                EditById = headerViewModel.UserId,
                                EditDate = DateTime.Now
                            };

                            var sqlResponse = await _CustomerGroupCreditLimitService.SaveCustomerGroupCreditLimitAsync(headerViewModel.RegId, headerViewModel.CompanyId, CustomerGroupCreditLimitEntity, headerViewModel.UserId);
                            return Ok(new SqlResponse { Result = 1, Message = sqlResponse.Message, Data = null, TotalRecords = 0 });
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new CustomerGroupCreditLimit record");
            }
        }

        [HttpDelete, Route("DeleteCustomerGroupCreditLimit/{GroupCreditLimitId}")]
        [Authorize]
        public async Task<ActionResult<M_CustomerGroupCreditLimit>> DeleteCustomerGroupCreditLimit(Int16 GroupCreditLimitId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.CustomerGroupCreditLimit, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsDelete)
                        {
                            var CustomerGroupCreditLimitToDelete = await _CustomerGroupCreditLimitService.GetCustomerGroupCreditLimitByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, GroupCreditLimitId, headerViewModel.UserId);

                            if (CustomerGroupCreditLimitToDelete == null)
                                return NotFound(GenrateMessage.datanotfound);

                            var sqlResponse = await _CustomerGroupCreditLimitService.DeleteCustomerGroupCreditLimitAsync(headerViewModel.RegId, headerViewModel.CompanyId, CustomerGroupCreditLimitToDelete, headerViewModel.UserId);

                            return StatusCode(StatusCodes.Status202Accepted, sqlResponse);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}