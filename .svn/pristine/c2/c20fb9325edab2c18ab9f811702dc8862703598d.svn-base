using AHHA.Application.IServices;
using AHHA.Application.IServices.Admin;
using AHHA.Core.Common;
using AHHA.Core.Entities.Admin;
using AHHA.Core.Models.Admin;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Admin
{
    [Route("api/Admin")]
    [ApiController]
    public class UserController : BaseController
    {
        //Create User --user/password

        //User Edit
        //Edit User  -- uesrpassword cannot be updated
        //-- password will be not shown
        //--reset password API
        //--update the password

        //Getlist
        //Get
        //Create
        //Update
        //resetpassword
        //Delete

        private readonly IUserService _UserService;
        private readonly ILogger<UserController> _logger;
        private readonly UserManager<LoginViewModel> _userManager;
        private readonly IConfiguration _configuration;

        public UserController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<UserController> logger, IUserService countryService, UserManager<LoginViewModel> userManager, IConfiguration configuration)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _UserService = countryService;
            _userManager = userManager;
            _configuration = configuration;
            _configuration = configuration;
        }

        [HttpGet, Route("GetUser")]
        [Authorize]
        public async Task<ActionResult> GetUser([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Admins.User, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var cacheData = await _UserService.GetUserListAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.pageSize, headerViewModel.pageNumber, headerViewModel.searchString.Trim(), headerViewModel.UserId);

                        if (cacheData == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, cacheData);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                 "Error retrieving data from the database");
            }
        }

        [HttpGet, Route("GetUserbyid/{UserId}")]
        [Authorize]
        public async Task<ActionResult<UserViewModel>> GetUserById(Int16 UserId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Admins.User, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var UserViewModel = _mapper.Map<UserViewModel>(await _UserService.GetUserByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, UserId, headerViewModel.UserId));

                        if (UserViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, UserViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("AddUser")]
        [Authorize]
        public async Task<ActionResult<UserViewModel>> CreateUser(UserViewModel userViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Admins.User, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsCreate)
                        {
                            if (userViewModel == null)
                                return NotFound(GenrateMessage.datanotfound);

                            var UserEntity = new AdmUser
                            {
                                UserId = userViewModel.UserId,
                                UserCode = userViewModel.UserCode,
                                UserName = userViewModel.UserName,
                                UserPassword = userViewModel.UserPassword,
                                UserEmail = userViewModel.UserEmail,
                                Remarks = userViewModel.Remarks,
                                IsActive = userViewModel.IsActive,
                                UserGroupId = userViewModel.UserGroupId,
                                CreateById = headerViewModel.UserId
                            };

                            var createdUser = await _UserService.AddUserAsync(headerViewModel.RegId, headerViewModel.CompanyId, UserEntity, headerViewModel.UserId);
                            return StatusCode(StatusCodes.Status202Accepted, createdUser);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new User record");
            }
        }

        [HttpPut, Route("UpdateUser/{UserId}")]
        [Authorize]
        public async Task<ActionResult<UserViewModel>> UpdateUser(Int16 UserId, [FromBody] UserViewModel userViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            var UserViewModel = new UserViewModel();
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Admins.User, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsEdit)
                        {
                            if (UserId != userViewModel.UserId)
                                return StatusCode(StatusCodes.Status400BadRequest, "User ID mismatch");

                            var UserToUpdate = await _UserService.GetUserByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, UserId, headerViewModel.UserId);

                            if (UserToUpdate == null)
                                return NotFound(GenrateMessage.datanotfound);

                            var UserEntity = new AdmUser
                            {
                                UserId = userViewModel.UserId,
                                UserCode = userViewModel.UserCode,
                                UserName = userViewModel.UserName,
                                UserPassword = userViewModel.UserPassword,
                                UserEmail = userViewModel.UserEmail,
                                Remarks = userViewModel.Remarks,
                                IsActive = userViewModel.IsActive,
                                UserGroupId = userViewModel.UserGroupId,
                                EditById = headerViewModel.UserId,
                                EditDate = DateTime.Now,
                            };

                            var sqlResponce = await _UserService.UpdateUserAsync(headerViewModel.RegId, headerViewModel.CompanyId, UserEntity, headerViewModel.UserId);
                            return StatusCode(StatusCodes.Status202Accepted, sqlResponce);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error updating data");
            }
        }

        [HttpDelete, Route("DeleteUser/{UserId}")]
        [Authorize]
        public async Task<ActionResult<AdmUser>> DeleteUser(Int16 UserId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Admins.User, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsDelete)
                        {
                            var UserToDelete = await _UserService.GetUserByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, UserId, headerViewModel.UserId);

                            if (UserToDelete == null)
                                return NotFound(GenrateMessage.datanotfound);

                            var sqlResponce = await _UserService.DeleteUserAsync(headerViewModel.RegId, headerViewModel.CompanyId, UserToDelete, headerViewModel.UserId);

                            return StatusCode(StatusCodes.Status202Accepted, sqlResponce);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }

        [HttpDelete, Route("ResetPassword/{UserId}")]
        [Authorize]
        public async Task<ActionResult<UserViewModel>> ResetPassword(Int16 UserId, [FromBody] UserViewModel userViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var resetpasswordUser = await _UserService.GetUserByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, UserId, headerViewModel.UserId);

                    if (resetpasswordUser == null)
                        return NotFound(GenrateMessage.datanotfound);

                    var UserEntity = new AdmUser
                    {
                        UserId = userViewModel.UserId,
                        UserCode = userViewModel.UserCode,
                        UserName = userViewModel.UserName,
                        UserPassword = userViewModel.UserPassword,
                        UserEmail = userViewModel.UserEmail,
                        Remarks = userViewModel.Remarks,
                        IsActive = userViewModel.IsActive,
                        UserGroupId = userViewModel.UserGroupId,
                        EditById = headerViewModel.UserId,
                        EditDate = DateTime.Now,
                    };

                    var sqlResponce = await _UserService.ResetPasswordAsync(headerViewModel.RegId, headerViewModel.CompanyId, UserEntity, headerViewModel.UserId);

                    return StatusCode(StatusCodes.Status202Accepted, sqlResponce);
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}