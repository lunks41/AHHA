using AHHA.Application.IServices;
using AHHA.Application.IServices.Setting;
using AHHA.Core.Common;
using AHHA.Core.Entities.Setting;
using AHHA.Core.Models.Setting;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Setting
{
    [Route("api/Setting")]
    [ApiController]
    public class FinSettingsController : BaseController
    {
        private readonly IFinSettingsService _FinSettingsService;
        private readonly ILogger<FinSettingsController> _logger;

        public FinSettingsController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<FinSettingsController> logger, IFinSettingsService FinSettingsService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _FinSettingsService = FinSettingsService;
        }

        //get --companyid
        //upsert  --company/model

        [HttpGet, Route("GetFinSetting")]
        [Authorize]
        public async Task<ActionResult<FinSettingViewModel>> GetFinSetting([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Admin, (Int32)E_Admin.FinSetting, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var finSettingViewModel = _mapper.Map<FinSettingViewModel>(await _FinSettingsService.GetFinSettingAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId));

                        if (finSettingViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, finSettingViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("UpsertFinSetting")]
        [Authorize]
        public async Task<ActionResult<FinSettingViewModel>> UpsertFinSetting(FinSettingViewModel finSettingViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Admin, (Int32)E_Admin.FinSetting, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsCreate)
                        {
                            if (finSettingViewModel == null)
                                return NotFound(GenrateMessage.datanotfound);

                            var FinEntity = new S_FinSettings
                            {
                                CompanyId = headerViewModel.CompanyId,
                                Base_CurrencyId = finSettingViewModel.Base_CurrencyId,
                                Local_CurrencyId = finSettingViewModel.Local_CurrencyId,
                                ExhGainLoss_GlId = finSettingViewModel.ExhGainLoss_GlId,
                                BankCharge_GlId = finSettingViewModel.BankCharge_GlId,
                                ProfitLoss_GlId = finSettingViewModel.ProfitLoss_GlId,
                                RetEarning_GlId = finSettingViewModel.RetEarning_GlId,
                                SaleGst_GlId = finSettingViewModel.SaleGst_GlId,
                                PurGst_GlId = finSettingViewModel.PurGst_GlId,
                                SaleDef_GlId = finSettingViewModel.SaleDef_GlId,
                                PurDef_GlId = finSettingViewModel.PurDef_GlId,
                                CreateById = headerViewModel.UserId,
                                EditById = headerViewModel.UserId,
                                EditDate = DateTime.Now,
                            };

                            var createdFin = await _FinSettingsService.UpsertFinSettingAsync(headerViewModel.RegId, headerViewModel.CompanyId, FinEntity, headerViewModel.UserId);
                            return StatusCode(StatusCodes.Status202Accepted, createdFin);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new Fin record");
            }
        }
    }
}