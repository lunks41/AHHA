using AHHA.Application.IServices;
using AHHA.Application.IServices.Masters;
using AHHA.Core.Common;
using AHHA.Core.Entities.Masters;
using AHHA.Core.Models.Masters;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Masters
{
    [Route("api/Master")]
    [ApiController]
    public class SupplierAddressController : BaseController
    {
        private readonly ISupplierAddressService _SupplierAddressService;
        private readonly ILogger<SupplierAddressController> _logger;

        public SupplierAddressController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<SupplierAddressController> logger, ISupplierAddressService SupplierAddressService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _SupplierAddressService = SupplierAddressService;
        }

        //Get the Supplier Address List
        [HttpGet, Route("GetSupplierAddressbySupplierId/{SupplierId}")]
        [Authorize]
        public async Task<ActionResult> GetSupplierAddressBySupplierId(Int16 SupplierId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return NoContent();

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.Supplier, headerViewModel.UserId);

                if (userGroupRight == null)
                    return NotFound(GenerateMessage.AuthenticationFailed);

                var cacheData = await _SupplierAddressService.GetSupplierAddressBySupplierIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, SupplierId, headerViewModel.UserId);

                if (cacheData == null)
                    return Ok(new SqlResponse { Result = -1, Message = "failed", Data = null, TotalRecords = 0 });

                return Ok(new SqlResponse { Result = 1, Message = "success", Data = cacheData, TotalRecords = 0 });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        //Supplier Address one record by using addressId
        [HttpGet, Route("GetSupplierAddressbyid/{SupplierId}/{AddressId}")]
        [Authorize]
        public async Task<ActionResult<SupplierAddressViewModel>> GetSupplierAddressById(Int32 SupplierId, Int16 AddressId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return NoContent();

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.Supplier, headerViewModel.UserId);

                if (userGroupRight == null)
                    return NotFound(GenerateMessage.AuthenticationFailed);

                var cacheData = await _SupplierAddressService.GetSupplierAddressByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, SupplierId, AddressId, headerViewModel.UserId);

                if (cacheData == null)
                    return Ok(new SqlResponse { Result = -1, Message = "failed", Data = null, TotalRecords = 0 });

                return Ok(new SqlResponse { Result = 1, Message = "success", Data = cacheData, TotalRecords = 0 });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("SaveSupplierAddress")]
        [Authorize]
        public async Task<ActionResult<SupplierAddressViewModel>> SaveSupplierAddress(SupplierAddressViewModel supplierAddressViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (supplierAddressViewModel == null || supplierAddressViewModel.SupplierId == 0)
                    return NotFound();

                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return NoContent();

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.Customer, headerViewModel.UserId);

                if (userGroupRight == null || !userGroupRight.IsCreate)
                    return NotFound(GenerateMessage.AuthenticationFailed);

                var SupplierAddressEntity = new M_SupplierAddress
                {
                    SupplierId = supplierAddressViewModel.SupplierId,
                    AddressId = supplierAddressViewModel.AddressId,
                    Address1 = supplierAddressViewModel.Address1?.Trim() ?? string.Empty,
                    Address2 = supplierAddressViewModel.Address2?.Trim() ?? string.Empty,
                    Address3 = supplierAddressViewModel.Address3?.Trim() ?? string.Empty,
                    Address4 = supplierAddressViewModel.Address4?.Trim() ?? string.Empty,
                    PinCode = supplierAddressViewModel.PinCode?.Trim() ?? string.Empty,
                    CountryId = supplierAddressViewModel.CountryId,
                    PhoneNo = supplierAddressViewModel.PhoneNo?.Trim() ?? string.Empty,
                    FaxNo = supplierAddressViewModel.FaxNo?.Trim() ?? string.Empty,
                    EmailAdd = supplierAddressViewModel.EmailAdd?.Trim() ?? string.Empty,
                    WebUrl = supplierAddressViewModel.WebUrl?.Trim() ?? string.Empty,
                    IsDefaultAdd = supplierAddressViewModel.IsDefaultAdd,
                    IsDeliveryAdd = supplierAddressViewModel.IsDeliveryAdd,
                    IsFinAdd = supplierAddressViewModel.IsFinAdd,
                    IsSalesAdd = supplierAddressViewModel.IsSalesAdd,
                    IsActive = supplierAddressViewModel.IsActive,
                    CreateById = headerViewModel.UserId,
                    EditById = headerViewModel.UserId,
                    EditDate = DateTime.Now,
                };

                var sqlResponse = await _SupplierAddressService.SaveSupplierAddressAsync(headerViewModel.RegId, headerViewModel.CompanyId, SupplierAddressEntity, headerViewModel.UserId);

                return Ok(new SqlResponse { Result = sqlResponse.Result, Message = sqlResponse.Message, Data = null, TotalRecords = 0 });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new SupplierAddress record");
            }
        }

        [HttpDelete, Route("DeleteSupplierAddress/{SupplierId}/{AddressId}")]
        [Authorize]
        public async Task<ActionResult<M_SupplierAddress>> DeleteSupplierAddress(Int32 SupplierId, Int16 AddressId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return NoContent();

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.Supplier, headerViewModel.UserId);

                if (userGroupRight == null)
                    return NotFound(GenerateMessage.AuthenticationFailed);

                if (!userGroupRight.IsDelete)
                    return Unauthorized(GenerateMessage.AuthenticationFailed);

                var sqlResponse = await _SupplierAddressService.DeleteSupplierAddressAsync(headerViewModel.RegId, headerViewModel.CompanyId, SupplierId, AddressId, headerViewModel.UserId);

                return Ok(new SqlResponse { Result = sqlResponse.Result, Message = sqlResponse.Message, Data = null, TotalRecords = 0 });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}