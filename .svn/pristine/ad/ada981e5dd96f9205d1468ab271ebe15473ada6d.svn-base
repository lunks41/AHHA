using AHHA.API.ExceptionHandling;
using AHHA.API.Extensions;
using AspNetCoreRateLimit;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Diagnostics;
using Microsoft.IdentityModel.Tokens;
using Serilog;
using System.Text;
using Telerik.Reporting.Cache.File;
using Telerik.Reporting.Services;

var builder = WebApplication.CreateBuilder(args);

builder.Host.UseSerilog((ctx, lc) => lc.ReadFrom.Configuration(ctx.Configuration));

#region Caching & IP Rate Limiting

var configuration = builder.Configuration;
builder.Services.AddOptions();
builder.Services.AddMemoryCache();
builder.Services.AddInMemoryRateLimiting();
builder.Services.AddSingleton<IIpPolicyStore, MemoryCacheIpPolicyStore>();
builder.Services.AddSingleton<IClientPolicyStore, MemoryCacheClientPolicyStore>();
builder.Services.AddSingleton<IRateLimitCounterStore, MemoryCacheRateLimitCounterStore>();
builder.Services.AddSingleton<IProcessingStrategy, AsyncKeyLockProcessingStrategy>();
builder.Services.AddSingleton<IExceptionHandler, GlobalExcaptionHandler>();
builder.Services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();

#endregion Caching & IP Rate Limiting

builder.Services.AddLogging();
builder.Services.RegisterService(builder.Configuration);

#region JWT Token

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidAudience = configuration["JWT:ValidAudience"],
            ValidIssuer = configuration["JWT:ValidIssuer"],
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["JWT:SecretKey"]))
        };
    });

#endregion JWT Token

builder.Services.AddControllers();

builder.Services.AddCors(options =>
{
    options.AddPolicy("CORSPolicy", builder =>
        builder.WithOrigins("*")
               .AllowAnyMethod()
               .AllowAnyHeader());
});

// Configure Telerik Reporting services
builder.Services.AddSingleton<IReportServiceConfiguration>(sp =>
{
    var config = sp.GetRequiredService<IConfiguration>();
    return new ReportServiceConfiguration
    {
        HostAppId = "TelerikReportingApp",
        Storage = new FileStorage(),
        ReportSourceResolver = new UriReportSourceResolver(
            System.IO.Path.Combine(
                sp.GetRequiredService<IWebHostEnvironment>().ContentRootPath,
                "Reports"
            )
        )
    };
});

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();

app.UseCors("CORSPolicy");

// Enable Swagger (typically used in development)
app.UseSwagger();
app.UseSwaggerUI(c =>
{
    c.SwaggerEndpoint("/swagger/v1/swagger.json", "AHHA API V1");
});

app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseIpRateLimiting();

app.UseRouting();

app.UseAuthentication();
app.UseAuthorization();

// Map Telerik Reporting endpoints BEFORE mapping controllers.
//app.MapTelerikReporting();

// Map API controllers.
app.MapControllers();

app.Run();

//using AHHA.API.ExceptionHandling;
//using AHHA.API.Extensions;
//using AspNetCoreRateLimit;
//using Microsoft.AspNetCore.Authentication.JwtBearer;
//using Microsoft.AspNetCore.Diagnostics;
//using Microsoft.IdentityModel.Tokens;
//using Serilog;
//using System.Text;
//using Telerik.Reporting.Cache.File;
//using Telerik.Reporting.Services;

//var builder = WebApplication.CreateBuilder(args);

//builder.Host.UseSerilog((ctx, lc) => lc.ReadFrom.Configuration(ctx.Configuration));

//#region Caching & IP Rate Limiting

//var configuration = builder.Configuration;

//// needed to load configuration from appsettings.json
//builder.Services.AddOptions();

//// needed to store rate limit counters and ip rules
//builder.Services.AddMemoryCache();

////Implementing IP Rate Limiting : IP rate limiting is a crucial aspect of web application security that helps prevent abuse, protect against brute force attacks, and ensure fair resource usage. In this article, we will walk through the process of implementing IP rate limiting in an ASP.NET Core MVC application using middleware and the AspNetCoreRateLimit library

////In Production we have to un-committee code
//////load general configuration from appsettings.json
////builder.Services.Configure<IpRateLimitOptions>(configuration.GetSection("IpRateLimiting"));
//////load ip rules from appsettings.json
////builder.Services.Configure<IpRateLimitPolicies>(configuration.GetSection("IpRateLimitPolicies"));

//builder.Services.AddInMemoryRateLimiting();

//// inject counter and rules distributed cache stores
//builder.Services.AddSingleton<IIpPolicyStore, MemoryCacheIpPolicyStore>();
//builder.Services.AddSingleton<IClientPolicyStore, MemoryCacheClientPolicyStore>();
//builder.Services.AddSingleton<IRateLimitCounterStore, MemoryCacheRateLimitCounterStore>();
//builder.Services.AddSingleton<IProcessingStrategy, AsyncKeyLockProcessingStrategy>();
//builder.Services.AddSingleton<IExceptionHandler, GlobalExcaptionHandler>();
//builder.Services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();

//#endregion Caching & IP Rate Limiting

//builder.Services.AddLogging();
//builder.Services.RegisterService(builder.Configuration);//From API Exenstions Folder

//#region JWT Token

//// Configuring JWT authentication
//builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
//    .AddJwtBearer(options =>
//    {
//        options.TokenValidationParameters = new TokenValidationParameters
//        {
//            ValidateIssuer = true,
//            ValidateAudience = true,
//            ValidateLifetime = true,
//            ValidateIssuerSigningKey = true,
//            ValidAudience = configuration["JWT:ValidAudience"],
//            ValidIssuer = configuration["JWT:ValidIssuer"],
//            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["JWT:SecretKey"]))
//        };
//    });

////builder.Services.AddAuthentication("ApiKey")
////        .AddScheme<ApiKeyAuthenticationOptions, ApiKeyAuthenticationHandler>("ApiKey", null);

////builder.Services.AddAuthorization(options =>
////{
////    options.AddPolicy("ApiKeyOrBearer", policy =>
////    {
////        policy.AddAuthenticationSchemes("Bearer", "ApiKey");
////        policy.RequireAuthenticatedUser();
////    });
////});

//#endregion JWT Token

//builder.Services.AddControllers();

//builder.Services.AddCors(options =>
//{
//    options.AddPolicy("CORSPolicy", builder => builder.WithOrigins("*").AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());
//});

//// Configure Telerik Reporting services
//builder.Services.AddSingleton<IReportServiceConfiguration>(sp =>
//{
//    var configuration = sp.GetRequiredService<IConfiguration>();
//    return new ReportServiceConfiguration
//    {
//        HostAppId = "TelerikReportingApp",
//        Storage = new FileStorage(),
//        ReportSourceResolver = new UriReportSourceResolver(
//            System.IO.Path.Combine(
//                sp.GetRequiredService<IWebHostEnvironment>().ContentRootPath,
//                "Reports"
//            )
//        )
//    };
//});

////builder.Services.AddSingleton<IReportServiceConfiguration>(sp => { return new ReportServiceConfiguration { ReportingEngineConfiguration = sp.GetService<IConfiguration>(), HostAppId = "TelerikReportingApp", Storage = new FileStorage(), ReportSourceResolver = new UriReportSourceResolver(System.IO.Path.Combine(sp.GetService<IWebHostEnvironment>().ContentRootPath, "Reports")) }; });

//// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
//builder.Services.AddEndpointsApiExplorer();
//builder.Services.AddSwaggerGen();

//var app = builder.Build();

////// Configure the HTTP request pipeline.
//app.UseCors("CORSPolicy");

////if (app.Environment.IsDevelopment())
////{
//app.UseSwagger();
//app.UseSwaggerUI(c =>
//{
//    c.SwaggerEndpoint("/swagger/v1/swagger.json", "AHHA API V1");
//});
////}

//app.UseHttpsRedirection();
//app.UseStaticFiles();
//app.UseIpRateLimiting();

//app.UseRouting();
//app.UseAuthentication();
//app.UseAuthorization();

////Use for Global Excaption Handlers
////app.UseMiddleware<GlobalExcaptionHandler>();
//app.MapControllers();
////app.MapTelerikReporting();

//app.Run();