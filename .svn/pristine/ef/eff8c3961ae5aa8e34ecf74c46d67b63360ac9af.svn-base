using AHHA.Application.IServices;
using AHHA.Application.IServices.Masters;
using AHHA.Core.Common;
using AHHA.Core.Entities.Masters;
using AHHA.Core.Models.Masters;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Masters
{
    [Route("api/Master")]
    [ApiController]
    public class VesselController : BaseController
    {
        private readonly IVesselService _VesselService;
        private readonly ILogger<VesselController> _logger;

        public VesselController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<VesselController> logger, IVesselService VesselService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _VesselService = VesselService;
        }

        [HttpGet, Route("GetVessel")]
        [Authorize]
        public async Task<ActionResult> GetVessel([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.Vessel, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var VesselData = await _VesselService.GetVesselListAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.pageSize, headerViewModel.pageNumber, headerViewModel.searchString, headerViewModel.UserId);

                        if (VesselData == null)
                            return NotFound();

                        return StatusCode(StatusCodes.Status202Accepted, VesselData);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                 "Error retrieving data from the database");
            }
        }

        [HttpGet, Route("GetVesselbyid/{VesselId}")]
        [Authorize]
        public async Task<ActionResult<VesselViewModel>> GetVesselById(Int16 VesselId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.Vessel, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var VesselViewModel = _mapper.Map<VesselViewModel>(await _VesselService.GetVesselByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, VesselId, headerViewModel.UserId));

                        if (VesselViewModel == null)
                            return NotFound();
                        return StatusCode(StatusCodes.Status202Accepted, VesselViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("AddVessel")]
        [Authorize]
        public async Task<ActionResult<VesselViewModel>> CreateVessel(VesselViewModel Vessel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.Vessel, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsCreate)
                        {
                            if (Vessel == null)
                                return StatusCode(StatusCodes.Status400BadRequest, "M_Vessel ID mismatch");

                            var VesselEntity = new M_Vessel
                            {
                                CompanyId = Vessel.CompanyId,
                                VesselCode = Vessel.VesselCode,
                                VesselId = Vessel.VesselId,
                                VesselName = Vessel.VesselName,
                                CallSign = Vessel.CallSign,
                                IMOCode = Vessel.IMOCode,
                                GRT = Vessel.GRT,
                                LicenseNo = Vessel.LicenseNo,
                                VesselType = Vessel.VesselType,
                                Flag = Vessel.Flag,
                                CreateById = headerViewModel.UserId,
                                IsActive = Vessel.IsActive,
                                Remarks = Vessel.Remarks
                            };

                            var createdVessel = await _VesselService.AddVesselAsync(headerViewModel.RegId, headerViewModel.CompanyId, VesselEntity, headerViewModel.UserId);
                            return StatusCode(StatusCodes.Status202Accepted, createdVessel);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new Vessel record");
            }
        }

        [HttpPut, Route("UpdateVessel/{VesselId}")]
        [Authorize]
        public async Task<ActionResult<VesselViewModel>> UpdateVessel(Int16 VesselId, [FromBody] VesselViewModel Vessel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.Vessel, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsEdit)
                        {
                            if (VesselId != Vessel.VesselId)
                                return StatusCode(StatusCodes.Status400BadRequest, "M_Vessel ID mismatch");

                            var VesselToUpdate = await _VesselService.GetVesselByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, VesselId, headerViewModel.UserId);

                            if (VesselToUpdate == null)
                                return NotFound($"M_Vessel with Id = {VesselId} not found");

                            var VesselEntity = new M_Vessel
                            {
                                CompanyId = Vessel.CompanyId,
                                VesselCode = Vessel.VesselCode,
                                VesselId = Vessel.VesselId,
                                VesselName = Vessel.VesselName,
                                CallSign = Vessel.CallSign,
                                IMOCode = Vessel.IMOCode,
                                GRT = Vessel.GRT,
                                LicenseNo = Vessel.LicenseNo,
                                VesselType = Vessel.VesselType,
                                Flag = Vessel.Flag,
                                CreateById = headerViewModel.UserId,
                                IsActive = Vessel.IsActive,
                                Remarks = Vessel.Remarks
                            };

                            var sqlResponce = await _VesselService.UpdateVesselAsync(headerViewModel.RegId, headerViewModel.CompanyId, VesselEntity, headerViewModel.UserId);
                            return StatusCode(StatusCodes.Status202Accepted, sqlResponce);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error updating data");
            }
        }

        [HttpDelete, Route("DeleteVessel/{VesselId}")]
        [Authorize]
        public async Task<ActionResult<M_Vessel>> DeleteVessel(Int16 VesselId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.Vessel, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsDelete)
                        {
                            var VesselToDelete = await _VesselService.GetVesselByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, VesselId, headerViewModel.UserId);

                            if (VesselToDelete == null)
                                return NotFound($"M_Vessel with Id = {VesselId} not found");

                            var sqlResponce = await _VesselService.DeleteVesselAsync(headerViewModel.RegId, headerViewModel.CompanyId, VesselToDelete, headerViewModel.UserId);

                            return StatusCode(StatusCodes.Status202Accepted, sqlResponce);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}