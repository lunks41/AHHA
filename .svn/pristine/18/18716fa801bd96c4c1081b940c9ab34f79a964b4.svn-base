using AHHA.Application.IServices;
using AHHA.Application.IServices.Accounts.CB;
using AHHA.Core.Common;
using AHHA.Core.Entities.Accounts.CB;
using AHHA.Core.Helper;
using AHHA.Core.Models.Account;
using AHHA.Core.Models.Account.CB;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Accounts.CB
{
    [Route("api/Account")]
    [ApiController]
    public class CBGeneralPaymentController : BaseController
    {
        private readonly ICBGeneralPaymentService _CBGeneralPaymentService;
        private readonly ILogger<CBGeneralPaymentController> _logger;

        public CBGeneralPaymentController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<CBGeneralPaymentController> logger, ICBGeneralPaymentService CBGeneralPaymentService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _CBGeneralPaymentService = CBGeneralPaymentService;
        }

        [HttpGet, Route("GetCBGeneralPayment")]
        [Authorize]
        public async Task<ActionResult> GetCBGeneralPayment([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.CB, (Int32)E_CB.CBPayment, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var cacheData = await _CBGeneralPaymentService.GetCBGeneralPaymentListAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.pageSize, headerViewModel.pageNumber, headerViewModel.searchString.Trim(), headerViewModel.UserId);

                        if (cacheData == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, cacheData);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                 new SqlResponse { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        [HttpGet, Route("GetCBGeneralPaymentbyId/{PaymentId}")]
        [Authorize]
        public async Task<ActionResult<CBGenPaymentHdViewModel>> GetCBGeneralPaymentById(string PaymentId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.CB, (Int32)E_CB.CBPayment, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var CBGenPaymentHdViewModel = await _CBGeneralPaymentService.GetCBGeneralPaymentByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(string.IsNullOrEmpty(PaymentId) ? 0 : PaymentId.Trim()), string.Empty, headerViewModel.UserId);

                        if (CBGenPaymentHdViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, CBGenPaymentHdViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new SqlResponse { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        [HttpGet, Route("GetCBGeneralPaymentbyNo/{PaymentNo}")]
        [Authorize]
        public async Task<ActionResult<CBGenPaymentHdViewModel>> GetCBGeneralPaymentByNo(string PaymentNo, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.CB, (Int32)E_CB.CBPayment, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var CBGenPaymentHdViewModel = await _CBGeneralPaymentService.GetCBGeneralPaymentByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, 0, PaymentNo, headerViewModel.UserId);

                        if (CBGenPaymentHdViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, CBGenPaymentHdViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new SqlResponse { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        [HttpPost, Route("SaveCBGeneralPayment")]
        [Authorize]
        public async Task<ActionResult<CBGenPaymentHdViewModel>> SaveCBGeneralPayment(CBGenPaymentHdViewModel cBGenPaymentHdViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.CB, (Int32)E_CB.CBPayment, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsCreate || userGroupRight.IsEdit)
                        {
                            if (cBGenPaymentHdViewModel == null)
                                return NotFound(GenrateMessage.datanotfound);

                            var CBGeneralPaymentEntity = new CBGenPaymentHd
                            {
                                CompanyId = headerViewModel.CompanyId,
                                PaymentId = Convert.ToInt64(string.IsNullOrEmpty(cBGenPaymentHdViewModel.PaymentId) ? "0" : cBGenPaymentHdViewModel.PaymentId.Trim()),
                                PaymentNo = cBGenPaymentHdViewModel.PaymentNo?.Trim() ?? string.Empty,
                                ReferenceNo = cBGenPaymentHdViewModel.ReferenceNo?.Trim() ?? string.Empty,
                                TrnDate = DateHelperStatic.ParseClientDate(cBGenPaymentHdViewModel.TrnDate),
                                AccountDate = DateHelperStatic.ParseClientDate(cBGenPaymentHdViewModel.AccountDate),
                                BankId = cBGenPaymentHdViewModel.BankId,
                                CurrencyId = cBGenPaymentHdViewModel.CurrencyId,
                                ExhRate = cBGenPaymentHdViewModel.ExhRate,
                                CtyExhRate = cBGenPaymentHdViewModel.CtyExhRate,
                                PaymentTypeId = cBGenPaymentHdViewModel.PaymentTypeId,
                                ChequeNo = cBGenPaymentHdViewModel.ChequeNo?.Trim() ?? string.Empty,
                                ChequeDate = DateHelperStatic.ParseClientDate(cBGenPaymentHdViewModel.ChequeDate),
                                BankChgAmt = cBGenPaymentHdViewModel.BankChgAmt,
                                BankChgLocalAmt = cBGenPaymentHdViewModel.BankChgLocalAmt,
                                TotAmt = cBGenPaymentHdViewModel.TotAmt,
                                TotLocalAmt = cBGenPaymentHdViewModel.TotLocalAmt,
                                TotCtyAmt = cBGenPaymentHdViewModel.TotCtyAmt,
                                GstClaimDate = DateHelperStatic.ParseClientDate(cBGenPaymentHdViewModel.GstClaimDate),
                                GstAmt = cBGenPaymentHdViewModel.GstAmt,
                                GstLocalAmt = cBGenPaymentHdViewModel.GstLocalAmt,
                                GstCtyAmt = cBGenPaymentHdViewModel.GstCtyAmt,
                                TotAmtAftGst = cBGenPaymentHdViewModel.TotAmtAftGst,
                                TotLocalAmtAftGst = cBGenPaymentHdViewModel.TotLocalAmtAftGst,
                                TotCtyAmtAftGst = cBGenPaymentHdViewModel.TotCtyAmtAftGst,
                                Remarks = cBGenPaymentHdViewModel.Remarks?.Trim() ?? string.Empty,
                                PayeeTo = cBGenPaymentHdViewModel.PayeeTo?.Trim() ?? string.Empty,
                                ModuleFrom = cBGenPaymentHdViewModel.ModuleFrom?.Trim() ?? string.Empty,
                                CreateById = headerViewModel.UserId,
                                EditById = headerViewModel.UserId,
                                EditDate = DateTime.Now,
                            };

                            //Details Table data mapping
                            var CBGeneralPaymentDtEntities = new List<CBGenPaymentDt>();

                            if (cBGenPaymentHdViewModel.data_details != null)
                            {
                                foreach (var item in cBGenPaymentHdViewModel.data_details)
                                {
                                    var CBGeneralPaymentDtEntity = new CBGenPaymentDt
                                    {
                                        PaymentId = Convert.ToInt64(string.IsNullOrEmpty(item.PaymentId) ? 0 : item.PaymentId.Trim()),
                                        PaymentNo = item.PaymentNo,
                                        ItemNo = item.ItemNo,
                                        SeqNo = item.SeqNo,
                                        GLId = item.GLId,
                                        Remarks = item.Remarks,
                                        TotAmt = item.TotAmt,
                                        TotLocalAmt = item.TotLocalAmt,
                                        TotCtyAmt = item.TotCtyAmt,
                                        GstId = item.GstId,
                                        GstPercentage = item.GstPercentage,
                                        GstAmt = item.GstAmt,
                                        GstLocalAmt = item.GstLocalAmt,
                                        GstCtyAmt = item.GstCtyAmt,
                                        DepartmentId = item.DepartmentId,
                                        EmployeeId = item.EmployeeId,
                                        VesselId = item.VesselId,
                                        BargeId = item.BargeId,
                                        VoyageId = item.VoyageId,
                                    };

                                    CBGeneralPaymentDtEntities.Add(CBGeneralPaymentDtEntity);
                                }
                            }

                            var sqlResponse = await _CBGeneralPaymentService.SaveCBGeneralPaymentAsync(headerViewModel.RegId, headerViewModel.CompanyId, CBGeneralPaymentEntity, CBGeneralPaymentDtEntities, headerViewModel.UserId);

                            if (sqlResponse.Result > 0)
                            {
                                var customerModel = await _CBGeneralPaymentService.GetCBGeneralPaymentByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, sqlResponse.Result, string.Empty, headerViewModel.UserId);

                                return StatusCode(StatusCodes.Status202Accepted, customerModel);
                            }

                            return StatusCode(StatusCodes.Status202Accepted, sqlResponse);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new CBGeneralPayment record");
            }
        }

        [HttpPost, Route("DeleteCBGeneralPayment")]
        [Authorize]
        public async Task<ActionResult<CBGenPaymentHdViewModel>> DeleteCBGeneralPayment(DeleteViewModel deleteViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.CB, (Int32)E_CB.CBPayment, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsDelete)
                        {
                            if (!string.IsNullOrEmpty(deleteViewModel.DocumentId))
                            {
                                var sqlResponse = await _CBGeneralPaymentService.DeleteCBGeneralPaymentAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(deleteViewModel.DocumentId), deleteViewModel.DocumentNo, deleteViewModel.CancelRemarks, headerViewModel.UserId);

                                if (sqlResponse.Result > 0)
                                {
                                    var customerModel = await _CBGeneralPaymentService.GetCBGeneralPaymentByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(deleteViewModel.DocumentId), string.Empty, headerViewModel.UserId);

                                    return StatusCode(StatusCodes.Status202Accepted, customerModel);
                                }

                                return StatusCode(StatusCodes.Status204NoContent, sqlResponse);
                            }
                            else
                            {
                                return NotFound(GenrateMessage.datanotfound);
                            }
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}