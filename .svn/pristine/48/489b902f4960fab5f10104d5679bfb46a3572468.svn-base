using AHHA.Application.IServices;
using AHHA.Application.IServices.Setting;
using AHHA.Core.Common;
using AHHA.Core.Entities.Setting;
using AHHA.Core.Models.Setting;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Setting
{
    [Route("api/Setting")]
    [ApiController]
    public class MandatoryFieldsController : BaseController
    {
        private readonly IMandatoryFieldsServices _MandatoryFieldsServices;
        private readonly ILogger<MandatoryFieldsController> _logger;

        public MandatoryFieldsController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<MandatoryFieldsController> logger, IMandatoryFieldsServices MandatoryFieldsServices)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _MandatoryFieldsServices = MandatoryFieldsServices;
        }

        [HttpGet, Route("GetMandatoryFieldsbyid/{ModuleId}/{TransactionId}")]
        [Authorize]
        public async Task<ActionResult<MandatoryFieldsViewModel>> GetMandatoryFieldsById(Int16 ModuleId, Int16 TransactionId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    return NoContent();
                }

                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Setting, (Int16)E_Setting.MandatoryFields, headerViewModel.UserId);

                if (userGroupRight == null)
                {
                    _logger.LogWarning("Authentication failed for user ID {UserId}", headerViewModel.UserId);
                    return NotFound(GenerateMessage.AuthenticationFailed);
                }

                var mandatoryFieldsViewModel = await _MandatoryFieldsServices.GetMandatoryFieldsByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, ModuleId, TransactionId, headerViewModel.UserId);

                if (mandatoryFieldsViewModel == null)
                {
                    _logger.LogInformation("Data not found for Module ID {ModuleId} and Transaction ID {TransactionId}", ModuleId, TransactionId);
                    return NotFound(GenerateMessage.datanotfound);
                }

                return StatusCode(StatusCodes.Status202Accepted, mandatoryFieldsViewModel);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving data: {ErrorMessage}", ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError, "Error retrieving data from the database");
            }
        }

        //[HttpGet, Route("GetMandatoryFieldsbyid/{ModuleId}/{TransactionId}")]
        //[Authorize]
        //public async Task<ActionResult<MandatoryFieldsViewModel>> GetMandatoryFieldsById(Int16 ModuleId, Int16 TransactionId, [FromHeader] HeaderViewModel headerViewModel)
        //{
        //    try
        //    {
        //        if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
        //        {
        //            var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Setting, (Int16)E_Setting.MandatoryFields, headerViewModel.UserId);

        //            if (userGroupRight != null)
        //            {
        //                var MandatoryFieldsViewModel = await _MandatoryFieldsServices.GetMandatoryFieldsByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, ModuleId, TransactionId, headerViewModel.UserId);

        //                if (MandatoryFieldsViewModel == null)
        //                    return NotFound(GenerateMessage.datanotfound);

        //                return StatusCode(StatusCodes.Status202Accepted, MandatoryFieldsViewModel);
        //            }
        //            else
        //            {
        //                return NotFound(GenerateMessage.AuthenticationFailed);
        //            }
        //        }
        //        else
        //        {
        //            return NoContent();
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        _logger.LogError(ex, ex.Message);
        //        return StatusCode(StatusCodes.Status500InternalServerError,
        //            "Error retrieving data from the database");
        //    }
        //}

        [HttpGet, Route("GetMandatoryFieldsbyidV1/{ModuleId}")]
        [Authorize]
        public async Task<ActionResult<MandatoryFieldsViewModel>> GetMandatoryFieldsById_V1(Int16 ModuleId, Int16 TransactionId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Setting, (Int16)E_Setting.MandatoryFields, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var MandatoryFieldsViewModel = await _MandatoryFieldsServices.GetMandatoryFieldsByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, ModuleId, headerViewModel.UserId);

                        if (MandatoryFieldsViewModel == null)
                            return NotFound(GenerateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, MandatoryFieldsViewModel);
                    }
                    else
                    {
                        return NotFound(GenerateMessage.AuthenticationFailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError, new SqlResponse { Result = -1, Message = "An error occurred while processing your request", Data = null });
            }
        }

        [HttpPost, Route("SaveMandatoryFields")]
        [Authorize]
        public async Task<ActionResult> SaveMandatoryFields([FromBody] List<MandatoryFieldsViewModel> mandatoryFieldsViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                // Validate headers
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return NoContent();

                // Check user group rights
                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Setting, (Int16)E_Setting.MandatoryFields, headerViewModel.UserId);

                if (userGroupRight == null || !userGroupRight.IsCreate)
                    return NotFound(GenerateMessage.AuthenticationFailed);

                // Validate input data
                if (mandatoryFieldsViewModel == null || !mandatoryFieldsViewModel.Any())
                    return NotFound(GenerateMessage.datanotfound);

                // Map the view model to the entity
                var mandatoryFieldsEntities = mandatoryFieldsViewModel.Select(item => new S_MandatoryFields
                {
                    CompanyId = headerViewModel.CompanyId,
                    ModuleId = item.ModuleId,
                    TransactionId = item.TransactionId,
                    M_ProductId = item.M_ProductId,
                    M_GLId = item.M_GLId,
                    M_QTY = item.M_QTY,
                    M_UomId = item.M_UomId,
                    M_UnitPrice = item.M_UnitPrice,
                    M_TotAmt = item.M_TotAmt,
                    M_Remarks = item.M_Remarks,
                    M_GstId = item.M_GstId,
                    M_DeliveryDate = item.M_DeliveryDate,
                    M_DepartmentId = item.M_DepartmentId,
                    M_EmployeeId = item.M_EmployeeId,
                    M_PortId = item.M_PortId,
                    M_VesselId = item.M_VesselId,
                    M_BargeId = item.M_BargeId,
                    M_VoyageId = item.M_VoyageId,
                    M_SupplyDate = item.M_SupplyDate,
                    M_ReferenceNo = item.M_ReferenceNo,
                    M_SuppInvoiceNo = item.M_SuppInvoiceNo,
                    M_BankId = item.M_BankId,
                    M_Remarks_Hd = item.M_Remarks_Hd,
                    M_Address1 = item.M_Address1,
                    M_Address2 = item.M_Address2,
                    M_Address3 = item.M_Address3,
                    M_Address4 = item.M_Address4,
                    M_PinCode = item.M_PinCode,
                    M_CountryId = item.M_CountryId,
                    M_PhoneNo = item.M_PhoneNo,
                    M_ContactName = item.M_ContactName,
                    M_MobileNo = item.M_MobileNo,
                    M_EmailAdd = item.M_EmailAdd,
                    CreateById = headerViewModel.UserId,
                    EditById = headerViewModel.UserId,
                    EditDate = DateTime.Now,
                }).ToList();

                // Save the mapped entities
                var createdMandatoryFields = await _MandatoryFieldsServices.SaveMandatoryFieldsAsync(headerViewModel.RegId, headerViewModel.CompanyId, mandatoryFieldsEntities, headerViewModel.UserId);

                return StatusCode(StatusCodes.Status202Accepted, createdMandatoryFields);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error saving MandatoryFields records");
                return StatusCode(StatusCodes.Status500InternalServerError, new SqlResponse { Result = -1, Message = "An error occurred while processing your request", Data = null });
            }
        }
    }
}