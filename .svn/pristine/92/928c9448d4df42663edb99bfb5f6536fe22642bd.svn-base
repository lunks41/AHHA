using AHHA.Application.CommonServices;
using AHHA.Application.IServices.Masters;
using AHHA.Core.Common;
using AHHA.Core.Entities.Admin;
using AHHA.Core.Entities.Masters;
using AHHA.Core.Models.Masters;
using AHHA.Infra.Data;
using Microsoft.EntityFrameworkCore;
using System.Data;

namespace AHHA.Infra.Services.Masters
{
    public sealed class SupplierAddressService : ISupplierAddressService
    {
        private readonly IRepository<M_SupplierAddress> _repository;
        private ApplicationDbContext _context;

        public SupplierAddressService(IRepository<M_SupplierAddress> repository, ApplicationDbContext context)
        {
            _repository = repository;
            _context = context;
        }

        public async Task<IEnumerable<SupplierAddressViewModel>> GetSupplierAddressBySupplierIdAsync(string RegId, Int16 CompanyId, Int32 SupplierId, Int16 UserId)
        {
            try
            {
                var result = await _repository.GetQueryAsync<SupplierAddressViewModel>(RegId, $"SELECT  M_SupAdd.SupplierId,M_SupAdd.AddressId,M_SupAdd.Address1,M_SupAdd.Address2,M_SupAdd.Address3,M_SupAdd.Address4,M_SupAdd.PhoneNo,M_SupAdd.EmailAdd,M_SupAdd.IsDefaultAdd,M_SupAdd.IsDeleveryAdd,M_SupAdd.IsFinAdd,M_SupAdd.IsSalesAdd,M_SupAdd.IsActive,M_Sup.SupplierCode,M_Sup.SupplierName,M_Cou.CountryCode,M_Cou.CountryName,M_SupAdd.CreateById,M_SupAdd.CreateDate,M_SupAdd.EditById,M_SupAdd.EditDate,Usr.UserName AS CreateBy,Usr1.UserName AS EditBy FROM dbo.M_SupplierAddress M_SupAdd INNER JOIN dbo.M_Supplier M_Sup ON M_Sup.SupplierId = M_SupAdd.SupplierId INNER JOIN dbo.M_Country M_Cou ON M_Cou.CountryId = M_SupAdd.CountryId LEFT JOIN dbo.AdmUser Usr ON Usr.UserId = M_SupAdd.CreateById LEFT JOIN AdmUser Usr1 ON Usr1.UserId = M_SupAdd.EditById WHERE M_SupAdd.SupplierId = {SupplierId}");

                return result;
            }
            catch (Exception ex)
            {
                var errorLog = new AdmErrorLog
                {
                    CompanyId = CompanyId,
                    ModuleId = (short)E_Modules.Master,
                    TransactionId = (short)E_Master.Supplier,
                    DocumentId = 0,
                    DocumentNo = "",
                    TblName = "M_SupplierAddress",
                    ModeId = (short)E_Mode.View,
                    Remarks = ex.Message + ex.InnerException,
                    CreateById = UserId,
                };

                _context.Add(errorLog);
                _context.SaveChanges();

                throw new Exception(ex.ToString());
            }
        }

        //Supplier Address one record by using addressId
        public async Task<SupplierAddressViewModel> GetSupplierAddressByIdAsync(string RegId, Int16 CompanyId, Int32 SupplierId, Int32 AddressId, Int16 UserId)
        {
            try
            {
                var result = await _repository.GetQuerySingleOrDefaultAsync<SupplierAddressViewModel>(RegId, $"SELECT  M_SupAdd.SupplierId,M_SupAdd.AddressId,M_SupAdd.Address1,M_SupAdd.Address2,M_SupAdd.Address3,M_SupAdd.Address4,M_SupAdd.PinCode,M_SupAdd.PhoneNo,M_SupAdd.FaxNo,M_SupAdd.WebUrl,M_SupAdd.EmailAdd,M_SupAdd.IsDefaultAdd,M_SupAdd.IsDeleveryAdd,M_SupAdd.IsFinAdd,M_SupAdd.IsSalesAdd,M_SupAdd.IsActive,M_Sup.SupplierCode,M_Sup.SupplierName,M_SupAdd.CountryId,M_Cou.CountryCode,M_Cou.CountryName,M_SupAdd.CreateById,M_SupAdd.CreateDate,M_SupAdd.EditById,M_SupAdd.EditDate,Usr.UserName AS CreateBy,Usr1.UserName AS EditBy FROM dbo.M_SupplierAddress M_SupAdd INNER JOIN dbo.M_Supplier M_Sup ON M_Sup.SupplierId = M_SupAdd.SupplierId INNER JOIN dbo.M_Country M_Cou ON M_Cou.CountryId = M_SupAdd.CountryId LEFT JOIN dbo.AdmUser Usr ON Usr.UserId = M_SupAdd.CreateById LEFT JOIN AdmUser Usr1 ON Usr1.UserId = M_SupAdd.EditById WHERE M_SupAdd.SupplierId = {SupplierId} And M_SupAdd.AddressId={AddressId}");

                return result;
            }
            catch (Exception ex)
            {
                var errorLog = new AdmErrorLog
                {
                    CompanyId = CompanyId,
                    ModuleId = (short)E_Modules.Master,
                    TransactionId = (short)E_Master.Supplier,
                    DocumentId = 0,
                    DocumentNo = "",
                    TblName = "M_SupplierAddress",
                    ModeId = (short)E_Mode.View,
                    Remarks = ex.Message + ex.InnerException,
                    CreateById = UserId,
                };

                _context.Add(errorLog);
                _context.SaveChanges();

                throw new Exception(ex.ToString());
            }
        }

        public async Task<SqlResponce> AddSupplierAddressAsync(string RegId, Int16 CompanyId, M_SupplierAddress m_SupplierAddress, Int16 UserId)
        {
            using (var transaction = _context.Database.BeginTransaction())
            {
                try
                {
                    var DataExist = await _repository.GetQueryAsync<SqlResponceIds>(RegId, $"SELECT 1 AS IsExist FROM dbo.M_SupplierAddress where SupplierId = {m_SupplierAddress.SupplierId} And Address1 = '{m_SupplierAddress.Address1}' And AddressId<>{m_SupplierAddress.AddressId}");

                    if (DataExist.Count() > 0)
                    {
                        if (DataExist.ToList()[0].IsExist == 1)
                        {
                            return new SqlResponce { Result = -1, Message = "SupplierAddress Exist" };
                        }
                    }

                    //Take the Next Id From SQL
                    var sqlMissingResponce = await _repository.GetQuerySingleOrDefaultAsync<SqlResponceIds>(RegId, $"SELECT ISNULL((SELECT TOP 1(AddressId + 1) FROM dbo.M_SupplierAddress WHERE SupplierId = {m_SupplierAddress.SupplierId} AND (AddressId + 1) NOT IN(SELECT AddressId FROM dbo.M_SupplierAddress where SupplierId= {m_SupplierAddress.SupplierId})),1) AS NextId");

                    if (sqlMissingResponce != null && sqlMissingResponce.NextId > 0)
                    {
                        #region Saving SupplierAddress

                        m_SupplierAddress.AddressId = Convert.ToInt32(sqlMissingResponce.NextId);

                        var entity = _context.Add(m_SupplierAddress);
                        entity.Property(b => b.EditDate).IsModified = false;

                        var SupplierAddressToSave = _context.SaveChanges();

                        #endregion Saving SupplierAddress

                        #region Save AuditLog

                        if (SupplierAddressToSave > 0)
                        {
                            //Saving Audit log
                            var auditLog = new AdmAuditLog
                            {
                                CompanyId = CompanyId,
                                ModuleId = (short)E_Modules.Master,
                                TransactionId = (short)E_Master.Supplier,
                                DocumentId = m_SupplierAddress.AddressId,
                                DocumentNo = m_SupplierAddress.Address1,
                                TblName = "M_SupplierAddress",
                                ModeId = (short)E_Mode.Create,
                                Remarks = "Supplier Address Save Successfully",
                                CreateById = UserId,
                                CreateDate = DateTime.Now
                            };

                            _context.Add(auditLog);
                            var auditLogSave = _context.SaveChanges();

                            if (auditLogSave > 0)
                            {
                                transaction.Commit();
                                return new SqlResponce { Result = m_SupplierAddress.AddressId, Message = "Save Successfully" };
                            }
                        }
                        else
                        {
                            return new SqlResponce { Result = 1, Message = "Save Failed" };
                        }

                        #endregion Save AuditLog
                    }
                    else
                    {
                        return new SqlResponce { Result = -1, Message = "AddressId Should not be zero" };
                    }
                    return new SqlResponce();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    _context.ChangeTracker.Clear();

                    var errorLog = new AdmErrorLog
                    {
                        CompanyId = CompanyId,
                        ModuleId = (short)E_Modules.Master,
                        TransactionId = (short)E_Master.Supplier,
                        DocumentId = 0,
                        DocumentNo = m_SupplierAddress.Address1,
                        TblName = "M_SupplierAddress",
                        ModeId = (short)E_Mode.Create,
                        Remarks = ex.Message + ex.InnerException,
                        CreateById = UserId
                    };
                    _context.Add(errorLog);
                    _context.SaveChanges();

                    throw new Exception(ex.ToString());
                }
            }
        }

        public async Task<SqlResponce> UpdateSupplierAddressAsync(string RegId, Int16 CompanyId, M_SupplierAddress m_SupplierAddress, Int16 UserId)
        {
            using (var transaction = _context.Database.BeginTransaction())
            {
                try
                {
                    if (m_SupplierAddress.AddressId > 0 && m_SupplierAddress.SupplierId > 0)
                    {
                        #region Update SupplierAddress

                        var entity = _context.Update(m_SupplierAddress);

                        entity.Property(b => b.CreateById).IsModified = false;
                        entity.Property(b => b.Address1).IsModified = false;

                        var counToUpdate = _context.SaveChanges();

                        #endregion Update SupplierAddress

                        if (counToUpdate > 0)
                        {
                            var auditLog = new AdmAuditLog
                            {
                                CompanyId = CompanyId,
                                ModuleId = (short)E_Modules.Master,
                                TransactionId = (short)E_Master.Supplier,
                                DocumentId = m_SupplierAddress.AddressId,
                                DocumentNo = m_SupplierAddress.Address1,
                                TblName = "M_SupplierAddress",
                                ModeId = (short)E_Mode.Update,
                                Remarks = "SupplierAddress Update Successfully",
                                CreateById = UserId
                            };
                            _context.Add(auditLog);
                            var auditLogSave = await _context.SaveChangesAsync();

                            if (auditLogSave > 0)
                            {
                                transaction.Commit();
                                return new SqlResponce { Result = m_SupplierAddress.AddressId, Message = "Update Successfully" };
                            }
                        }
                        else
                        {
                            return new SqlResponce { Result = -1, Message = "Update Failed" };
                        }
                    }
                    else
                    {
                        return new SqlResponce { Result = -1, Message = "AddressId Should not be zero" };
                    }
                    return new SqlResponce();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    _context.ChangeTracker.Clear();

                    var errorLog = new AdmErrorLog
                    {
                        CompanyId = CompanyId,
                        ModuleId = (short)E_Modules.Master,
                        TransactionId = (short)E_Master.Supplier,
                        DocumentId = m_SupplierAddress.AddressId,
                        DocumentNo = m_SupplierAddress.Address1,
                        TblName = "M_SupplierAddress",
                        ModeId = (short)E_Mode.Update,
                        Remarks = ex.Message,
                        CreateById = UserId
                    };
                    _context.Add(errorLog);
                    _context.SaveChanges();

                    throw new Exception(ex.ToString());
                }
            }
        }

        public async Task<SqlResponce> DeleteSupplierAddressAsync(string RegId, Int16 CompanyId, Int32 SupplierId, Int32 AddressId, Int16 UserId)
        {
            using (var transaction = _context.Database.BeginTransaction())
            {
                try
                {
                    if (AddressId > 0 && SupplierId > 0)
                    {
                        var SupplierAddressToRemove = _context.M_SupplierAddress.Where(x => x.AddressId == AddressId && x.SupplierId == SupplierId).ExecuteDelete();

                        if (SupplierAddressToRemove > 0)
                        {
                            var auditLog = new AdmAuditLog
                            {
                                CompanyId = CompanyId,
                                ModuleId = (short)E_Modules.Master,
                                TransactionId = (short)E_Master.Supplier,
                                DocumentId = AddressId,
                                DocumentNo = "",
                                TblName = "M_SupplierAddress",
                                ModeId = (short)E_Mode.Delete,
                                Remarks = "SupplierAddress Delete Successfully",
                                CreateById = UserId
                            };
                            _context.Add(auditLog);
                            var auditLogSave = await _context.SaveChangesAsync();
                            if (auditLogSave > 0)
                            {
                                transaction.Commit();
                                return new SqlResponce { Result = 1, Message = "Delete Successfully" };
                            }
                        }
                        else
                        {
                            return new SqlResponce { Result = -1, Message = "Delete Failed" };
                        }
                    }
                    else
                    {
                        return new SqlResponce { Result = -1, Message = "AddressId Should be zero" };
                    }
                    return new SqlResponce();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    _context.ChangeTracker.Clear();

                    var errorLog = new AdmErrorLog
                    {
                        CompanyId = CompanyId,
                        ModuleId = (short)E_Modules.Master,
                        TransactionId = (short)E_Master.Supplier,
                        DocumentId = 0,
                        DocumentNo = "",
                        TblName = "M_SupplierAddress",
                        ModeId = (short)E_Mode.Delete,
                        Remarks = ex.Message + ex.InnerException,
                        CreateById = UserId,
                    };

                    _context.Add(errorLog);
                    _context.SaveChanges();

                    throw new Exception(ex.ToString());
                }
            }
        }
    }
}