using AHHA.Application.IServices;
using AHHA.Application.IServices.Setting;
using AHHA.Core.Common;
using AHHA.Core.Entities.Setting;
using AHHA.Core.Models.Setting;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Setting
{
    [Route("api/Setting")]
    [ApiController]
    public class DecimalSettingController : BaseController
    {
        private readonly IDecimalSettingService _DecimalSettingService;
        private readonly ILogger<DecimalSettingController> _logger;

        public DecimalSettingController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<DecimalSettingController> logger, IDecimalSettingService DecimalSettingService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _DecimalSettingService = DecimalSettingService;
        }

        //decimal screen

        //get --companyid
        //Save  --company/model

        [HttpGet, Route("GetDecSetting")]
        [Authorize]
        public async Task<ActionResult<DecimalSettingViewModel>> GetDecSetting([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var DecSettingViewModel = await _DecimalSettingService.GetDecSettingAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId);

                    if (DecSettingViewModel == null)
                        return NotFound(GenerateMessage.datanotfound);

                    return StatusCode(StatusCodes.Status200OK, DecSettingViewModel);
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("SaveDecSetting")]
        [Authorize]
        public async Task<ActionResult<DecimalSettingViewModel>> SaveDecSetting(DecimalSettingViewModel decSettingViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    if (decSettingViewModel == null)
                        return NotFound(GenerateMessage.datanotfound);

                    var FinEntity = new S_DecSettings
                    {
                        CompanyId = headerViewModel.CompanyId,
                        AmtDec = Convert.ToInt16(decSettingViewModel.AmtDec),
                        LocAmtDec = Convert.ToInt16(decSettingViewModel.LocAmtDec),
                        CtyAmtDec = Convert.ToInt16(decSettingViewModel.CtyAmtDec),
                        PriceDec = Convert.ToInt16(decSettingViewModel.PriceDec),
                        QtyDec = Convert.ToInt16(decSettingViewModel.QtyDec),
                        ExhRateDec = Convert.ToInt16(decSettingViewModel.ExhRateDec),
                        DateFormat = decSettingViewModel.DateFormat,
                        longDateFormat = decSettingViewModel.LongDateFormat,
                        CreateById = headerViewModel.UserId,
                        EditById = headerViewModel.UserId,
                        EditDate = DateTime.Now,
                    };

                    var createdFin = await _DecimalSettingService.SaveDecSettingAsync(headerViewModel.RegId, headerViewModel.CompanyId, FinEntity, headerViewModel.UserId);
                    return StatusCode(StatusCodes.Status202Accepted, createdFin);
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new Fin record");
            }
        }
    }
}