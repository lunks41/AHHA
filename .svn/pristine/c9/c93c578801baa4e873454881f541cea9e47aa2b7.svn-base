using AHHA.Application.IServices;
using AHHA.Application.IServices.Admin;
using AHHA.Core.Common;
using AHHA.Core.Entities.Admin;
using AHHA.Core.Entities.Setting;
using AHHA.Core.Models.Admin;
using AHHA.Core.Models.Setting;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Admin
{
    [Route("api/Admin")]
    [ApiController]
    public class UserGroupRightsController : BaseController
    {
        private readonly IUserGroupRightsService _UserGroupRightsService;
        private readonly ILogger<UserGroupRightsController> _logger;

        public UserGroupRightsController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<UserGroupRightsController> logger, IUserGroupRightsService UserGroupRightsService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _UserGroupRightsService = UserGroupRightsService;
        }

        //Getlist  --UserGroupRightsid
        //Upsert   --UserGroupRightsid

        [HttpGet, Route("GetUserGroupRightsbyid/{UserGroupId}")]
        [Authorize]
        public async Task<ActionResult> GetUserGroupRightsById(Int16 UserGroupId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var UserGroupRightsRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int32)E_Admin.UserGroupRights, headerViewModel.UserId);

                    if (UserGroupRightsRight != null)
                    {
                        var cacheData = await _UserGroupRightsService.GetUserGroupRightsByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, UserGroupId, headerViewModel.UserId);

                        if (cacheData == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, cacheData);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                 "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("SaveUserGroupRights")]
        [Authorize]
        public async Task<ActionResult> SaveUserGroupRights([FromBody] List<UserGroupRightsViewModel> userGroupRightsViewModels, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                // Validate headers
                if (!ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                    return NoContent();

                // Check user group rights
                var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Admin, (Int16)E_Admin.UserGroupRights, headerViewModel.UserId);

                if (userGroupRight == null || !userGroupRight.IsCreate)
                    return NotFound(GenrateMessage.authenticationfailed);

                // Validate input data
                if (userGroupRightsViewModels == null || !userGroupRightsViewModels.Any())
                    return NotFound(GenrateMessage.datanotfound);

                // Map the view model to the entity
                var UserGroupRightsEntities = userGroupRightsViewModels.Select(item => new AdmUserGroupRights
                {
                    UserGroupId = item.UserGroupId,
                    ModuleId = item.ModuleId,
                    TransactionId = item.TransactionId,
                    IsRead = item.IsRead,
                    IsCreate = item.IsCreate,
                    IsEdit = item.IsEdit,
                    IsExport = item.IsExport,
                    IsDelete = item.IsDelete,
                    IsPrint = item.IsPrint,
                    CreateById = headerViewModel.UserId,
                }).ToList();

                // Save the mapped entities
                var createdUserGroupRights = await _UserGroupRightsService.SaveUserGroupRightsAsync(headerViewModel.RegId, headerViewModel.CompanyId, UserGroupRightsEntities, headerViewModel.UserId);

                return StatusCode(StatusCodes.Status202Accepted, createdUserGroupRights);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error saving UserGroupRights records");
                return StatusCode(StatusCodes.Status500InternalServerError, new SqlResponce { Result = -1, Message = "An error occurred while processing your request", Data = null });
            }
        }
    }
}