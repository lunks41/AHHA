using AHHA.Application.CommonServices;
using AHHA.Application.IServices.Admin;
using AHHA.Core.Common;
using AHHA.Core.Entities.Admin;
using AHHA.Core.Models.Admin;
using AHHA.Infra.Data;

namespace AHHA.Infra.Services.Admin
{
    public sealed class UserGroupRightsService : IUserGroupRightsService
    {
        private readonly IRepository<AdmUserGroupRights> _repository;
        private ApplicationDbContext _context;

        public UserGroupRightsService(IRepository<AdmUserGroupRights> repository, ApplicationDbContext context)
        {
            _repository = repository;
            _context = context;
        }

        public async Task<IEnumerable<UserGroupRightsViewModel>> GetUserGroupRightsByIdAsync(string RegId, Int16 CompanyId, Int16 UserGroupId, Int16 UserId)
        {
            try
            {
                var result = await _repository.GetQueryAsync<UserGroupRightsViewModel>(RegId, $"exec Adm_GetGroupAccessRights {CompanyId},{UserGroupId}");

                return result;
            }
            catch (Exception ex)
            {
                var errorLog = new AdmErrorLog
                {
                    CompanyId = CompanyId,
                    ModuleId = (short)E_Modules.Admin,
                    TransactionId = (short)E_Admin.UserGroupRights,
                    DocumentId = 0,
                    DocumentNo = "",
                    TblName = "AdmUserGroupRights",
                    ModeId = (short)E_Mode.View,
                    Remarks = ex.Message + ex.InnerException,
                    CreateById = UserId,
                };

                _context.Add(errorLog);
                _context.SaveChanges();

                throw new Exception(ex.ToString());
            }
        }

        public async Task<SqlResponce> UpsertUserGroupRightsAsync(string RegId, Int16 CompanyId, AdmUserGroupRights admUserGroupRights, Int16 UserId)
        {
            using (var transaction = _context.Database.BeginTransaction())
            {
                try
                {
                    if (admUserGroupRights.UserGroupId > 0 && admUserGroupRights.ModuleId > 0 && admUserGroupRights.TransactionId > 0)
                    {
                        var UserGroupRightsToRemove = await _repository.GetQueryAsync<SqlResponceIds>(RegId, $"DELETE FROM dbo.AdmUserGroupRights WHERE UserGroupId={admUserGroupRights.UserGroupId} AND ModuleId={admUserGroupRights.ModuleId} AND TransactionId={admUserGroupRights.TransactionId}");

                        _context.Add(admUserGroupRights);
                    }
                    else
                        return new SqlResponce { Result = -1, Message = "User Group Rights Not Found" };

                    var upsertData = _context.SaveChanges();

                    if (upsertData > 0)
                    {
                        var auditLog = new AdmAuditLog
                        {
                            CompanyId = CompanyId,
                            ModuleId = (short)E_Modules.Master,
                            TransactionId = (short)E_Admin.UserGroupRights,
                            DocumentId = admUserGroupRights.UserGroupId,
                            DocumentNo = "",
                            TblName = "AdmUserGroupRights",
                            ModeId = (short)E_Mode.Create,
                            Remarks = "User Group Rights Upset Successfully",
                            CreateById = UserId
                        };
                        _context.Add(auditLog);
                        var auditLogSave = await _context.SaveChangesAsync();

                        if (auditLogSave > 0)
                        {
                            transaction.Commit();
                            return new SqlResponce { Result = 1, Message = "Upset Successfully" };
                        }
                    }
                    else
                    {
                        return new SqlResponce { Result = -1, Message = "Upset Failed" };
                    }

                    return new SqlResponce();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    _context.ChangeTracker.Clear();

                    var errorLog = new AdmErrorLog
                    {
                        CompanyId = CompanyId,
                        ModuleId = (short)E_Modules.Master,
                        TransactionId = (short)E_Admin.UserGroupRights,
                        DocumentId = admUserGroupRights.UserGroupId,
                        DocumentNo = "",
                        TblName = "AdmUserGroupRights",
                        ModeId = (short)E_Mode.Update,
                        Remarks = ex.Message,
                        CreateById = UserId
                    };
                    _context.Add(errorLog);
                    _context.SaveChanges();

                    throw new Exception(ex.ToString());
                }
            }
        }
    }
}