using AHHA.Application.CommonServices;
using AHHA.Application.IServices.Accounts;
using AHHA.Application.IServices.Accounts.CB;
using AHHA.Core.Common;
using AHHA.Core.Entities.Accounts.CB;
using AHHA.Core.Entities.Admin;
using AHHA.Core.Models.Account.CB;
using AHHA.Infra.Data;
using Microsoft.EntityFrameworkCore;
using System.Data;
using System.Transactions;

namespace AHHA.Infra.Services.Accounts.CB
{
    public sealed class CBPettyCashService : ICBPettyCashService
    {
        private readonly IRepository<CBPettyCashHd> _repository;
        private ApplicationDbContext _context;
        private readonly IAccountService _accountService;

        public CBPettyCashService(IRepository<CBPettyCashHd> repository, ApplicationDbContext context, IAccountService accountService)
        {
            _repository = repository;
            _context = context;
            _accountService = accountService;
        }

        public async Task<CBPettyCashViewModel> GetCBPettyCashListAsync(string RegId, Int16 CompanyId, short pageSize, short pageNumber, string searchString, Int16 UserId)
        {
            CBPettyCashViewModel countViewModel = new CBPettyCashViewModel();
            try
            {
                var totalcount = await _repository.GetQuerySingleOrDefaultAsync<SqlResponseIds>(RegId, $"SELECT COUNT(*) AS CountId FROM dbo.CBPettyCashHd CbGenHd INNER JOIN dbo.M_Bank M_Bnk ON M_Bnk.BankId = CbGenHd.BankId INNER JOIN dbo.M_Currency M_Curr ON M_Curr.CurrencyId = CbGenHd.CurrencyId INNER JOIN dbo.M_PaymentType M_papty ON M_papty.PaymentTypeId = CbGenHd.PaymentTypeId LEFT JOIN dbo.AdmUser Usr ON Usr.UserId = CbGenHd.CreateById LEFT JOIN dbo.AdmUser Usr1 ON Usr1.UserId = CbGenHd.EditById LEFT JOIN dbo.AdmUser Usr2 ON Usr2.UserId = CbGenHd.CancelById WHERE ( CbGenHd.PaymentNo LIKE '%{searchString}%' OR  CbGenHd.ReferenceNo LIKE '%{searchString}%' OR  M_Curr.CurrencyCode LIKE '%{searchString}%' OR  M_Curr.CurrencyName LIKE '%{searchString}%' OR  M_Bnk.BankName LIKE '%{searchString}%' OR  M_Bnk.BankCode LIKE '%{searchString}%' )");
                var result = await _repository.GetQueryAsync<CBPettyCashHdViewModel>(RegId, $"SELECT CbGenHd.CompanyId,CbGenHd.PaymentId,CbGenHd.PaymentNo,CbGenHd.ReferenceNo,CbGenHd.TrnDate,CbGenHd.AccountDate,CbGenHd.BankId,M_Bnk.BankCode,M_Bnk.BankName,CbGenHd.CurrencyId,M_Curr.CurrencyCode,M_Curr.CurrencyName,CbGenHd.ExhRate,CbGenHd.CtyExhRate,CbGenHd.PaymentTypeId,M_papty.PaymentTypeCode,M_papty.PaymentTypeName,CbGenHd.ChequeNo,CbGenHd.ChequeDate,CbGenHd.BankChgAmt,CbGenHd.BankChgLocalAmt,CbGenHd.TotAmt,CbGenHd.TotLocalAmt,CbGenHd.GstClaimDate,CbGenHd.GstAmt,CbGenHd.GstLocalAmt,CbGenHd.TotAmtAftGst,CbGenHd.TotLocalAmtAftGst,CbGenHd.TotCtyAmtAftGst,CbGenHd.Remarks,CbGenHd.PayeeTo,CbGenHd.ModuleFrom,CbGenHd.CreateById,CbGenHd.CreateDate,CbGenHd.EditById,CbGenHd.EditDate,CbGenHd.IsCancel,CbGenHd.CancelById,CbGenHd.CancelDate,Usr.UserName AS CreateBy,Usr1.UserName AS EditBy,Usr2.UserName AS CancelBy FROM dbo.CBPettyCashHd CbGenHd INNER JOIN dbo.M_Bank M_Bnk ON M_Bnk.BankId = CbGenHd.BankId INNER JOIN dbo.M_Currency M_Curr ON M_Curr.CurrencyId = CbGenHd.CurrencyId INNER JOIN dbo.M_PaymentType M_papty ON M_papty.PaymentTypeId = CbGenHd.PaymentTypeId LEFT JOIN dbo.AdmUser Usr ON Usr.UserId = CbGenHd.CreateById LEFT JOIN dbo.AdmUser Usr1 ON Usr1.UserId = CbGenHd.EditById LEFT JOIN dbo.AdmUser Usr2 ON Usr2.UserId = CbGenHd.CancelById WHERE ( CbGenHd.PaymentNo LIKE '%{searchString}%' OR  CbGenHd.ReferenceNo LIKE '%{searchString}%' OR  M_Curr.CurrencyCode LIKE '%{searchString}%' OR  M_Curr.CurrencyName LIKE '%{searchString}%' OR  M_Bnk.BankName LIKE '%{searchString}%' OR  M_Bnk.BankCode LIKE '%{searchString}%' ) ORDER BY CbGenHd.AccountDate Desc,CbGenHd.PaymentNo Desc OFFSET {pageSize}*({pageNumber - 1}) ROWS FETCH NEXT {pageSize} ROWS ONLY");

                countViewModel.responseCode = 200;
                countViewModel.responseMessage = "Success";
                countViewModel.totalRecords = totalcount == null ? 0 : totalcount.CountId;
                countViewModel.data = result == null ? null : result.ToList();

                return countViewModel;
            }
            catch (Exception ex)
            {
                var errorLog = new AdmErrorLog
                {
                    CompanyId = CompanyId,
                    ModuleId = (short)E_Modules.CB,
                    TransactionId = (short)E_CB.CBPattyCash,
                    DocumentId = 0,
                    DocumentNo = "",
                    TblName = "CBPettyCashHd",
                    ModeId = (short)E_Mode.View,
                    Remarks = ex.Message + ex.InnerException,
                    CreateById = UserId
                };

                _context.Add(errorLog);
                _context.SaveChanges();

                throw new Exception(ex.ToString());
            }
        }

        public async Task<CBPettyCashHdViewModel> GetCBPettyCashByIdAsync(string RegId, Int16 CompanyId, Int64 PaymentId, string PaymentNo, Int16 UserId)
        {
            CBPettyCashHdViewModel CBPettyCashViewModel = new CBPettyCashHdViewModel();
            try
            {
                CBPettyCashViewModel = await _repository.GetQuerySingleOrDefaultAsync<CBPettyCashHdViewModel>(RegId, $"SELECT CbGenHd.CompanyId,CbGenHd.PaymentId,CbGenHd.PaymentNo,CbGenHd.ReferenceNo,CbGenHd.TrnDate,CbGenHd.AccountDate,CbGenHd.BankId,M_Bnk.BankCode,M_Bnk.BankName,CbGenHd.CurrencyId,M_Curr.CurrencyCode,M_Curr.CurrencyName,CbGenHd.ExhRate,CbGenHd.CtyExhRate,CbGenHd.PaymentTypeId,M_papty.PaymentTypeCode,M_papty.PaymentTypeName,CbGenHd.ChequeNo,CbGenHd.ChequeDate,CbGenHd.BankChgAmt,CbGenHd.BankChgLocalAmt,CbGenHd.TotAmt,CbGenHd.TotLocalAmt,CbGenHd.GstClaimDate,CbGenHd.GstAmt,CbGenHd.GstLocalAmt,CbGenHd.TotAmtAftGst,CbGenHd.TotLocalAmtAftGst,CbGenHd.TotCtyAmtAftGst,CbGenHd.Remarks,CbGenHd.PayeeTo,CbGenHd.ModuleFrom,CbGenHd.CreateById,CbGenHd.CreateDate,CbGenHd.EditById,CbGenHd.EditDate,CbGenHd.IsCancel,CbGenHd.CancelById,CbGenHd.CancelDate,Usr.UserName AS CreateBy,Usr1.UserName AS EditBy,Usr2.UserName AS CancelBy FROM dbo.CBPettyCashHd CbGenHd INNER JOIN dbo.M_Bank M_Bnk ON M_Bnk.BankId = CbGenHd.BankId INNER JOIN dbo.M_Currency M_Curr ON M_Curr.CurrencyId = CbGenHd.CurrencyId INNER JOIN dbo.M_PaymentType M_papty ON M_papty.PaymentTypeId = CbGenHd.PaymentTypeId LEFT JOIN dbo.AdmUser Usr ON Usr.UserId = CbGenHd.CreateById LEFT JOIN dbo.AdmUser Usr1 ON Usr1.UserId = CbGenHd.EditById LEFT JOIN dbo.AdmUser Usr2 ON Usr2.UserId = CbGenHd.CancelById WHERE (CbGenHd.PaymentId={PaymentId} OR {PaymentId}=0) AND (CbGenHd.PaymentNo='{PaymentNo}' OR '{PaymentNo}'='{string.Empty}')");

                if (CBPettyCashViewModel == null)
                    return null;

                var result = await _repository.GetQueryAsync<CBPettyCashDtViewModel>(RegId, $"SELECT CbGenDt.PaymentId,CbGenDt.PaymentNo,CbGenDt.ItemNo,CbGenDt.SeqNo,CbGenDt.GLId,CbGenDt.Remarks,CbGenDt.TotAmt,CbGenDt.TotLocalAmt,CbGenDt.TotCurAmt,CbGenDt.GstId,CbGenDt.GstPercentage,CbGenDt.GstCurAmt,CbGenDt.BargeId,CbGenDt.DepartmentId,CbGenDt.EmployeeId,CbGenDt.VesselId,CbGenDt.VoyageId FROM dbo.CBPettyCashDt CbGenDt INNER JOIN dbo.M_ChartOfAccount M_Chact ON M_Chact.GLId = CbGenDt.GLId INNER JOIN dbo.M_Barge M_brg ON M_brg.BargeId = CbGenDt.BargeId INNER JOIN dbo.M_Department M_dprt ON M_dprt.DepartmentId = CbGenDt.DepartmentId INNER JOIN dbo.M_Employee M_Emp ON M_Emp.EmployeeId = CbGenDt.EmployeeId INNER JOIN dbo.M_Vessel M_vesl ON M_vesl.VesselId = CbGenDt.VesselId INNER JOIN dbo.M_Voyage M_voy ON M_voy.VoyageId = CbGenDt.VoyageId WHERE CbGenDt.PaymentId={CBPettyCashViewModel.PaymentId}");

                CBPettyCashViewModel.data_details = result == null ? null : result.ToList();

                return CBPettyCashViewModel;
            }
            catch (Exception ex)
            {
                var errorLog = new AdmErrorLog
                {
                    CompanyId = CompanyId,
                    ModuleId = (short)E_Modules.CB,
                    TransactionId = (short)E_CB.CBPattyCash,
                    DocumentId = PaymentId,
                    DocumentNo = PaymentNo,
                    TblName = "CBPettyCashHd",
                    ModeId = (short)E_Mode.View,
                    Remarks = ex.Message + ex.InnerException,
                    CreateById = UserId,
                };

                _context.Add(errorLog);
                _context.SaveChanges();

                throw new Exception(ex.ToString());
            }
        }

        public async Task<SqlResponse> SaveCBPettyCashAsync(string RegId, Int16 CompanyId, CBPettyCashHd CBPettyCashHd, List<CBPettyCashDt> CBPettyCashDt, Int16 UserId)
        {
            bool IsEdit = false;
            string accountDate = CBPettyCashHd.AccountDate.ToString("dd/MMM/yyyy");
            try
            {
                using (var TScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                {
                    if (CBPettyCashHd.PaymentId != 0)
                    {
                        IsEdit = true;
                    }
                    if (IsEdit)
                    {
                        var DataExist = await _repository.GetQueryAsync<SqlResponseIds>(RegId, $"SELECT 1 AS IsExist FROM dbo.CBPettyCashHd WHERE IsCancel=0 And CompanyId={CompanyId} And PaymentId={CBPettyCashHd.PaymentId}");

                        if (DataExist.Count() == 0)
                            return new SqlResponse { Result = -1, Message = "Invoice Not Exist" };
                    }

                    if (!IsEdit)
                    {
                        var documentIdNo = await _repository.GetQueryAsync<SqlResponseIds>(RegId, $"exec S_GENERATE_NUMBER_NOANDID {CompanyId},{(short)E_Modules.CB},{(short)E_CB.CBPattyCash},'{accountDate}'");

                        if (documentIdNo.ToList()[0].DocumentId > 0 && documentIdNo.ToList()[0].DocumentNo != string.Empty)
                        {
                            CBPettyCashHd.PaymentId = documentIdNo.ToList()[0].DocumentId;
                            CBPettyCashHd.PaymentNo = documentIdNo.ToList()[0].DocumentNo;
                        }
                        else
                            return new SqlResponse { Result = -1, Message = "Invoice Number can't generate" };
                    }
                    else
                    {
                        await _repository.GetQueryAsync<SqlResponseIds>(RegId, $"exec FIN_AR_CreateHistoryRec {CompanyId},{UserId},{CBPettyCashHd.PaymentId},{(short)E_CB.CBPattyCash}");
                    }

                    //Saving Header
                    if (IsEdit)
                    {
                        var entityHead = _context.Update(CBPettyCashHd);
                        entityHead.Property(b => b.CreateById).IsModified = false;
                        entityHead.Property(b => b.CompanyId).IsModified = false;
                        entityHead.Property(b => b.EditVersion).IsModified = false;

                        entityHead.Property(b => b.IsCancel).IsModified = false;
                        entityHead.Property(b => b.CancelById).IsModified = false;
                        entityHead.Property(b => b.CancelDate).IsModified = false;
                        entityHead.Property(b => b.CancelRemarks).IsModified = false;
                    }
                    else
                    {
                        CBPettyCashHd.EditDate = null;
                        CBPettyCashHd.EditById = null;

                        var entityHead = _context.Add(CBPettyCashHd);

                        entityHead.Property(b => b.IsCancel).IsModified = false;
                        entityHead.Property(b => b.CancelById).IsModified = false;
                        entityHead.Property(b => b.CancelDate).IsModified = false;
                        entityHead.Property(b => b.CancelRemarks).IsModified = false;
                    }

                    var SaveHeader = _context.SaveChanges();

                    //Saving Details
                    if (SaveHeader > 0)
                    {
                        if (IsEdit)
                            _context.CBPettyCashDt.Where(x => x.PaymentId == CBPettyCashHd.PaymentId).ExecuteDelete();

                        foreach (var item in CBPettyCashDt)
                        {
                            item.PaymentId = CBPettyCashHd.PaymentId;
                            item.PaymentNo = CBPettyCashHd.PaymentNo;
                            //item.EditVersion = CBPettyCashHd.EditVersion;
                            _context.Add(item);
                        }

                        var SaveDetails = _context.SaveChanges();

                        #region Save AuditLog

                        if (SaveDetails > 0)
                        {
                            //Inserting the records into AR CreateStatement
                            await _repository.GetQueryAsync<SqlResponseIds>(RegId, $"exec FIN_AR_CreateStatement {CompanyId},{UserId},{CBPettyCashHd.PaymentId},{(short)E_CB.CBPattyCash}");

                            //Saving Audit log
                            var auditLog = new AdmAuditLog
                            {
                                CompanyId = CompanyId,
                                ModuleId = (short)E_Modules.CB,
                                TransactionId = (short)E_CB.CBPattyCash,
                                DocumentId = CBPettyCashHd.PaymentId,
                                DocumentNo = CBPettyCashHd.PaymentNo,
                                TblName = "CBPettyCashHd",
                                ModeId = IsEdit ? (short)E_Mode.Update : (short)E_Mode.Create,
                                Remarks = CBPettyCashHd.Remarks,
                                CreateById = UserId,
                                CreateDate = DateTime.Now
                            };

                            _context.Add(auditLog);
                            var auditLogSave = _context.SaveChanges();

                            if (auditLogSave > 0)
                            {
                                //Update Edit Version
                                if (IsEdit)
                                    await _repository.UpsertExecuteScalarAsync(RegId, $"update CBPettyCashHd set EditVersion=EditVersion+1 where PaymentId={CBPettyCashHd.PaymentId}; Update CBPettyCashDt set EditVersion=(SELECT TOP 1 EditVersion FROM dbo.CBPettyCashHd where PaymentId={CBPettyCashHd.PaymentId}) where PaymentId={CBPettyCashHd.PaymentId}");

                                //Create / Update Ar Statement
                                await _repository.GetQueryAsync<SqlResponseIds>(RegId, $"exec FIN_AR_CreateStatement {CompanyId},{UserId},{CBPettyCashHd.PaymentId},{(short)E_CB.CBPattyCash}");

                                TScope.Complete();
                                return new SqlResponse { Result = CBPettyCashHd.PaymentId, Message = "Save Successfully" };
                            }
                        }
                        else
                        {
                            return new SqlResponse { Result = 1, Message = "Save Failed" };
                        }

                        #endregion Save AuditLog
                    }
                    else
                    {
                        return new SqlResponse { Result = -1, Message = "Id Should not be zero" };
                    }
                    return new SqlResponse();
                }
            }
            catch (Exception ex)
            {
                _context.ChangeTracker.Clear();
                var errorLog = new AdmErrorLog
                {
                    CompanyId = CompanyId,
                    ModuleId = (short)E_Modules.CB,
                    TransactionId = (short)E_CB.CBPattyCash,
                    DocumentId = CBPettyCashHd.PaymentId,
                    DocumentNo = CBPettyCashHd.PaymentNo,
                    TblName = "CBPettyCashHd",
                    ModeId = IsEdit ? (short)E_Mode.Update : (short)E_Mode.Create,
                    Remarks = ex.Message + ex.InnerException,
                    CreateById = UserId
                };
                _context.Add(errorLog);
                _context.SaveChanges();
                throw;
            }
        }

        public async Task<SqlResponse> DeleteCBPettyCashAsync(string RegId, Int16 CompanyId, Int64 PaymentId, string PaymentNo, string CanacelRemarks, Int16 UserId)
        {
            try
            {
                using (var TScope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
                {
                    //Get Invoice Number
                    PaymentNo = await _repository.GetQuerySingleOrDefaultAsync<string>(RegId, $"SELECT PaymentNo FROM dbo.CBPettyCashHd WHERE PaymentId={PaymentId}");

                    if (PaymentId > 0)
                    {
                        //Update IsCancle=1,Cancelby=userid,Canceldate=now,CancelRemarks=CancelRemarks
                        var CBPettyCashToRemove = _context.CBPettyCashHd.Where(b => b.PaymentId == PaymentId).ExecuteUpdate(setPropertyCalls: setters => setters.SetProperty(b => b.IsCancel, true).SetProperty(b => b.CancelById, UserId).SetProperty(b => b.CancelDate, DateTime.Now).SetProperty(b => b.CancelRemarks, CanacelRemarks));

                        if (CBPettyCashToRemove > 0)
                        {
                            //Cancel the Ar Transactions.
                            await _repository.GetQueryAsync<SqlResponseIds>(RegId, $"exec FIN_AR_DeleteStatement {CompanyId},{UserId},{PaymentId},{(short)E_CB.CBPattyCash}");

                            var auditLog = new AdmAuditLog
                            {
                                CompanyId = CompanyId,
                                ModuleId = (short)E_Modules.CB,
                                TransactionId = (short)E_CB.CBPattyCash,
                                DocumentId = PaymentId,
                                DocumentNo = PaymentNo,
                                TblName = "CBPettyCashHd",
                                ModeId = (short)E_Mode.Delete,
                                Remarks = CanacelRemarks,
                                CreateById = UserId
                            };
                            _context.Add(auditLog);
                            var auditLogSave = await _context.SaveChangesAsync();

                            if (auditLogSave > 0)
                            {
                                TScope.Complete();
                                return new SqlResponse { Result = 1, Message = "Cancel Successfully" };
                            }
                        }
                        else
                        {
                            return new SqlResponse { Result = -1, Message = "Cancel Failed" };
                        }
                    }
                    else
                    {
                        return new SqlResponse { Result = -1, Message = "Invoice Not exists" };
                    }
                    return new SqlResponse();
                }
            }
            catch (Exception ex)
            {
                _context.ChangeTracker.Clear();

                var errorLog = new AdmErrorLog
                {
                    CompanyId = CompanyId,
                    ModuleId = (short)E_Modules.CB,
                    TransactionId = (short)E_CB.CBPattyCash,
                    DocumentId = PaymentId,
                    DocumentNo = PaymentNo,
                    TblName = "CBPettyCashHd",
                    ModeId = (short)E_Mode.Delete,
                    Remarks = ex.Message + ex.InnerException,
                    CreateById = UserId,
                };

                _context.Add(errorLog);
                _context.SaveChanges();

                throw new Exception(ex.ToString());
            }
        }
    }
}