using AHHA.Application.IServices;
using AHHA.Application.IServices.Masters;
using AHHA.Core.Common;
using AHHA.Core.Entities.Masters;
using AHHA.Core.Models.Masters;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Masters
{
    [Route("api/Master")]
    [ApiController]
    public class OrderTypeCategoryController : BaseController
    {
        private readonly IOrderTypeCategoryService _OrderTypeCategoryService;
        private readonly ILogger<OrderTypeCategoryController> _logger;

        public OrderTypeCategoryController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<OrderTypeCategoryController> logger, IOrderTypeCategoryService OrderTypeCategoryService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _OrderTypeCategoryService = OrderTypeCategoryService;
        }

        [HttpGet, Route("GetOrderTypeCategory")]
        [Authorize]
        public async Task<ActionResult> GetOrderTypeCategory([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.OrderTypeCategory, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var cacheData = await _OrderTypeCategoryService.GetOrderTypeCategoryListAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.pageSize, headerViewModel.pageNumber, headerViewModel.searchString, headerViewModel.UserId);

                        if (cacheData == null)
                            return NotFound(GenerateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, cacheData);
                    }
                    else
                    {
                        return NotFound(GenerateMessage.AuthenticationFailed);
                    }
                }
                else
                {
                    return NotFound(GenerateMessage.AuthenticationFailed);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                 "Error retrieving data from the database");
            }
        }

        [HttpGet, Route("GetOrderTypeCategorybyid/{OrderTypeCategoryId}")]
        [Authorize]
        public async Task<ActionResult<OrderTypeCategoryViewModel>> GetOrderTypeCategoryById(Int16 OrderTypeCategoryId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.OrderTypeCategory, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var orderTypeCategoryViewModel = _mapper.Map<OrderTypeCategoryViewModel>(await _OrderTypeCategoryService.GetOrderTypeCategoryByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, OrderTypeCategoryId, headerViewModel.UserId));

                        if (orderTypeCategoryViewModel == null)
                            return NotFound(GenerateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, orderTypeCategoryViewModel);
                    }
                    else
                    {
                        return NotFound(GenerateMessage.AuthenticationFailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("SaveOrderTypeCategory")]
        [Authorize]
        public async Task<ActionResult<OrderTypeCategoryViewModel>> SaveOrderTypeCategory(OrderTypeCategoryViewModel orderTypeCategoryViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.OrderTypeCategory, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsCreate)
                        {
                            if (orderTypeCategoryViewModel == null)
                                return NotFound(GenerateMessage.datanotfound);

                            var OrderTypeCategoryEntity = new M_OrderTypeCategory
                            {
                                CompanyId = headerViewModel.CompanyId,
                                OrderTypeCategoryId = orderTypeCategoryViewModel.OrderTypeCategoryId,
                                OrderTypeCategoryCode = orderTypeCategoryViewModel.OrderTypeCategoryCode?.Trim() ?? string.Empty,
                                OrderTypeCategoryName = orderTypeCategoryViewModel.OrderTypeCategoryName?.Trim() ?? string.Empty,
                                Remarks = orderTypeCategoryViewModel.Remarks?.Trim() ?? string.Empty,
                                IsActive = orderTypeCategoryViewModel.IsActive,
                                CreateById = headerViewModel.UserId,
                                EditById = headerViewModel.UserId,
                                EditDate = DateTime.Now
                            };

                            var sqlResponse = await _OrderTypeCategoryService.SaveOrderTypeCategoryAsync(headerViewModel.RegId, headerViewModel.CompanyId, OrderTypeCategoryEntity, headerViewModel.UserId);
                            return Ok(new SqlResponse { Result = sqlResponse.Result, Message = sqlResponse.Message, Data = null, TotalRecords = 0 });
                        }
                        else
                        {
                            return NotFound(GenerateMessage.AuthenticationFailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenerateMessage.AuthenticationFailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new OrderTypeCategory record");
            }
        }

        [HttpDelete, Route("DeleteOrderTypeCategory/{OrderTypeCategoryId}")]
        [Authorize]
        public async Task<ActionResult<M_OrderTypeCategory>> DeleteOrderTypeCategory(Int16 OrderTypeCategoryId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.Master, (Int16)E_Master.OrderTypeCategory, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsDelete)
                        {
                            var OrderTypeCategoryToDelete = await _OrderTypeCategoryService.GetOrderTypeCategoryByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, OrderTypeCategoryId, headerViewModel.UserId);

                            if (OrderTypeCategoryToDelete == null)
                                return NotFound(GenerateMessage.datanotfound);

                            var sqlResponse = await _OrderTypeCategoryService.DeleteOrderTypeCategoryAsync(headerViewModel.RegId, headerViewModel.CompanyId, OrderTypeCategoryToDelete, headerViewModel.UserId);
                            // Remove data from cache by key
                            _memoryCache.Remove($"OrderTypeCategory_{OrderTypeCategoryId}");
                            return StatusCode(StatusCodes.Status202Accepted, sqlResponse);
                        }
                        else
                        {
                            return NotFound(GenerateMessage.AuthenticationFailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenerateMessage.AuthenticationFailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}