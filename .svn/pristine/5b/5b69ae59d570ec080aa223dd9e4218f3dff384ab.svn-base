using AHHA.Application.IServices;
using AHHA.Application.IServices.Masters;
using AHHA.Core.Common;
using AHHA.Core.Entities.Masters;
using AHHA.Core.Models.Masters;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Masters
{
    [Route("api/Master")]
    [ApiController]
    public class COACategory1Controller : BaseController
    {
        private readonly ICOACategory1Service _COACategory1Service;
        private readonly ILogger<COACategory1Controller> _logger;

        public COACategory1Controller(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<COACategory1Controller> logger, ICOACategory1Service COACategory1Service)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _COACategory1Service = COACategory1Service;
        }

        [HttpGet, Route("GetCOACategory1")]
        [Authorize]
        public async Task<ActionResult> GetCOACategory1([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.COACategory1, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var cacheData = await _COACategory1Service.GetCOACategory1ListAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.pageSize, headerViewModel.pageNumber, headerViewModel.searchString, headerViewModel.UserId);

                        if (cacheData == null)
                            return NotFound(GenrateMessage.authenticationfailed);

                        return StatusCode(StatusCodes.Status202Accepted, cacheData);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                 "Error retrieving data from the database");
            }
        }

        [HttpGet, Route("GetCOACategory1byid/{COACategoryId}")]
        [Authorize]
        public async Task<ActionResult<COACategoryViewModel>> GetCOACategory1ById(Int16 COACategoryId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.COACategory1, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var cOACategoryViewModel = _mapper.Map<COACategoryViewModel>(await _COACategory1Service.GetCOACategory1ByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, COACategoryId, headerViewModel.UserId));

                        if (cOACategoryViewModel == null)
                            return NotFound(GenrateMessage.authenticationfailed);

                        return StatusCode(StatusCodes.Status202Accepted, cOACategoryViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("AddCOACategory1")]
        [Authorize]
        public async Task<ActionResult<COACategoryViewModel>> CreateCOACategory1(COACategoryViewModel COACategory1, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.COACategory1, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsCreate)
                        {
                            if (COACategory1 == null)
                                return StatusCode(StatusCodes.Status400BadRequest, "M_COACategory1 ID mismatch");

                            var COACategory1Entity = new M_COACategory1
                            {
                                CompanyId = COACategory1.CompanyId,
                                COACategoryCode = COACategory1.COACategoryCode,
                                COACategoryId = COACategory1.COACategoryId,
                                COACategoryName = COACategory1.COACategoryName,
                                CreateById = headerViewModel.UserId,
                                IsActive = COACategory1.IsActive,
                                Remarks = COACategory1.Remarks
                            };

                            var createdCOACategory1 = await _COACategory1Service.AddCOACategory1Async(headerViewModel.RegId, headerViewModel.CompanyId, COACategory1Entity, headerViewModel.UserId);
                            return StatusCode(StatusCodes.Status202Accepted, createdCOACategory1);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new COACategory1 record");
            }
        }

        [HttpPut, Route("UpdateCOACategory1/{COACategoryId}")]
        [Authorize]
        public async Task<ActionResult<COACategoryViewModel>> UpdateCOACategory1(Int16 COACategoryId, [FromBody] COACategoryViewModel COACategory1, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.COACategory1, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsEdit)
                        {
                            if (COACategoryId != COACategory1.COACategoryId)
                                return StatusCode(StatusCodes.Status400BadRequest, "M_COACategory1 ID mismatch");

                            var COACategory1ToUpdate = await _COACategory1Service.GetCOACategory1ByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, COACategoryId, headerViewModel.UserId);

                            if (COACategory1ToUpdate == null)
                                return NotFound($"M_COACategory1 with Id = {COACategoryId} not found");

                            var COACategory1Entity = new M_COACategory1
                            {
                                COACategoryCode = COACategory1.COACategoryCode,
                                COACategoryId = COACategory1.COACategoryId,
                                COACategoryName = COACategory1.COACategoryName,
                                EditById = headerViewModel.UserId,
                                EditDate = DateTime.Now,
                                IsActive = COACategory1.IsActive,
                                Remarks = COACategory1.Remarks
                            };

                            var sqlResponce = await _COACategory1Service.UpdateCOACategory1Async(headerViewModel.RegId, headerViewModel.CompanyId, COACategory1Entity, headerViewModel.UserId);
                            return StatusCode(StatusCodes.Status202Accepted, sqlResponce);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error updating data");
            }
        }

        [HttpDelete, Route("DeleteCOACategory1/{COACategoryId}")]
        [Authorize]
        public async Task<ActionResult<COACategoryViewModel>> DeleteCOACategory1(Int16 COACategoryId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)Modules.Master, (Int32)Master.COACategory1, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsDelete)
                        {
                            var COACategory1ToDelete = await _COACategory1Service.GetCOACategory1ByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, COACategoryId, headerViewModel.UserId);

                            if (COACategory1ToDelete == null)
                                return NotFound($"M_COACategory1 with Id = {COACategoryId} not found");

                            var sqlResponce = await _COACategory1Service.DeleteCOACategory1Async(headerViewModel.RegId, headerViewModel.CompanyId, COACategory1ToDelete, headerViewModel.UserId);

                            return StatusCode(StatusCodes.Status202Accepted, sqlResponce);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}