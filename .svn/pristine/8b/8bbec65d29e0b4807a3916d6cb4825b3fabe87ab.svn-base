using AHHA.Application.IServices.Accounts.AP;
using AHHA.Application.IServices;
using AHHA.Core.Common;
using AHHA.Core.Entities.Accounts.AP;
using AHHA.Core.Helper;
using AHHA.Core.Models.Account.AP;
using AHHA.Core.Models.Account;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;
using AHHA.Core.Models.Account.AR;

namespace AHHA.API.Controllers.Accounts.AP
{
    [Route("api/Account")]
    [ApiController]
    public class APCreditNoteController : BaseController
    {
        private readonly IAPCreditNoteService _APCreditNoteService;
        private readonly ILogger<APCreditNoteController> _logger;

        public APCreditNoteController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<APCreditNoteController> logger, IAPCreditNoteService APCreditNoteService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _APCreditNoteService = APCreditNoteService;
        }

        [HttpGet, Route("GetAPCreditNote")]
        [Authorize]
        public async Task<ActionResult> GetAPCreditNote([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var cacheData = await _APCreditNoteService.GetAPCreditNoteListAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.pageSize, headerViewModel.pageNumber, headerViewModel.searchString.Trim(), headerViewModel.UserId);

                        if (cacheData == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, cacheData);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                 "Error retrieving data from the database");
            }
        }

        [HttpGet, Route("GetAPCreditNotebyId/{CreditNoteId}")]
        [Authorize]
        public async Task<ActionResult<APCreditNoteViewModel>> GetAPCreditNoteById(string CreditNoteId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var apCreditNoteViewModel = await _APCreditNoteService.GetAPCreditNoteByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(string.IsNullOrEmpty(CreditNoteId) ? 0 : CreditNoteId.Trim()), string.Empty, headerViewModel.UserId);

                        if (apCreditNoteViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, apCreditNoteViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpGet, Route("GetAPCreditNotebyNo/{CreditNoteNo}")]
        [Authorize]
        public async Task<ActionResult<APCreditNoteViewModel>> GetAPCreditNoteByNo(string CreditNoteNo, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var APCreditNoteViewModel = await _APCreditNoteService.GetAPCreditNoteByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, 0, CreditNoteNo, headerViewModel.UserId);

                        if (APCreditNoteViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, APCreditNoteViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error retrieving data from the database");
            }
        }

        [HttpPost, Route("SaveAPCreditNote")]
        [Authorize]
        public async Task<ActionResult<APCreditNoteViewModel>> SaveAPCreditNote(APCreditNoteViewModel aPCreditNoteViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsCreate || userGroupRight.IsEdit)
                        {
                            if (aPCreditNoteViewModel == null)
                                return NotFound(GenrateMessage.datanotfound);

                            var APCreditNoteEntity = new ApCreditNoteHd
                            {
                                CompanyId = headerViewModel.CompanyId,
                                CreditNoteId = Convert.ToInt64(string.IsNullOrEmpty(aPCreditNoteViewModel.CreditNoteId) ? 0 : aPCreditNoteViewModel.CreditNoteId.Trim()),
                                CreditNoteNo = aPCreditNoteViewModel.CreditNoteNo,
                                ReferenceNo = aPCreditNoteViewModel.ReferenceNo == null ? string.Empty : aPCreditNoteViewModel.ReferenceNo,
                                TrnDate = DateHelperStatic.ParseClientDate(aPCreditNoteViewModel.TrnDate),
                                AccountDate = DateHelperStatic.ParseClientDate(aPCreditNoteViewModel.AccountDate),
                                DeliveryDate = DateHelperStatic.ParseClientDate(aPCreditNoteViewModel.DeliveryDate),
                                DueDate = DateHelperStatic.ParseClientDate(aPCreditNoteViewModel.DueDate),
                                SupplierId = aPCreditNoteViewModel.SupplierId,
                                CurrencyId = aPCreditNoteViewModel.CurrencyId,
                                ExhRate = aPCreditNoteViewModel.ExhRate == null ? 0 : aPCreditNoteViewModel.ExhRate,
                                CtyExhRate = aPCreditNoteViewModel.CtyExhRate == null ? 0 : aPCreditNoteViewModel.CtyExhRate,
                                CreditTermId = aPCreditNoteViewModel.CreditTermId,
                                BankId = Convert.ToInt16(aPCreditNoteViewModel.BankId == null ? 0 : aPCreditNoteViewModel.BankId),
                                TotAmt = aPCreditNoteViewModel.TotAmt == null ? 0 : aPCreditNoteViewModel.TotAmt,
                                TotLocalAmt = aPCreditNoteViewModel.TotLocalAmt == null ? 0 : aPCreditNoteViewModel.TotLocalAmt,
                                TotCtyAmt = aPCreditNoteViewModel.TotCtyAmt == null ? 0 : aPCreditNoteViewModel.TotCtyAmt,
                                GstAmt = aPCreditNoteViewModel.GstAmt == null ? 0 : aPCreditNoteViewModel.GstAmt,
                                GstLocalAmt = aPCreditNoteViewModel.GstLocalAmt == null ? 0 : aPCreditNoteViewModel.GstLocalAmt,
                                GstCtyAmt = aPCreditNoteViewModel.GstCtyAmt == null ? 0 : aPCreditNoteViewModel.GstCtyAmt,
                                TotAmtAftGst = aPCreditNoteViewModel.TotAmtAftGst == null ? 0 : aPCreditNoteViewModel.TotAmtAftGst,
                                TotLocalAmtAftGst = aPCreditNoteViewModel.TotLocalAmtAftGst == null ? 0 : aPCreditNoteViewModel.TotLocalAmtAftGst,
                                TotCtyAmtAftGst = aPCreditNoteViewModel.TotCtyAmtAftGst == null ? 0 : aPCreditNoteViewModel.TotCtyAmtAftGst,
                                BalAmt = aPCreditNoteViewModel.BalAmt == null ? 0 : aPCreditNoteViewModel.BalAmt,
                                BalLocalAmt = aPCreditNoteViewModel.BalLocalAmt == null ? 0 : aPCreditNoteViewModel.BalLocalAmt,
                                PayAmt = aPCreditNoteViewModel.PayAmt == null ? 0 : aPCreditNoteViewModel.PayAmt,
                                PayLocalAmt = aPCreditNoteViewModel.PayLocalAmt == null ? 0 : aPCreditNoteViewModel.PayLocalAmt,
                                ExGainLoss = aPCreditNoteViewModel.ExGainLoss == null ? 0 : aPCreditNoteViewModel.ExGainLoss,
                                OperationId = Convert.ToInt64(string.IsNullOrEmpty(aPCreditNoteViewModel.OperationId) == null ? 0 : aPCreditNoteViewModel.OperationId.Trim()),
                                OperationNo = aPCreditNoteViewModel.OperationNo == null ? string.Empty : aPCreditNoteViewModel.OperationNo,
                                Remarks = aPCreditNoteViewModel.Remarks == null ? string.Empty : aPCreditNoteViewModel.Remarks,
                                Address1 = aPCreditNoteViewModel.Address1 == null ? string.Empty : aPCreditNoteViewModel.Address1,
                                Address2 = aPCreditNoteViewModel.Address2 == null ? string.Empty : aPCreditNoteViewModel.Address2,
                                Address3 = aPCreditNoteViewModel.Address3 == null ? string.Empty : aPCreditNoteViewModel.Address3,
                                Address4 = aPCreditNoteViewModel.Address4 == null ? string.Empty : aPCreditNoteViewModel.Address4,
                                PinCode = aPCreditNoteViewModel.PinCode == null ? string.Empty : aPCreditNoteViewModel.PinCode,
                                CountryId = aPCreditNoteViewModel.CountryId,
                                PhoneNo = aPCreditNoteViewModel.PhoneNo == null ? string.Empty : aPCreditNoteViewModel.PhoneNo,
                                FaxNo = aPCreditNoteViewModel.FaxNo == null ? string.Empty : aPCreditNoteViewModel.FaxNo,
                                ContactName = aPCreditNoteViewModel.ContactName == null ? string.Empty : aPCreditNoteViewModel.ContactName,
                                MobileNo = aPCreditNoteViewModel.MobileNo == null ? string.Empty : aPCreditNoteViewModel.MobileNo,
                                EmailAdd = aPCreditNoteViewModel.EmailAdd == null ? string.Empty : aPCreditNoteViewModel.EmailAdd,
                                ModuleFrom = aPCreditNoteViewModel.ModuleFrom == null ? string.Empty : aPCreditNoteViewModel.ModuleFrom,
                                SuppInvoiceNo = aPCreditNoteViewModel.SuppInvoiceNo == null ? string.Empty : aPCreditNoteViewModel.SuppInvoiceNo,
                                CreateById = headerViewModel.UserId,
                                EditById = headerViewModel.UserId,
                                EditDate = DateTime.Now,
                            };

                            //Details Table data mapping
                            var APCreditNoteDtEntities = new List<ApCreditNoteDt>();

                            if (aPCreditNoteViewModel.data_details != null)
                            {
                                foreach (var item in aPCreditNoteViewModel.data_details)
                                {
                                    var APCreditNoteDtEntity = new ApCreditNoteDt
                                    {
                                        CreditNoteId = Convert.ToInt64(string.IsNullOrEmpty(item.CreditNoteId) ? 0 : item.CreditNoteId.Trim()),
                                        CreditNoteNo = item.CreditNoteNo,
                                        ItemNo = item.ItemNo,
                                        SeqNo = item.SeqNo,
                                        DocItemNo = item.DocItemNo,
                                        ProductId = item.ProductId,
                                        GLId = item.GLId,
                                        QTY = item.QTY,
                                        BillQTY = item.BillQTY,
                                        UomId = item.UomId,
                                        UnitPrice = item.UnitPrice,
                                        TotAmt = item.TotAmt,
                                        TotLocalAmt = item.TotLocalAmt,
                                        TotCtyAmt = item.TotCtyAmt,
                                        Remarks = item.Remarks,
                                        GstId = item.GstId,
                                        GstPercentage = item.GstPercentage,
                                        GstAmt = item.GstAmt,
                                        GstLocalAmt = item.GstLocalAmt,
                                        GstCtyAmt = item.GstCtyAmt,
                                        DeliveryDate = DateHelperStatic.ParseClientDate(item.DeliveryDate),
                                        DepartmentId = item.DepartmentId,
                                        EmployeeId = item.EmployeeId,
                                        PortId = item.PortId,
                                        VesselId = item.VesselId,
                                        BargeId = item.BargeId,
                                        VoyageId = item.VoyageId,
                                        OperationId = Convert.ToInt64(string.IsNullOrEmpty(item.OperationId.Trim())),
                                        OperationNo = item.OperationNo,
                                        OPRefNo = item.OPRefNo,
                                        SupplyDate = DateHelperStatic.ParseClientDate(item.SupplyDate),
                                    };

                                    APCreditNoteDtEntities.Add(APCreditNoteDtEntity);
                                }
                            }

                            var sqlResponce = await _APCreditNoteService.SaveAPCreditNoteAsync(headerViewModel.RegId, headerViewModel.CompanyId, APCreditNoteEntity, APCreditNoteDtEntities, headerViewModel.UserId);

                            if (sqlResponce.Result > 0)
                            {
                                var customerModel = await _APCreditNoteService.GetAPCreditNoteByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, sqlResponce.Result, string.Empty, headerViewModel.UserId);

                                return StatusCode(StatusCodes.Status202Accepted, customerModel);
                            }

                            return StatusCode(StatusCodes.Status202Accepted, sqlResponce);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new APCreditNote record");
            }
        }

        [HttpPost, Route("DeleteAPCreditNote")]
        [Authorize]
        public async Task<ActionResult<APCreditNoteViewModel>> DeleteAPCreditNote(DeleteViewModel deleteViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsDelete)
                        {
                            if (!string.IsNullOrEmpty(deleteViewModel.DocumentId))
                            {
                                var sqlResponce = await _APCreditNoteService.DeleteAPCreditNoteAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(deleteViewModel.DocumentId), deleteViewModel.DocumentNo, deleteViewModel.CancelRemarks, headerViewModel.UserId);

                                if (sqlResponce.Result > 0)
                                {
                                    var customerModel = await _APCreditNoteService.GetAPCreditNoteByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(deleteViewModel.DocumentId), string.Empty, headerViewModel.UserId);

                                    return StatusCode(StatusCodes.Status202Accepted, customerModel);
                                }

                                return StatusCode(StatusCodes.Status204NoContent, sqlResponce);
                            }
                            else
                            {
                                return NotFound(GenrateMessage.datanotfound);
                            }
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}