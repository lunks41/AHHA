using AHHA.Application.IServices;
using AHHA.Application.IServices.Accounts.CB;
using AHHA.Core.Common;
using AHHA.Core.Entities.Accounts.CB;
using AHHA.Core.Helper;
using AHHA.Core.Models.Account;
using AHHA.Core.Models.Account.CB;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Accounts.CB
{
    [Route("api/Account")]
    [ApiController]
    public class CBPettyCashController : BaseController
    {
        private readonly ICBPettyCashService _CBPettyCashService;
        private readonly ILogger<CBPettyCashController> _logger;

        public CBPettyCashController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<CBPettyCashController> logger, ICBPettyCashService CBPettyCashService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _CBPettyCashService = CBPettyCashService;
        }

        [HttpGet, Route("GetCBPettyCash")]
        [Authorize]
        public async Task<ActionResult> GetCBPettyCash([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.CB, (Int32)E_CB.CBPattyCash, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var cacheData = await _CBPettyCashService.GetCBPettyCashListAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.pageSize, headerViewModel.pageNumber, headerViewModel.searchString.Trim(), headerViewModel.UserId);

                        if (cacheData == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, cacheData);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                 new SqlResponce { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        [HttpGet, Route("GetCBPettyCashbyId/{PaymentId}")]
        [Authorize]
        public async Task<ActionResult<CBPettyCashHdViewModel>> GetCBPettyCashById(string PaymentId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.CB, (Int32)E_CB.CBPattyCash, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var CBPettyCashHdViewModel = await _CBPettyCashService.GetCBPettyCashByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(string.IsNullOrEmpty(PaymentId) ? 0 : PaymentId.Trim()), string.Empty, headerViewModel.UserId);

                        if (CBPettyCashHdViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, CBPettyCashHdViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new SqlResponce { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        [HttpGet, Route("GetCBPettyCashbyNo/{PaymentNo}")]
        [Authorize]
        public async Task<ActionResult<CBPettyCashHdViewModel>> GetCBPettyCashByNo(string PaymentNo, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.CB, (Int32)E_CB.CBPattyCash, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var CBPettyCashHdViewModel = await _CBPettyCashService.GetCBPettyCashByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, 0, PaymentNo, headerViewModel.UserId);

                        if (CBPettyCashHdViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, CBPettyCashHdViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new SqlResponce { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        [HttpPost, Route("SaveCBPettyCash")]
        [Authorize]
        public async Task<ActionResult<CBPettyCashHdViewModel>> SaveCBPettyCash(CBPettyCashHdViewModel CBPettyCashHdViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.CB, (Int32)E_CB.CBPattyCash, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsCreate || userGroupRight.IsEdit)
                        {
                            if (CBPettyCashHdViewModel == null)
                                return NotFound(GenrateMessage.datanotfound);

                            var CBPettyCashEntity = new CBPettyCashHd
                            {
                                CompanyId = headerViewModel.CompanyId,
                                PaymentId = Convert.ToInt64(string.IsNullOrEmpty(CBPettyCashHdViewModel.PaymentId) ? 0 : CBPettyCashHdViewModel.PaymentId.Trim()),
                                PaymentNo = CBPettyCashHdViewModel.PaymentNo,
                                ReferenceNo = CBPettyCashHdViewModel.ReferenceNo == null ? string.Empty : CBPettyCashHdViewModel.ReferenceNo,
                                TrnDate = DateHelperStatic.ParseClientDate(CBPettyCashHdViewModel.TrnDate),
                                AccountDate = DateHelperStatic.ParseClientDate(CBPettyCashHdViewModel.AccountDate),
                                BankId = Convert.ToInt16(CBPettyCashHdViewModel.BankId == null ? 0 : CBPettyCashHdViewModel.BankId),
                                CurrencyId = CBPettyCashHdViewModel.CurrencyId,
                                ExhRate = CBPettyCashHdViewModel.ExhRate == null ? 0 : CBPettyCashHdViewModel.ExhRate,
                                CtyExhRate = CBPettyCashHdViewModel.CtyExhRate == null ? 0 : CBPettyCashHdViewModel.CtyExhRate,
                                PaymentTypeId = Convert.ToInt16(CBPettyCashHdViewModel.PaymentTypeId == null ? 0 : CBPettyCashHdViewModel.PaymentTypeId),
                                ChequeNo = CBPettyCashHdViewModel.ChequeNo == null ? string.Empty : CBPettyCashHdViewModel.ChequeNo,
                                ChequeDate = DateHelperStatic.ParseClientDate(CBPettyCashHdViewModel.ChequeDate),
                                BankChgAmt = CBPettyCashHdViewModel.BankChgAmt == null ? 0 : CBPettyCashHdViewModel.BankChgAmt,
                                BankChgLocalAmt = CBPettyCashHdViewModel.BankChgLocalAmt == null ? 0 : CBPettyCashHdViewModel.BankChgLocalAmt,
                                TotAmt = CBPettyCashHdViewModel.TotAmt == null ? 0 : CBPettyCashHdViewModel.TotAmt,
                                TotLocalAmt = CBPettyCashHdViewModel.TotLocalAmt == null ? 0 : CBPettyCashHdViewModel.TotLocalAmt,
                                TotCtyAmt = CBPettyCashHdViewModel.TotCtyAmt == null ? 0 : CBPettyCashHdViewModel.TotCtyAmt,
                                GstClaimDate = DateHelperStatic.ParseClientDate(CBPettyCashHdViewModel.GstClaimDate),
                                GstAmt = CBPettyCashHdViewModel.GstAmt == null ? 0 : CBPettyCashHdViewModel.GstAmt,
                                GstLocalAmt = CBPettyCashHdViewModel.GstLocalAmt == null ? 0 : CBPettyCashHdViewModel.GstLocalAmt,
                                GstCtyAmt = CBPettyCashHdViewModel.GstCtyAmt == null ? 0 : CBPettyCashHdViewModel.GstCtyAmt,
                                TotAmtAftGst = CBPettyCashHdViewModel.TotAmtAftGst == null ? 0 : CBPettyCashHdViewModel.TotAmtAftGst,
                                TotLocalAmtAftGst = CBPettyCashHdViewModel.TotLocalAmtAftGst == null ? 0 : CBPettyCashHdViewModel.TotLocalAmtAftGst,
                                TotCtyAmtAftGst = CBPettyCashHdViewModel.TotCtyAmtAftGst == null ? 0 : CBPettyCashHdViewModel.TotCtyAmtAftGst,
                                Remarks = CBPettyCashHdViewModel.Remarks == null ? string.Empty : CBPettyCashHdViewModel.Remarks,
                                PayeeTo = CBPettyCashHdViewModel.PayeeTo == null ? string.Empty : CBPettyCashHdViewModel.PayeeTo,
                                ModuleFrom = CBPettyCashHdViewModel.ModuleFrom == null ? string.Empty : CBPettyCashHdViewModel.ModuleFrom,
                                CreateById = headerViewModel.UserId,
                                EditById = headerViewModel.UserId,
                                EditDate = DateTime.Now,
                            };

                            //Details Table data mapping
                            var CBPettyCashDtEntities = new List<CBPettyCashDt>();

                            if (CBPettyCashHdViewModel.data_details != null)
                            {
                                foreach (var item in CBPettyCashHdViewModel.data_details)
                                {
                                    var CBPettyCashDtEntity = new CBPettyCashDt
                                    {
                                        PaymentId = Convert.ToInt64(string.IsNullOrEmpty(item.PaymentId) ? 0 : item.PaymentId.Trim()),
                                        PaymentNo = item.PaymentNo,
                                        ItemNo = item.ItemNo,
                                        SeqNo = item.SeqNo,
                                        GLId = item.GLId,
                                        Remarks = item.Remarks,
                                        TotAmt = item.TotAmt,
                                        TotLocalAmt = item.TotLocalAmt,
                                        TotCtyAmt = item.TotCtyAmt,
                                        GstId = item.GstId,
                                        GstPercentage = item.GstPercentage,
                                        GstAmt = item.GstAmt,
                                        GstLocalAmt = item.GstLocalAmt,
                                        GstCtyAmt = item.GstCtyAmt,
                                        DepartmentId = item.DepartmentId,
                                        EmployeeId = item.EmployeeId,
                                        VesselId = item.VesselId,
                                        BargeId = item.BargeId,
                                        VoyageId = item.VoyageId,
                                    };

                                    CBPettyCashDtEntities.Add(CBPettyCashDtEntity);
                                }
                            }

                            var sqlResponce = await _CBPettyCashService.SaveCBPettyCashAsync(headerViewModel.RegId, headerViewModel.CompanyId, CBPettyCashEntity, CBPettyCashDtEntities, headerViewModel.UserId);

                            if (sqlResponce.Result > 0)
                            {
                                var customerModel = await _CBPettyCashService.GetCBPettyCashByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, sqlResponce.Result, string.Empty, headerViewModel.UserId);

                                return StatusCode(StatusCodes.Status202Accepted, customerModel);
                            }

                            return StatusCode(StatusCodes.Status202Accepted, sqlResponce);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new CBPettyCash record");
            }
        }

        [HttpPost, Route("DeleteCBPettyCash")]
        [Authorize]
        public async Task<ActionResult<CBPettyCashHdViewModel>> DeleteCBPettyCash(DeleteViewModel deleteViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.CB, (Int32)E_CB.CBPattyCash, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsDelete)
                        {
                            if (!string.IsNullOrEmpty(deleteViewModel.DocumentId))
                            {
                                var sqlResponce = await _CBPettyCashService.DeleteCBPettyCashAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(deleteViewModel.DocumentId), deleteViewModel.DocumentNo, deleteViewModel.CancelRemarks, headerViewModel.UserId);

                                if (sqlResponce.Result > 0)
                                {
                                    var customerModel = await _CBPettyCashService.GetCBPettyCashByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(deleteViewModel.DocumentId), string.Empty, headerViewModel.UserId);

                                    return StatusCode(StatusCodes.Status202Accepted, customerModel);
                                }

                                return StatusCode(StatusCodes.Status204NoContent, sqlResponce);
                            }
                            else
                            {
                                return NotFound(GenrateMessage.datanotfound);
                            }
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}