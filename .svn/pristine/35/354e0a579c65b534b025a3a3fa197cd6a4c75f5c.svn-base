using AHHA.Application.CommonServices;
using AHHA.Application.IServices.Accounts;
using AHHA.Application.IServices.Accounts.GL;
using AHHA.Core.Common;
using AHHA.Core.Entities.Accounts.GL;
using AHHA.Core.Entities.Admin;
using AHHA.Core.Entities.Masters;
using AHHA.Core.Models.Account.GL;
using AHHA.Core.Models.Admin;
using AHHA.Infra.Data;
using Microsoft.EntityFrameworkCore;
using System.Data;
using System.Reflection;
using System.Reflection.Metadata;
using System.Transactions;

namespace AHHA.Infra.Services.Accounts.GL
{
    public sealed class GLOpeningBalanceService : IGLOpeningBalanceService
    {
        private readonly IRepository<GLOpeningBalance> _repository;
        private ApplicationDbContext _context;
        private readonly IAccountService _accountService;

        public GLOpeningBalanceService(IRepository<GLOpeningBalance> repository, ApplicationDbContext context, IAccountService accountService)
        {
            _repository = repository;
            _context = context;
            _accountService = accountService;
        }

        public async Task<IEnumerable<GLOpeningBalanceViewModel>> GetGLOpeningBalanceListAsync(string RegId, Int16 CompanyId, Int32 DocumentId, Int16 UserId)
        {
            try
            {
                return await _repository.GetQueryAsync<GLOpeningBalanceViewModel>(RegId, $"SELECT Glopn.CompanyId,Glopn.DocumentId,Glopn.ItemNo,Glopn.GLId,M_CharAcc.GLCode,M_CharAcc.GLName,Glopn.DocumentNo,Glopn.AccountDate,Glopn.CustomerId,Glopn.SupplierId,Glopn.CurrencyId,M_Curr.CurrencyCode,M_Curr.CurrencyName,Glopn.ExhRate,Glopn.IsDebit,Glopn.TotAmt,Glopn.TotLocalAmt,Glopn.DepartmentId,Glopn.EmployeeId,Glopn.ProductId,Glopn.PortId,Glopn.VesselId,Glopn.BargeId,Glopn.VoyageId,Glopn.CreateById,Glopn.CreateDate,Glopn.EditById,Glopn.EditDate FROM dbo.GLOpeningBalance Glopn INNER JOIN dbo.M_Currency M_Curr ON M_Curr.CurrencyId = Glopn.CurrencyId INNER JOIN dbo.M_ChartOfAccount M_CharAcc ON M_CharAcc.GLId = Glopn.GLId WHERE Glopn.DocumentId={DocumentId}");
            }
            catch (Exception ex)
            {
                var errorLog = new AdmErrorLog
                {
                    CompanyId = CompanyId,
                    ModuleId = (short)E_Modules.GL,
                    TransactionId = (short)E_GL.OpeningBalance,
                    DocumentId = 0,
                    DocumentNo = "",
                    TblName = "GLOpeningBalance",
                    ModeId = (short)E_Mode.View,
                    Remarks = ex.Message + ex.InnerException,
                    CreateById = UserId
                };

                _context.Add(errorLog);
                _context.SaveChanges();

                throw new Exception(ex.ToString());
            }
        }

        public async Task<SqlResponce> SaveGLOpeningBalanceAsync(string RegId, Int16 CompanyId, GLOpeningBalanceViewModel gLOpeningBalanceViewModel, Int16 UserId)
        {
            using (var transaction = _context.Database.BeginTransaction())
            {
                bool IsEdit = false;
                try
                {
                    if (gLOpeningBalanceViewModel.DocumentId != 0)
                    {
                        IsEdit = true;
                    }
                    if (IsEdit)
                    {
                        var DataExist = await _repository.GetQueryAsync<SqlResponceIds>(RegId, $"SELECT 1 AS IsExist FROM dbo.GLOpeningBalance WHERE CompanyId IN {CompanyId} AND DocumentId={gLOpeningBalanceViewModel.DocumentId} AND ItemNo={gLOpeningBalanceViewModel.ItemNo}");

                        if (DataExist.Count() > 0 && (DataExist.ToList()[0].IsExist == 1 || DataExist.ToList()[0].IsExist == 2))
                            return new SqlResponce { Result = -1, Message = "ItemNo Exist" };
                    }
                    if (IsEdit)
                    {
                        var entityHead = _context.Update(gLOpeningBalanceViewModel);
                        entityHead.Property(b => b.CreateById).IsModified = false;
                        entityHead.Property(b => b.CompanyId).IsModified = false;
                    }
                    else
                    {
                        var sqlMissingResponce = await _repository.GetQuerySingleOrDefaultAsync<SqlResponceIds>(RegId, $"SELECT ISNULL((SELECT TOP 1 (ItemNo + 1) FROM dbo.GLOpeningBalance WHERE (ItemNo + 1) NOT IN (SELECT ItemNo FROM dbo.GLOpeningBalance) AND DocumentId={gLOpeningBalanceViewModel.DocumentId} AND CompanyId={CompanyId}),1) AS NextId");

                        if (sqlMissingResponce != null && sqlMissingResponce.NextId > 0)
                        {
                            gLOpeningBalanceViewModel.ItemNo = Convert.ToInt32(sqlMissingResponce.NextId);
                            gLOpeningBalanceViewModel.EditDate = null;
                            gLOpeningBalanceViewModel.EditById = null;
                            _context.Add(gLOpeningBalanceViewModel);
                        }
                        else
                            return new SqlResponce { Result = -1, Message = "ItemNo Should not be zero" };
                    }

                    var SupplierToSave = _context.SaveChanges();

                    #region Save AuditLog

                    if (SupplierToSave > 0)
                    {
                        //Saving Audit log
                        var auditLog = new AdmAuditLog
                        {
                            CompanyId = CompanyId,
                            ModuleId = (short)E_Modules.GL,
                            TransactionId = (short)E_GL.OpeningBalance,
                            DocumentId = gLOpeningBalanceViewModel.DocumentId,
                            DocumentNo = gLOpeningBalanceViewModel.ItemNo.ToString(),
                            TblName = "GLOpeningBalance",
                            ModeId = IsEdit ? (short)E_Mode.Update : (short)E_Mode.Create,
                            Remarks = "Supplier Save Successfully",
                            CreateById = UserId,
                            CreateDate = DateTime.Now
                        };

                        _context.Add(auditLog);
                        var auditLogSave = _context.SaveChanges();

                        if (auditLogSave > 0)
                        {
                            transaction.Commit();
                            return new SqlResponce { Result = 1, Message = "Save Successfully" };
                        }
                    }
                    else
                    {
                        return new SqlResponce { Result = 1, Message = "Save Failed" };
                    }

                    #endregion Save AuditLog

                    return new SqlResponce();
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    _context.ChangeTracker.Clear();

                    var errorLog = new AdmErrorLog
                    {
                        CompanyId = CompanyId,
                        ModuleId = (short)E_Modules.GL,
                        TransactionId = (short)E_GL.OpeningBalance,
                        DocumentId = gLOpeningBalanceViewModel.DocumentId,
                        DocumentNo = gLOpeningBalanceViewModel.ItemNo.ToString(),
                        TblName = "GLOpeningBalance",
                        ModeId = IsEdit ? (short)E_Mode.Update : (short)E_Mode.Create,
                        Remarks = ex.Message + ex.InnerException,
                        CreateById = UserId
                    };
                    _context.Add(errorLog);
                    _context.SaveChanges();

                    throw new Exception(ex.ToString());
                }
            }
        }

        public async Task<IEnumerable<GLOpeningBalanceViewModel>> GenerateGLYearEndProcessAsyn(string RegId, Int16 CompanyId, Int32 DocumentId, Int16 UserId)
        {
            try
            {
                return await _repository.GetQueryAsync<GLOpeningBalanceViewModel>(RegId, $"exec Adm_GetUserTransactions {CompanyId},{DocumentId},{UserId}");
            }
            catch (Exception ex)
            {
                var errorLog = new AdmErrorLog
                {
                    CompanyId = CompanyId,
                    ModuleId = (short)E_Modules.GL,
                    TransactionId = (short)E_GL.YearEndProcess,
                    DocumentId = 0,
                    DocumentNo = "",
                    TblName = "YearEndProcess",
                    ModeId = (short)E_Mode.View,
                    Remarks = ex.Message + ex.InnerException,
                    CreateById = UserId
                };

                _context.Add(errorLog);
                _context.SaveChanges();

                throw new Exception(ex.ToString());
            }
        }
    }
}