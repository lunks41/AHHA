using AHHA.Application.IServices;
using AHHA.Application.IServices.Accounts.AP;
using AHHA.Core.Common;
using AHHA.Core.Entities.Accounts.AP;
using AHHA.Core.Helper;
using AHHA.Core.Models.Account;
using AHHA.Core.Models.Account.AP;
using AutoMapper;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Caching.Memory;

namespace AHHA.API.Controllers.Accounts.AP
{
    [Route("api/Account")]
    [ApiController]
    public class APInvoiceController : BaseController
    {
        private readonly IAPInvoiceService _APInvoiceService;
        private readonly ILogger<APInvoiceController> _logger;

        public APInvoiceController(IMemoryCache memoryCache, IMapper mapper, IBaseService baseServices, ILogger<APInvoiceController> logger, IAPInvoiceService APInvoiceService)
    : base(memoryCache, mapper, baseServices)
        {
            _logger = logger;
            _APInvoiceService = APInvoiceService;
        }

        [HttpGet, Route("GetAPInvoice")]
        [Authorize]
        public async Task<ActionResult> GetAPInvoice([FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var cacheData = await _APInvoiceService.GetAPInvoiceListAsync(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.pageSize, headerViewModel.pageNumber, headerViewModel.searchString.Trim(), headerViewModel.UserId);

                        if (cacheData == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, cacheData);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NotFound(GenrateMessage.authenticationfailed);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                 new SqlResponse { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        [HttpGet, Route("GetAPInvoicebyId/{InvoiceId}")]
        [Authorize]
        public async Task<ActionResult<APInvoiceViewModel>> GetAPInvoiceById(string InvoiceId, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var APInvoiceViewModel = await _APInvoiceService.GetAPInvoiceByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(string.IsNullOrEmpty(InvoiceId) ? 0 : InvoiceId.Trim()), string.Empty, headerViewModel.UserId);

                        if (APInvoiceViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, APInvoiceViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new SqlResponse { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        [HttpGet, Route("GetAPInvoicebyNo/{InvoiceNo}")]
        [Authorize]
        public async Task<ActionResult<APInvoiceViewModel>> GetAPInvoiceByNo(string InvoiceNo, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        var APInvoiceViewModel = await _APInvoiceService.GetAPInvoiceByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, 0, InvoiceNo, headerViewModel.UserId);

                        if (APInvoiceViewModel == null)
                            return NotFound(GenrateMessage.datanotfound);

                        return StatusCode(StatusCodes.Status202Accepted, APInvoiceViewModel);
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    new SqlResponse { Result = -1, Message = "Internal Server Error", Data = null });
            }
        }

        [HttpPost, Route("SaveAPInvoice")]
        [Authorize]
        public async Task<ActionResult<APInvoiceViewModel>> SaveAPInvoice(APInvoiceViewModel aPInvoiceViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsCreate || userGroupRight.IsEdit)
                        {
                            if (aPInvoiceViewModel == null)
                                return NotFound(GenrateMessage.datanotfound);

                            var APInvoiceEntity = new ApInvoiceHd
                            {
                                CompanyId = headerViewModel.CompanyId,
                                InvoiceId = Convert.ToInt64(string.IsNullOrEmpty(aPInvoiceViewModel.InvoiceId) ? "0" : aPInvoiceViewModel.InvoiceId.Trim()),
                                InvoiceNo = aPInvoiceViewModel.InvoiceNo?.Trim() ?? string.Empty,
                                ReferenceNo = aPInvoiceViewModel.ReferenceNo?.Trim() ?? string.Empty,
                                TrnDate = DateHelperStatic.ParseClientDate(aPInvoiceViewModel.TrnDate),
                                AccountDate = DateHelperStatic.ParseClientDate(aPInvoiceViewModel.AccountDate),
                                DeliveryDate = DateHelperStatic.ParseClientDate(aPInvoiceViewModel.DeliveryDate),
                                DueDate = DateHelperStatic.ParseClientDate(aPInvoiceViewModel.DueDate),
                                SupplierId = aPInvoiceViewModel.SupplierId,
                                CurrencyId = aPInvoiceViewModel.CurrencyId,
                                ExhRate = aPInvoiceViewModel.ExhRate,
                                CtyExhRate = aPInvoiceViewModel.CtyExhRate,
                                CreditTermId = aPInvoiceViewModel.CreditTermId,
                                BankId = Convert.ToInt16(aPInvoiceViewModel.BankId),
                                TotAmt = aPInvoiceViewModel.TotAmt,
                                TotLocalAmt = aPInvoiceViewModel.TotLocalAmt,
                                TotCtyAmt = aPInvoiceViewModel.TotCtyAmt,
                                GstAmt = aPInvoiceViewModel.GstAmt,
                                GstLocalAmt = aPInvoiceViewModel.GstLocalAmt,
                                GstCtyAmt = aPInvoiceViewModel.GstCtyAmt,
                                TotAmtAftGst = aPInvoiceViewModel.TotAmtAftGst,
                                TotLocalAmtAftGst = aPInvoiceViewModel.TotLocalAmtAftGst,
                                TotCtyAmtAftGst = aPInvoiceViewModel.TotCtyAmtAftGst,
                                BalAmt = aPInvoiceViewModel.BalAmt,
                                BalLocalAmt = aPInvoiceViewModel.BalLocalAmt,
                                PayAmt = aPInvoiceViewModel.PayAmt,
                                PayLocalAmt = aPInvoiceViewModel.PayLocalAmt,
                                ExGainLoss = aPInvoiceViewModel.ExGainLoss,
                                OperationId = Convert.ToInt64(string.IsNullOrEmpty(aPInvoiceViewModel.OperationId) ? "0" : aPInvoiceViewModel.OperationId.Trim()),
                                OperationNo = aPInvoiceViewModel.OperationNo?.Trim() ?? string.Empty,
                                Remarks = aPInvoiceViewModel.Remarks?.Trim() ?? string.Empty,
                                Address1 = aPInvoiceViewModel.Address1?.Trim() ?? string.Empty,
                                Address2 = aPInvoiceViewModel.Address2?.Trim() ?? string.Empty,
                                Address3 = aPInvoiceViewModel.Address3?.Trim() ?? string.Empty,
                                Address4 = aPInvoiceViewModel.Address4?.Trim() ?? string.Empty,
                                PinCode = aPInvoiceViewModel.PinCode?.Trim() ?? string.Empty,
                                CountryId = aPInvoiceViewModel.CountryId,
                                PhoneNo = aPInvoiceViewModel.PhoneNo?.Trim() ?? string.Empty,
                                FaxNo = aPInvoiceViewModel.FaxNo?.Trim() ?? string.Empty,
                                ContactName = aPInvoiceViewModel.ContactName?.Trim() ?? string.Empty,
                                MobileNo = aPInvoiceViewModel.MobileNo?.Trim() ?? string.Empty,
                                EmailAdd = aPInvoiceViewModel.EmailAdd?.Trim() ?? string.Empty,
                                ModuleFrom = aPInvoiceViewModel.ModuleFrom?.Trim() ?? string.Empty,
                                SuppInvoiceNo = aPInvoiceViewModel.SuppInvoiceNo?.Trim() ?? string.Empty,
                                CreateById = headerViewModel.UserId,
                                EditById = headerViewModel.UserId,
                                EditDate = DateTime.Now,
                            };

                            //Details Table data mapping
                            var APInvoiceDtEntities = new List<ApInvoiceDt>();

                            if (aPInvoiceViewModel.data_details != null)
                            {
                                foreach (var item in aPInvoiceViewModel.data_details)
                                {
                                    var APInvoiceDtEntity = new ApInvoiceDt
                                    {
                                        InvoiceId = Convert.ToInt64(string.IsNullOrEmpty(item.InvoiceId) ? 0 : item.InvoiceId.Trim()),
                                        InvoiceNo = item.InvoiceNo,
                                        ItemNo = item.ItemNo,
                                        SeqNo = item.SeqNo,
                                        DocItemNo = item.DocItemNo,
                                        ProductId = item.ProductId,
                                        GLId = item.GLId,
                                        QTY = item.QTY,
                                        BillQTY = item.BillQTY,
                                        UomId = item.UomId,
                                        UnitPrice = item.UnitPrice,
                                        TotAmt = item.TotAmt,
                                        TotLocalAmt = item.TotLocalAmt,
                                        TotCtyAmt = item.TotCtyAmt,
                                        Remarks = item.Remarks,
                                        GstId = item.GstId,
                                        GstPercentage = item.GstPercentage,
                                        GstAmt = item.GstAmt,
                                        GstLocalAmt = item.GstLocalAmt,
                                        GstCtyAmt = item.GstCtyAmt,
                                        DeliveryDate = DateHelperStatic.ParseClientDate(item.DeliveryDate),
                                        DepartmentId = item.DepartmentId,
                                        EmployeeId = item.EmployeeId,
                                        PortId = item.PortId,
                                        VesselId = item.VesselId,
                                        BargeId = item.BargeId,
                                        VoyageId = item.VoyageId,
                                        OperationId = Convert.ToInt64(string.IsNullOrEmpty(item.OperationId.Trim())),
                                        OperationNo = item.OperationNo,
                                        OPRefNo = item.OPRefNo,
                                        SupplyDate = DateHelperStatic.ParseClientDate(item.SupplyDate),
                                    };

                                    APInvoiceDtEntities.Add(APInvoiceDtEntity);
                                }
                            }

                            var sqlResponse = await _APInvoiceService.SaveAPInvoiceAsync(headerViewModel.RegId, headerViewModel.CompanyId, APInvoiceEntity, APInvoiceDtEntities, headerViewModel.UserId);

                            if (sqlResponse.Result > 0)
                            {
                                var customerModel = await _APInvoiceService.GetAPInvoiceByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, sqlResponse.Result, string.Empty, headerViewModel.UserId);

                                return StatusCode(StatusCodes.Status202Accepted, customerModel);
                            }

                            return StatusCode(StatusCodes.Status202Accepted, sqlResponse);
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error creating new APInvoice record");
            }
        }

        [HttpPost, Route("DeleteAPInvoice")]
        [Authorize]
        public async Task<ActionResult<APInvoiceViewModel>> DeleteAPInvoice(DeleteViewModel deleteViewModel, [FromHeader] HeaderViewModel headerViewModel)
        {
            try
            {
                if (ValidateHeaders(headerViewModel.RegId, headerViewModel.CompanyId, headerViewModel.UserId))
                {
                    var userGroupRight = ValidateScreen(headerViewModel.RegId, headerViewModel.CompanyId, (Int16)E_Modules.AP, (Int32)E_AP.Invoice, headerViewModel.UserId);

                    if (userGroupRight != null)
                    {
                        if (userGroupRight.IsDelete)
                        {
                            if (!string.IsNullOrEmpty(deleteViewModel.DocumentId))
                            {
                                var sqlResponse = await _APInvoiceService.DeleteAPInvoiceAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(deleteViewModel.DocumentId), deleteViewModel.DocumentNo, deleteViewModel.CancelRemarks, headerViewModel.UserId);

                                if (sqlResponse.Result > 0)
                                {
                                    var customerModel = await _APInvoiceService.GetAPInvoiceByIdAsync(headerViewModel.RegId, headerViewModel.CompanyId, Convert.ToInt64(deleteViewModel.DocumentId), string.Empty, headerViewModel.UserId);

                                    return StatusCode(StatusCodes.Status202Accepted, customerModel);
                                }

                                return StatusCode(StatusCodes.Status204NoContent, sqlResponse);
                            }
                            else
                            {
                                return NotFound(GenrateMessage.datanotfound);
                            }
                        }
                        else
                        {
                            return NotFound(GenrateMessage.authenticationfailed);
                        }
                    }
                    else
                    {
                        return NotFound(GenrateMessage.authenticationfailed);
                    }
                }
                else
                {
                    return NoContent();
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, ex.Message);
                return StatusCode(StatusCodes.Status500InternalServerError,
                    "Error deleting data");
            }
        }
    }
}